// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// A Session
    /// </summary>
    public partial class KratosSession
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosSession" /> class.
        /// </summary>
        /// <param name="id">Session ID</param>
        /// <param name="active">Active state. If false the session is no longer active.</param>
        /// <param name="authenticatedAt">The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).</param>
        /// <param name="authenticationMethods">A list of authenticators which were used to authenticate the session.</param>
        /// <param name="authenticatorAssuranceLevel">authenticatorAssuranceLevel</param>
        /// <param name="devices">Devices has history of all endpoints where the session was used</param>
        /// <param name="expiresAt">The Session Expiry  When this session expires at.</param>
        /// <param name="identity">identity</param>
        /// <param name="issuedAt">The Session Issuance Timestamp  When this session was issued at. Usually equal or close to &#x60;authenticated_at&#x60;.</param>
        /// <param name="tokenized">Tokenized is the tokenized (e.g. JWT) version of the session.  It is only set when the &#x60;tokenize&#x60; query parameter was set to a valid tokenize template during calls to &#x60;/session/whoami&#x60;.</param>
        [JsonConstructor]
        public KratosSession(string id, Option<bool?> active = default, Option<DateTime?> authenticatedAt = default, Option<List<KratosSessionAuthenticationMethod>?> authenticationMethods = default, Option<KratosAuthenticatorAssuranceLevel?> authenticatorAssuranceLevel = default, Option<List<KratosSessionDevice>?> devices = default, Option<DateTime?> expiresAt = default, Option<KratosIdentity?> identity = default, Option<DateTime?> issuedAt = default, Option<string?> tokenized = default)
        {
            Id = id;
            ActiveOption = active;
            AuthenticatedAtOption = authenticatedAt;
            AuthenticationMethodsOption = authenticationMethods;
            AuthenticatorAssuranceLevelOption = authenticatorAssuranceLevel;
            DevicesOption = devices;
            ExpiresAtOption = expiresAt;
            IdentityOption = identity;
            IssuedAtOption = issuedAt;
            TokenizedOption = tokenized;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AuthenticatorAssuranceLevel
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosAuthenticatorAssuranceLevel?> AuthenticatorAssuranceLevelOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthenticatorAssuranceLevel
        /// </summary>
        [JsonPropertyName("authenticator_assurance_level")]
        public KratosAuthenticatorAssuranceLevel? AuthenticatorAssuranceLevel { get { return this.AuthenticatorAssuranceLevelOption; } set { this.AuthenticatorAssuranceLevelOption = new(value); } }

        /// <summary>
        /// Session ID
        /// </summary>
        /// <value>Session ID</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Active state. If false the session is no longer active.
        /// </summary>
        /// <value>Active state. If false the session is no longer active.</value>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthenticatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> AuthenticatedAtOption { get; private set; }

        /// <summary>
        /// The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
        /// </summary>
        /// <value>The Session Authentication Timestamp  When this session was authenticated at. If multi-factor authentication was used this is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).</value>
        [JsonPropertyName("authenticated_at")]
        public DateTime? AuthenticatedAt { get { return this.AuthenticatedAtOption; } set { this.AuthenticatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthenticationMethods
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosSessionAuthenticationMethod>?> AuthenticationMethodsOption { get; private set; }

        /// <summary>
        /// A list of authenticators which were used to authenticate the session.
        /// </summary>
        /// <value>A list of authenticators which were used to authenticate the session.</value>
        [JsonPropertyName("authentication_methods")]
        public List<KratosSessionAuthenticationMethod>? AuthenticationMethods { get { return this.AuthenticationMethodsOption; } set { this.AuthenticationMethodsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Devices
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosSessionDevice>?> DevicesOption { get; private set; }

        /// <summary>
        /// Devices has history of all endpoints where the session was used
        /// </summary>
        /// <value>Devices has history of all endpoints where the session was used</value>
        [JsonPropertyName("devices")]
        public List<KratosSessionDevice>? Devices { get { return this.DevicesOption; } set { this.DevicesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// The Session Expiry  When this session expires at.
        /// </summary>
        /// <value>The Session Expiry  When this session expires at.</value>
        [JsonPropertyName("expires_at")]
        public DateTime? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Identity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosIdentity?> IdentityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [JsonPropertyName("identity")]
        public KratosIdentity? Identity { get { return this.IdentityOption; } set { this.IdentityOption = new(value); } }

        /// <summary>
        /// Used to track the state of IssuedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> IssuedAtOption { get; private set; }

        /// <summary>
        /// The Session Issuance Timestamp  When this session was issued at. Usually equal or close to &#x60;authenticated_at&#x60;.
        /// </summary>
        /// <value>The Session Issuance Timestamp  When this session was issued at. Usually equal or close to &#x60;authenticated_at&#x60;.</value>
        [JsonPropertyName("issued_at")]
        public DateTime? IssuedAt { get { return this.IssuedAtOption; } set { this.IssuedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tokenized
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenizedOption { get; private set; }

        /// <summary>
        /// Tokenized is the tokenized (e.g. JWT) version of the session.  It is only set when the &#x60;tokenize&#x60; query parameter was set to a valid tokenize template during calls to &#x60;/session/whoami&#x60;.
        /// </summary>
        /// <value>Tokenized is the tokenized (e.g. JWT) version of the session.  It is only set when the &#x60;tokenize&#x60; query parameter was set to a valid tokenize template during calls to &#x60;/session/whoami&#x60;.</value>
        [JsonPropertyName("tokenized")]
        public string? Tokenized { get { return this.TokenizedOption; } set { this.TokenizedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosSession {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AuthenticatedAt: ").Append(AuthenticatedAt).Append("\n");
            sb.Append("  AuthenticationMethods: ").Append(AuthenticationMethods).Append("\n");
            sb.Append("  AuthenticatorAssuranceLevel: ").Append(AuthenticatorAssuranceLevel).Append("\n");
            sb.Append("  Devices: ").Append(Devices).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("  Tokenized: ").Append(Tokenized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosSession" />
    /// </summary>
    public class KratosSessionJsonConverter : JsonConverter<KratosSession>
    {
        /// <summary>
        /// The format to use to serialize AuthenticatedAt
        /// </summary>
        public static string AuthenticatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize IssuedAt
        /// </summary>
        public static string IssuedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosSession" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosSession Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<bool?> active = default;
            Option<DateTime?> authenticatedAt = default;
            Option<List<KratosSessionAuthenticationMethod>?> authenticationMethods = default;
            Option<KratosAuthenticatorAssuranceLevel?> authenticatorAssuranceLevel = default;
            Option<List<KratosSessionDevice>?> devices = default;
            Option<DateTime?> expiresAt = default;
            Option<KratosIdentity?> identity = default;
            Option<DateTime?> issuedAt = default;
            Option<string?> tokenized = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetGuid());
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "authenticated_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "authentication_methods":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                authenticationMethods = new Option<List<KratosSessionAuthenticationMethod>?>(JsonSerializer.Deserialize<List<KratosSessionAuthenticationMethod>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "authenticator_assurance_level":
                            string? authenticatorAssuranceLevelRawValue = utf8JsonReader.GetString();
                            if (authenticatorAssuranceLevelRawValue != null)
                                authenticatorAssuranceLevel = new Option<KratosAuthenticatorAssuranceLevel?>(KratosAuthenticatorAssuranceLevelValueConverter.FromStringOrDefault(authenticatorAssuranceLevelRawValue));
                            break;
                        case "devices":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                devices = new Option<List<KratosSessionDevice>?>(JsonSerializer.Deserialize<List<KratosSessionDevice>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "expires_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "identity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                identity = new Option<KratosIdentity?>(JsonSerializer.Deserialize<KratosIdentity>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "issued_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tokenized":
                            tokenized = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosSession.", nameof(id));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosSession.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class KratosSession.");

            if (authenticatedAt.IsSet && authenticatedAt.Value == null)
                throw new ArgumentNullException(nameof(authenticatedAt), "Property is not nullable for class KratosSession.");

            if (authenticationMethods.IsSet && authenticationMethods.Value == null)
                throw new ArgumentNullException(nameof(authenticationMethods), "Property is not nullable for class KratosSession.");

            if (authenticatorAssuranceLevel.IsSet && authenticatorAssuranceLevel.Value == null)
                throw new ArgumentNullException(nameof(authenticatorAssuranceLevel), "Property is not nullable for class KratosSession.");

            if (devices.IsSet && devices.Value == null)
                throw new ArgumentNullException(nameof(devices), "Property is not nullable for class KratosSession.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class KratosSession.");

            if (identity.IsSet && identity.Value == null)
                throw new ArgumentNullException(nameof(identity), "Property is not nullable for class KratosSession.");

            if (issuedAt.IsSet && issuedAt.Value == null)
                throw new ArgumentNullException(nameof(issuedAt), "Property is not nullable for class KratosSession.");

            if (tokenized.IsSet && tokenized.Value == null)
                throw new ArgumentNullException(nameof(tokenized), "Property is not nullable for class KratosSession.");

            return new KratosSession(id.Value!, active, authenticatedAt, authenticationMethods, authenticatorAssuranceLevel, devices, expiresAt, identity, issuedAt, tokenized);
        }

        /// <summary>
        /// Serializes a <see cref="KratosSession" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSession"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosSession kratosSession, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosSession, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosSession" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSession"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosSession kratosSession, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosSession.Id == null)
                throw new ArgumentNullException(nameof(kratosSession.Id), "Property is required for class KratosSession.");

            if (kratosSession.AuthenticationMethodsOption.IsSet && kratosSession.AuthenticationMethods == null)
                throw new ArgumentNullException(nameof(kratosSession.AuthenticationMethods), "Property is required for class KratosSession.");

            if (kratosSession.DevicesOption.IsSet && kratosSession.Devices == null)
                throw new ArgumentNullException(nameof(kratosSession.Devices), "Property is required for class KratosSession.");

            if (kratosSession.IdentityOption.IsSet && kratosSession.Identity == null)
                throw new ArgumentNullException(nameof(kratosSession.Identity), "Property is required for class KratosSession.");

            if (kratosSession.TokenizedOption.IsSet && kratosSession.Tokenized == null)
                throw new ArgumentNullException(nameof(kratosSession.Tokenized), "Property is required for class KratosSession.");

            writer.WriteString("id", kratosSession.Id);

            if (kratosSession.ActiveOption.IsSet)
                writer.WriteBoolean("active", kratosSession.ActiveOption.Value!.Value);

            if (kratosSession.AuthenticatedAtOption.IsSet)
                writer.WriteString("authenticated_at", kratosSession.AuthenticatedAtOption.Value!.Value.ToString(AuthenticatedAtFormat));

            if (kratosSession.AuthenticationMethodsOption.IsSet)
            {
                writer.WritePropertyName("authentication_methods");
                JsonSerializer.Serialize(writer, kratosSession.AuthenticationMethods, jsonSerializerOptions);
            }
            if (kratosSession.AuthenticatorAssuranceLevelOption.IsSet)
            {
                var authenticatorAssuranceLevelRawValue = KratosAuthenticatorAssuranceLevelValueConverter.ToJsonValue(kratosSession.AuthenticatorAssuranceLevel!.Value);
                writer.WriteString("authenticator_assurance_level", authenticatorAssuranceLevelRawValue);
            }
            if (kratosSession.DevicesOption.IsSet)
            {
                writer.WritePropertyName("devices");
                JsonSerializer.Serialize(writer, kratosSession.Devices, jsonSerializerOptions);
            }
            if (kratosSession.ExpiresAtOption.IsSet)
                writer.WriteString("expires_at", kratosSession.ExpiresAtOption.Value!.Value.ToString(ExpiresAtFormat));

            if (kratosSession.IdentityOption.IsSet)
            {
                writer.WritePropertyName("identity");
                JsonSerializer.Serialize(writer, kratosSession.Identity, jsonSerializerOptions);
            }
            if (kratosSession.IssuedAtOption.IsSet)
                writer.WriteString("issued_at", kratosSession.IssuedAtOption.Value!.Value.ToString(IssuedAtFormat));

            if (kratosSession.TokenizedOption.IsSet)
                writer.WriteString("tokenized", kratosSession.Tokenized);
        }
    }
}
