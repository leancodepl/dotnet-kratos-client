// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Credentials represents a specific credential type
    /// </summary>
    public partial class KratosIdentityCredentials
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityCredentials" /> class.
        /// </summary>
        /// <param name="config">config</param>
        /// <param name="createdAt">CreatedAt is a helper struct field for gobuffalo.pop.</param>
        /// <param name="identifiers">Identifiers represents a list of unique identifiers this credential type matches.</param>
        /// <param name="type">Type discriminates between different types of credentials. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode</param>
        /// <param name="updatedAt">UpdatedAt is a helper struct field for gobuffalo.pop.</param>
        /// <param name="varVersion">Version refers to the version of the credential. Useful when changing the config schema.</param>
        [JsonConstructor]
        public KratosIdentityCredentials(Option<Object?> config = default, Option<DateTime?> createdAt = default, Option<List<string>?> identifiers = default, Option<TypeEnum?> type = default, Option<DateTime?> updatedAt = default, Option<long?> varVersion = default)
        {
            ConfigOption = config;
            CreatedAtOption = createdAt;
            IdentifiersOption = identifiers;
            TypeOption = type;
            UpdatedAtOption = updatedAt;
            VarVersionOption = varVersion;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type discriminates between different types of credentials. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode
        /// </summary>
        /// <value>Type discriminates between different types of credentials. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            Password,

            /// <summary>
            /// Enum Oidc for value: oidc
            /// </summary>
            Oidc,

            /// <summary>
            /// Enum Totp for value: totp
            /// </summary>
            Totp,

            /// <summary>
            /// Enum LookupSecret for value: lookup_secret
            /// </summary>
            LookupSecret,

            /// <summary>
            /// Enum Webauthn for value: webauthn
            /// </summary>
            Webauthn,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            Code,

            /// <summary>
            /// Enum Passkey for value: passkey
            /// </summary>
            Passkey,

            /// <summary>
            /// Enum Profile for value: profile
            /// </summary>
            Profile,

            /// <summary>
            /// Enum LinkRecovery for value: link_recovery
            /// </summary>
            LinkRecovery,

            /// <summary>
            /// Enum CodeRecovery for value: code_recovery
            /// </summary>
            CodeRecovery
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("password"))
                return TypeEnum.Password;

            if (value.Equals("oidc"))
                return TypeEnum.Oidc;

            if (value.Equals("totp"))
                return TypeEnum.Totp;

            if (value.Equals("lookup_secret"))
                return TypeEnum.LookupSecret;

            if (value.Equals("webauthn"))
                return TypeEnum.Webauthn;

            if (value.Equals("code"))
                return TypeEnum.Code;

            if (value.Equals("passkey"))
                return TypeEnum.Passkey;

            if (value.Equals("profile"))
                return TypeEnum.Profile;

            if (value.Equals("link_recovery"))
                return TypeEnum.LinkRecovery;

            if (value.Equals("code_recovery"))
                return TypeEnum.CodeRecovery;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("password"))
                return TypeEnum.Password;

            if (value.Equals("oidc"))
                return TypeEnum.Oidc;

            if (value.Equals("totp"))
                return TypeEnum.Totp;

            if (value.Equals("lookup_secret"))
                return TypeEnum.LookupSecret;

            if (value.Equals("webauthn"))
                return TypeEnum.Webauthn;

            if (value.Equals("code"))
                return TypeEnum.Code;

            if (value.Equals("passkey"))
                return TypeEnum.Passkey;

            if (value.Equals("profile"))
                return TypeEnum.Profile;

            if (value.Equals("link_recovery"))
                return TypeEnum.LinkRecovery;

            if (value.Equals("code_recovery"))
                return TypeEnum.CodeRecovery;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == TypeEnum.Password)
                return "password";

            if (value == TypeEnum.Oidc)
                return "oidc";

            if (value == TypeEnum.Totp)
                return "totp";

            if (value == TypeEnum.LookupSecret)
                return "lookup_secret";

            if (value == TypeEnum.Webauthn)
                return "webauthn";

            if (value == TypeEnum.Code)
                return "code";

            if (value == TypeEnum.Passkey)
                return "passkey";

            if (value == TypeEnum.Profile)
                return "profile";

            if (value == TypeEnum.LinkRecovery)
                return "link_recovery";

            if (value == TypeEnum.CodeRecovery)
                return "code_recovery";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Type discriminates between different types of credentials. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode
        /// </summary>
        /// <value>Type discriminates between different types of credentials. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode</value>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Config
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ConfigOption { get; private set; }

        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [JsonPropertyName("config")]
        public Object? Config { get { return this.ConfigOption; } set { this.ConfigOption = new(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// CreatedAt is a helper struct field for gobuffalo.pop.
        /// </summary>
        /// <value>CreatedAt is a helper struct field for gobuffalo.pop.</value>
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Identifiers
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> IdentifiersOption { get; private set; }

        /// <summary>
        /// Identifiers represents a list of unique identifiers this credential type matches.
        /// </summary>
        /// <value>Identifiers represents a list of unique identifiers this credential type matches.</value>
        [JsonPropertyName("identifiers")]
        public List<string>? Identifiers { get { return this.IdentifiersOption; } set { this.IdentifiersOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// UpdatedAt is a helper struct field for gobuffalo.pop.
        /// </summary>
        /// <value>UpdatedAt is a helper struct field for gobuffalo.pop.</value>
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VarVersionOption { get; private set; }

        /// <summary>
        /// Version refers to the version of the credential. Useful when changing the config schema.
        /// </summary>
        /// <value>Version refers to the version of the credential. Useful when changing the config schema.</value>
        [JsonPropertyName("version")]
        public long? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityCredentials {\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityCredentials" />
    /// </summary>
    public class KratosIdentityCredentialsJsonConverter : JsonConverter<KratosIdentityCredentials>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityCredentials" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityCredentials Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Object?> config = default;
            Option<DateTime?> createdAt = default;
            Option<List<string>?> identifiers = default;
            Option<KratosIdentityCredentials.TypeEnum?> type = default;
            Option<DateTime?> updatedAt = default;
            Option<long?> varVersion = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "config":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                config = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "identifiers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                identifiers = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<KratosIdentityCredentials.TypeEnum?>(KratosIdentityCredentials.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "updated_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "version":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varVersion = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (config.IsSet && config.Value == null)
                throw new ArgumentNullException(nameof(config), "Property is not nullable for class KratosIdentityCredentials.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class KratosIdentityCredentials.");

            if (identifiers.IsSet && identifiers.Value == null)
                throw new ArgumentNullException(nameof(identifiers), "Property is not nullable for class KratosIdentityCredentials.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class KratosIdentityCredentials.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class KratosIdentityCredentials.");

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class KratosIdentityCredentials.");

            return new KratosIdentityCredentials(config, createdAt, identifiers, type, updatedAt, varVersion);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityCredentials" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentials"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityCredentials kratosIdentityCredentials, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityCredentials, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityCredentials" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentials"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityCredentials kratosIdentityCredentials, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityCredentials.ConfigOption.IsSet && kratosIdentityCredentials.Config == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentials.Config), "Property is required for class KratosIdentityCredentials.");

            if (kratosIdentityCredentials.IdentifiersOption.IsSet && kratosIdentityCredentials.Identifiers == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentials.Identifiers), "Property is required for class KratosIdentityCredentials.");

            if (kratosIdentityCredentials.ConfigOption.IsSet)
            {
                writer.WritePropertyName("config");
                JsonSerializer.Serialize(writer, kratosIdentityCredentials.Config, jsonSerializerOptions);
            }
            if (kratosIdentityCredentials.CreatedAtOption.IsSet)
                writer.WriteString("created_at", kratosIdentityCredentials.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (kratosIdentityCredentials.IdentifiersOption.IsSet)
            {
                writer.WritePropertyName("identifiers");
                JsonSerializer.Serialize(writer, kratosIdentityCredentials.Identifiers, jsonSerializerOptions);
            }
            var typeRawValue = KratosIdentityCredentials.TypeEnumToJsonValue(kratosIdentityCredentials.TypeOption.Value!.Value);
            writer.WriteString("type", typeRawValue);
            if (kratosIdentityCredentials.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", kratosIdentityCredentials.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (kratosIdentityCredentials.VarVersionOption.IsSet)
                writer.WriteNumber("version", kratosIdentityCredentials.VarVersionOption.Value!.Value);
        }
    }
}
