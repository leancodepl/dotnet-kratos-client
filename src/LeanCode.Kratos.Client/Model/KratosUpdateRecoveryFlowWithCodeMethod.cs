// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Recovery Flow with Code Method
    /// </summary>
    public partial class KratosUpdateRecoveryFlowWithCodeMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateRecoveryFlowWithCodeMethod" /> class.
        /// </summary>
        /// <param name="method">Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link RecoveryStrategyLink code RecoveryStrategyCode</param>
        /// <param name="code">Code from the recovery email  If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.</param>
        /// <param name="csrfToken">Sending the anti-csrf token is only required for browser login flows.</param>
        /// <param name="email">The email address of the account to recover  If the email belongs to a valid account, a recovery email will be sent.  If you want to notify the email address if the account does not exist, see the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/account-recovery-password-reset#attempted-recovery-notifications)  If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.  format: email</param>
        /// <param name="transientPayload">Transient data to pass along to any webhooks</param>
        [JsonConstructor]
        public KratosUpdateRecoveryFlowWithCodeMethod(MethodEnum method, Option<string?> code = default, Option<string?> csrfToken = default, Option<string?> email = default, Option<Object?> transientPayload = default)
        {
            Method = method;
            CodeOption = code;
            CsrfTokenOption = csrfToken;
            EmailOption = email;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link RecoveryStrategyLink code RecoveryStrategyCode
        /// </summary>
        /// <value>Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link RecoveryStrategyLink code RecoveryStrategyCode</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            Link,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            Code
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.Link)
                return "link";

            if (value == MethodEnum.Code)
                return "code";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link RecoveryStrategyLink code RecoveryStrategyCode
        /// </summary>
        /// <value>Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link RecoveryStrategyLink code RecoveryStrategyCode</value>
        [JsonPropertyName("method")]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Code from the recovery email  If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.
        /// </summary>
        /// <value>Code from the recovery email  If you want to submit a code, use this field, but make sure to _not_ include the email field, as well.</value>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// Sending the anti-csrf token is only required for browser login flows.
        /// </summary>
        /// <value>Sending the anti-csrf token is only required for browser login flows.</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The email address of the account to recover  If the email belongs to a valid account, a recovery email will be sent.  If you want to notify the email address if the account does not exist, see the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/account-recovery-password-reset#attempted-recovery-notifications)  If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.  format: email
        /// </summary>
        /// <value>The email address of the account to recover  If the email belongs to a valid account, a recovery email will be sent.  If you want to notify the email address if the account does not exist, see the [notify_unknown_recipients flag](https://www.ory.sh/docs/kratos/self-service/flows/account-recovery-password-reset#attempted-recovery-notifications)  If a code was already sent, including this field in the payload will invalidate the sent code and re-send a new code.  format: email</value>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// Transient data to pass along to any webhooks
        /// </summary>
        /// <value>Transient data to pass along to any webhooks</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateRecoveryFlowWithCodeMethod {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateRecoveryFlowWithCodeMethod" />
    /// </summary>
    public class KratosUpdateRecoveryFlowWithCodeMethodJsonConverter : JsonConverter<KratosUpdateRecoveryFlowWithCodeMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateRecoveryFlowWithCodeMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateRecoveryFlowWithCodeMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosUpdateRecoveryFlowWithCodeMethod.MethodEnum?> method = default;
            Option<string?> code = default;
            Option<string?> csrfToken = default;
            Option<string?> email = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<KratosUpdateRecoveryFlowWithCodeMethod.MethodEnum?>(KratosUpdateRecoveryFlowWithCodeMethod.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRecoveryFlowWithCodeMethod.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateRecoveryFlowWithCodeMethod.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class KratosUpdateRecoveryFlowWithCodeMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateRecoveryFlowWithCodeMethod.");

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class KratosUpdateRecoveryFlowWithCodeMethod.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosUpdateRecoveryFlowWithCodeMethod.");

            return new KratosUpdateRecoveryFlowWithCodeMethod(method.Value!.Value!, code, csrfToken, email, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateRecoveryFlowWithCodeMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRecoveryFlowWithCodeMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateRecoveryFlowWithCodeMethod kratosUpdateRecoveryFlowWithCodeMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateRecoveryFlowWithCodeMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateRecoveryFlowWithCodeMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRecoveryFlowWithCodeMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateRecoveryFlowWithCodeMethod kratosUpdateRecoveryFlowWithCodeMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateRecoveryFlowWithCodeMethod.CodeOption.IsSet && kratosUpdateRecoveryFlowWithCodeMethod.Code == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowWithCodeMethod.Code), "Property is required for class KratosUpdateRecoveryFlowWithCodeMethod.");

            if (kratosUpdateRecoveryFlowWithCodeMethod.CsrfTokenOption.IsSet && kratosUpdateRecoveryFlowWithCodeMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowWithCodeMethod.CsrfToken), "Property is required for class KratosUpdateRecoveryFlowWithCodeMethod.");

            if (kratosUpdateRecoveryFlowWithCodeMethod.EmailOption.IsSet && kratosUpdateRecoveryFlowWithCodeMethod.Email == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowWithCodeMethod.Email), "Property is required for class KratosUpdateRecoveryFlowWithCodeMethod.");

            if (kratosUpdateRecoveryFlowWithCodeMethod.TransientPayloadOption.IsSet && kratosUpdateRecoveryFlowWithCodeMethod.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowWithCodeMethod.TransientPayload), "Property is required for class KratosUpdateRecoveryFlowWithCodeMethod.");

            var methodRawValue = KratosUpdateRecoveryFlowWithCodeMethod.MethodEnumToJsonValue(kratosUpdateRecoveryFlowWithCodeMethod.Method);
            writer.WriteString("method", methodRawValue);
            if (kratosUpdateRecoveryFlowWithCodeMethod.CodeOption.IsSet)
                writer.WriteString("code", kratosUpdateRecoveryFlowWithCodeMethod.Code);

            if (kratosUpdateRecoveryFlowWithCodeMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateRecoveryFlowWithCodeMethod.CsrfToken);

            if (kratosUpdateRecoveryFlowWithCodeMethod.EmailOption.IsSet)
                writer.WriteString("email", kratosUpdateRecoveryFlowWithCodeMethod.Email);

            if (kratosUpdateRecoveryFlowWithCodeMethod.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosUpdateRecoveryFlowWithCodeMethod.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
