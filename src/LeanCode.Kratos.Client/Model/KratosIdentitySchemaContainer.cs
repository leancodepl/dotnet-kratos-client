// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// An Identity JSON Schema Container
    /// </summary>
    public partial class KratosIdentitySchemaContainer
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentitySchemaContainer" /> class.
        /// </summary>
        /// <param name="id">The ID of the Identity JSON Schema</param>
        /// <param name="schema">The actual Identity JSON Schema</param>
        [JsonConstructor]
        public KratosIdentitySchemaContainer(Option<string?> id = default, Option<Object?> schema = default)
        {
            IdOption = id;
            SchemaOption = schema;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The ID of the Identity JSON Schema
        /// </summary>
        /// <value>The ID of the Identity JSON Schema</value>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Schema
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> SchemaOption { get; private set; }

        /// <summary>
        /// The actual Identity JSON Schema
        /// </summary>
        /// <value>The actual Identity JSON Schema</value>
        [JsonPropertyName("schema")]
        public Object? Schema { get { return this.SchemaOption; } set { this.SchemaOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentitySchemaContainer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentitySchemaContainer" />
    /// </summary>
    public class KratosIdentitySchemaContainerJsonConverter : JsonConverter<KratosIdentitySchemaContainer>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentitySchemaContainer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentitySchemaContainer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<Object?> schema = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "schema":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                schema = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosIdentitySchemaContainer.");

            if (schema.IsSet && schema.Value == null)
                throw new ArgumentNullException(nameof(schema), "Property is not nullable for class KratosIdentitySchemaContainer.");

            return new KratosIdentitySchemaContainer(id, schema);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentitySchemaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentitySchemaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentitySchemaContainer kratosIdentitySchemaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentitySchemaContainer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentitySchemaContainer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentitySchemaContainer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentitySchemaContainer kratosIdentitySchemaContainer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentitySchemaContainer.IdOption.IsSet && kratosIdentitySchemaContainer.Id == null)
                throw new ArgumentNullException(nameof(kratosIdentitySchemaContainer.Id), "Property is required for class KratosIdentitySchemaContainer.");

            if (kratosIdentitySchemaContainer.SchemaOption.IsSet && kratosIdentitySchemaContainer.Schema == null)
                throw new ArgumentNullException(nameof(kratosIdentitySchemaContainer.Schema), "Property is required for class KratosIdentitySchemaContainer.");

            if (kratosIdentitySchemaContainer.IdOption.IsSet)
                writer.WriteString("id", kratosIdentitySchemaContainer.Id);

            if (kratosIdentitySchemaContainer.SchemaOption.IsSet)
            {
                writer.WritePropertyName("schema");
                JsonSerializer.Serialize(writer, kratosIdentitySchemaContainer.Schema, jsonSerializerOptions);
            }
        }
    }
}
