// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// The state represents the state of the verification flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.
    /// </summary>
    /// <value>The state represents the state of the verification flow.  choose_method: ask the user to choose a method (e.g. recover account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the recovery challenge was passed.</value>
    public enum KratosVerificationFlowState
    {
        /// <summary>
        /// Enum ChooseMethod for value: choose_method
        /// </summary>
        ChooseMethod,

        /// <summary>
        /// Enum SentEmail for value: sent_email
        /// </summary>
        SentEmail,

        /// <summary>
        /// Enum PassedChallenge for value: passed_challenge
        /// </summary>
        PassedChallenge
    }

    /// <summary>
    /// Converts <see cref="KratosVerificationFlowState"/> to and from the JSON value
    /// </summary>
    public static class KratosVerificationFlowStateValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="KratosVerificationFlowState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosVerificationFlowState FromString(string value)
        {
            if (value.Equals("choose_method"))
                return KratosVerificationFlowState.ChooseMethod;

            if (value.Equals("sent_email"))
                return KratosVerificationFlowState.SentEmail;

            if (value.Equals("passed_challenge"))
                return KratosVerificationFlowState.PassedChallenge;

            throw new NotImplementedException($"Could not convert value to type KratosVerificationFlowState: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="KratosVerificationFlowState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosVerificationFlowState? FromStringOrDefault(string value)
        {
            if (value.Equals("choose_method"))
                return KratosVerificationFlowState.ChooseMethod;

            if (value.Equals("sent_email"))
                return KratosVerificationFlowState.SentEmail;

            if (value.Equals("passed_challenge"))
                return KratosVerificationFlowState.PassedChallenge;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="KratosVerificationFlowState"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(KratosVerificationFlowState value)
        {
            if (value == KratosVerificationFlowState.ChooseMethod)
                return "choose_method";

            if (value == KratosVerificationFlowState.SentEmail)
                return "sent_email";

            if (value == KratosVerificationFlowState.PassedChallenge)
                return "passed_challenge";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosVerificationFlowState"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class KratosVerificationFlowStateJsonConverter : JsonConverter<KratosVerificationFlowState>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosVerificationFlowState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosVerificationFlowState? result = rawValue == null
                ? null
                : KratosVerificationFlowStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the KratosVerificationFlowState to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosVerificationFlowState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosVerificationFlowState kratosVerificationFlowState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosVerificationFlowState.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosVerificationFlowState"/>
    /// </summary>
    public class KratosVerificationFlowStateNullableJsonConverter : JsonConverter<KratosVerificationFlowState?>
    {
        /// <summary>
        /// Returns a KratosVerificationFlowState from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosVerificationFlowState? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosVerificationFlowState? result = rawValue == null
                ? null
                : KratosVerificationFlowStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosVerificationFlowState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosVerificationFlowState? kratosVerificationFlowState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosVerificationFlowState?.ToString() ?? "null");
        }
    }
}
