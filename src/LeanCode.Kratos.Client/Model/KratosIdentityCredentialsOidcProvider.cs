// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosIdentityCredentialsOidcProvider
    /// </summary>
    public partial class KratosIdentityCredentialsOidcProvider
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityCredentialsOidcProvider" /> class.
        /// </summary>
        /// <param name="initialAccessToken">initialAccessToken</param>
        /// <param name="initialIdToken">initialIdToken</param>
        /// <param name="initialRefreshToken">initialRefreshToken</param>
        /// <param name="organization">organization</param>
        /// <param name="provider">provider</param>
        /// <param name="subject">subject</param>
        [JsonConstructor]
        public KratosIdentityCredentialsOidcProvider(Option<string?> initialAccessToken = default, Option<string?> initialIdToken = default, Option<string?> initialRefreshToken = default, Option<string?> organization = default, Option<string?> provider = default, Option<string?> subject = default)
        {
            InitialAccessTokenOption = initialAccessToken;
            InitialIdTokenOption = initialIdToken;
            InitialRefreshTokenOption = initialRefreshToken;
            OrganizationOption = organization;
            ProviderOption = provider;
            SubjectOption = subject;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of InitialAccessToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InitialAccessTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets InitialAccessToken
        /// </summary>
        [JsonPropertyName("initial_access_token")]
        public string? InitialAccessToken { get { return this.InitialAccessTokenOption; } set { this.InitialAccessTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of InitialIdToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InitialIdTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets InitialIdToken
        /// </summary>
        [JsonPropertyName("initial_id_token")]
        public string? InitialIdToken { get { return this.InitialIdTokenOption; } set { this.InitialIdTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of InitialRefreshToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InitialRefreshTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets InitialRefreshToken
        /// </summary>
        [JsonPropertyName("initial_refresh_token")]
        public string? InitialRefreshToken { get { return this.InitialRefreshTokenOption; } set { this.InitialRefreshTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Provider
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ProviderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [JsonPropertyName("provider")]
        public string? Provider { get { return this.ProviderOption; } set { this.ProviderOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityCredentialsOidcProvider {\n");
            sb.Append("  InitialAccessToken: ").Append(InitialAccessToken).Append("\n");
            sb.Append("  InitialIdToken: ").Append(InitialIdToken).Append("\n");
            sb.Append("  InitialRefreshToken: ").Append(InitialRefreshToken).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityCredentialsOidcProvider" />
    /// </summary>
    public class KratosIdentityCredentialsOidcProviderJsonConverter : JsonConverter<KratosIdentityCredentialsOidcProvider>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityCredentialsOidcProvider" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityCredentialsOidcProvider Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> initialAccessToken = default;
            Option<string?> initialIdToken = default;
            Option<string?> initialRefreshToken = default;
            Option<string?> organization = default;
            Option<string?> provider = default;
            Option<string?> subject = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "initial_access_token":
                            initialAccessToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "initial_id_token":
                            initialIdToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "initial_refresh_token":
                            initialRefreshToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "provider":
                            provider = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (initialAccessToken.IsSet && initialAccessToken.Value == null)
                throw new ArgumentNullException(nameof(initialAccessToken), "Property is not nullable for class KratosIdentityCredentialsOidcProvider.");

            if (initialIdToken.IsSet && initialIdToken.Value == null)
                throw new ArgumentNullException(nameof(initialIdToken), "Property is not nullable for class KratosIdentityCredentialsOidcProvider.");

            if (initialRefreshToken.IsSet && initialRefreshToken.Value == null)
                throw new ArgumentNullException(nameof(initialRefreshToken), "Property is not nullable for class KratosIdentityCredentialsOidcProvider.");

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class KratosIdentityCredentialsOidcProvider.");

            if (provider.IsSet && provider.Value == null)
                throw new ArgumentNullException(nameof(provider), "Property is not nullable for class KratosIdentityCredentialsOidcProvider.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class KratosIdentityCredentialsOidcProvider.");

            return new KratosIdentityCredentialsOidcProvider(initialAccessToken, initialIdToken, initialRefreshToken, organization, provider, subject);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityCredentialsOidcProvider" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsOidcProvider"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityCredentialsOidcProvider kratosIdentityCredentialsOidcProvider, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityCredentialsOidcProvider, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityCredentialsOidcProvider" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsOidcProvider"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityCredentialsOidcProvider kratosIdentityCredentialsOidcProvider, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityCredentialsOidcProvider.InitialAccessTokenOption.IsSet && kratosIdentityCredentialsOidcProvider.InitialAccessToken == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsOidcProvider.InitialAccessToken), "Property is required for class KratosIdentityCredentialsOidcProvider.");

            if (kratosIdentityCredentialsOidcProvider.InitialIdTokenOption.IsSet && kratosIdentityCredentialsOidcProvider.InitialIdToken == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsOidcProvider.InitialIdToken), "Property is required for class KratosIdentityCredentialsOidcProvider.");

            if (kratosIdentityCredentialsOidcProvider.InitialRefreshTokenOption.IsSet && kratosIdentityCredentialsOidcProvider.InitialRefreshToken == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsOidcProvider.InitialRefreshToken), "Property is required for class KratosIdentityCredentialsOidcProvider.");

            if (kratosIdentityCredentialsOidcProvider.OrganizationOption.IsSet && kratosIdentityCredentialsOidcProvider.Organization == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsOidcProvider.Organization), "Property is required for class KratosIdentityCredentialsOidcProvider.");

            if (kratosIdentityCredentialsOidcProvider.ProviderOption.IsSet && kratosIdentityCredentialsOidcProvider.Provider == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsOidcProvider.Provider), "Property is required for class KratosIdentityCredentialsOidcProvider.");

            if (kratosIdentityCredentialsOidcProvider.SubjectOption.IsSet && kratosIdentityCredentialsOidcProvider.Subject == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsOidcProvider.Subject), "Property is required for class KratosIdentityCredentialsOidcProvider.");

            if (kratosIdentityCredentialsOidcProvider.InitialAccessTokenOption.IsSet)
                writer.WriteString("initial_access_token", kratosIdentityCredentialsOidcProvider.InitialAccessToken);

            if (kratosIdentityCredentialsOidcProvider.InitialIdTokenOption.IsSet)
                writer.WriteString("initial_id_token", kratosIdentityCredentialsOidcProvider.InitialIdToken);

            if (kratosIdentityCredentialsOidcProvider.InitialRefreshTokenOption.IsSet)
                writer.WriteString("initial_refresh_token", kratosIdentityCredentialsOidcProvider.InitialRefreshToken);

            if (kratosIdentityCredentialsOidcProvider.OrganizationOption.IsSet)
                writer.WriteString("organization", kratosIdentityCredentialsOidcProvider.Organization);

            if (kratosIdentityCredentialsOidcProvider.ProviderOption.IsSet)
                writer.WriteString("provider", kratosIdentityCredentialsOidcProvider.Provider);

            if (kratosIdentityCredentialsOidcProvider.SubjectOption.IsSet)
                writer.WriteString("subject", kratosIdentityCredentialsOidcProvider.Subject);
        }
    }
}
