// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Indicates, that the UI flow could be continued by showing a settings ui
    /// </summary>
    public partial class KratosContinueWithSettingsUi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithSettingsUi" /> class.
        /// </summary>
        /// <param name="action">Action will always be &#x60;show_settings_ui&#x60; show_settings_ui ContinueWithActionShowSettingsUIString</param>
        /// <param name="flow">flow</param>
        [JsonConstructor]
        public KratosContinueWithSettingsUi(ActionEnum action, KratosContinueWithSettingsUiFlow flow)
        {
            Action = action;
            Flow = flow;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Action will always be &#x60;show_settings_ui&#x60; show_settings_ui ContinueWithActionShowSettingsUIString
        /// </summary>
        /// <value>Action will always be &#x60;show_settings_ui&#x60; show_settings_ui ContinueWithActionShowSettingsUIString</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum ShowSettingsUi for value: show_settings_ui
            /// </summary>
            ShowSettingsUi
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("show_settings_ui"))
                return ActionEnum.ShowSettingsUi;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("show_settings_ui"))
                return ActionEnum.ShowSettingsUi;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.ShowSettingsUi)
                return "show_settings_ui";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Action will always be &#x60;show_settings_ui&#x60; show_settings_ui ContinueWithActionShowSettingsUIString
        /// </summary>
        /// <value>Action will always be &#x60;show_settings_ui&#x60; show_settings_ui ContinueWithActionShowSettingsUIString</value>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Gets or Sets Flow
        /// </summary>
        [JsonPropertyName("flow")]
        public KratosContinueWithSettingsUiFlow Flow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWithSettingsUi {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosContinueWithSettingsUi" />
    /// </summary>
    public class KratosContinueWithSettingsUiJsonConverter : JsonConverter<KratosContinueWithSettingsUi>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosContinueWithSettingsUi" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosContinueWithSettingsUi Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosContinueWithSettingsUi.ActionEnum?> action = default;
            Option<KratosContinueWithSettingsUiFlow?> flow = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<KratosContinueWithSettingsUi.ActionEnum?>(KratosContinueWithSettingsUi.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "flow":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                flow = new Option<KratosContinueWithSettingsUiFlow?>(JsonSerializer.Deserialize<KratosContinueWithSettingsUiFlow>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithSettingsUi.", nameof(action));

            if (!flow.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithSettingsUi.", nameof(flow));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class KratosContinueWithSettingsUi.");

            if (flow.IsSet && flow.Value == null)
                throw new ArgumentNullException(nameof(flow), "Property is not nullable for class KratosContinueWithSettingsUi.");

            return new KratosContinueWithSettingsUi(action.Value!.Value!, flow.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="KratosContinueWithSettingsUi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithSettingsUi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosContinueWithSettingsUi kratosContinueWithSettingsUi, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosContinueWithSettingsUi, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosContinueWithSettingsUi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithSettingsUi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosContinueWithSettingsUi kratosContinueWithSettingsUi, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosContinueWithSettingsUi.Flow == null)
                throw new ArgumentNullException(nameof(kratosContinueWithSettingsUi.Flow), "Property is required for class KratosContinueWithSettingsUi.");

            var actionRawValue = KratosContinueWithSettingsUi.ActionEnumToJsonValue(kratosContinueWithSettingsUi.Action);
            writer.WriteString("action", actionRawValue);
            writer.WritePropertyName("flow");
            JsonSerializer.Serialize(writer, kratosContinueWithSettingsUi.Flow, jsonSerializerOptions);
        }
    }
}
