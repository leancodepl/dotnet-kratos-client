// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosRegistrationFlow
    /// </summary>
    public partial class KratosRegistrationFlow
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosRegistrationFlow" /> class.
        /// </summary>
        /// <param name="expiresAt">ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.</param>
        /// <param name="id">ID represents the flow&#39;s unique ID. When performing the registration flow, this represents the id in the registration ui&#39;s query parameter: http://&lt;selfservice.flows.registration.ui_url&gt;/?flow&#x3D;&lt;id&gt;</param>
        /// <param name="issuedAt">IssuedAt is the time (UTC) when the flow occurred.</param>
        /// <param name="requestUrl">RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.</param>
        /// <param name="type">The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.</param>
        /// <param name="ui">ui</param>
        /// <param name="active">Active, if set, contains the registration method that is being used. It is initially not set. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode</param>
        /// <param name="oauth2LoginChallenge">Ory OAuth 2.0 Login Challenge.  This value is set using the &#x60;login_challenge&#x60; query parameter of the registration and login endpoints. If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.</param>
        /// <param name="oauth2LoginRequest">oauth2LoginRequest</param>
        /// <param name="organizationId">organizationId</param>
        /// <param name="returnTo">ReturnTo contains the requested return_to URL.</param>
        /// <param name="sessionTokenExchangeCode">SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the flow has been completed. This is only set if the client has requested a session token exchange code, and if the flow is of type \&quot;api\&quot;, and only on creating the flow.</param>
        /// <param name="state">State represents the state of this request:  choose_method: ask the user to choose a method (e.g. registration with email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the registration challenge was passed.</param>
        /// <param name="transientPayload">TransientPayload is used to pass data from the registration to a webhook</param>
        [JsonConstructor]
        public KratosRegistrationFlow(DateTime expiresAt, string id, DateTime issuedAt, string requestUrl, string type, KratosUiContainer ui, Option<ActiveEnum?> active = default, Option<string?> oauth2LoginChallenge = default, Option<KratosOAuth2LoginRequest?> oauth2LoginRequest = default, Option<string?> organizationId = default, Option<string?> returnTo = default, Option<string?> sessionTokenExchangeCode = default, Object? state = default, Option<Object?> transientPayload = default)
        {
            ExpiresAt = expiresAt;
            Id = id;
            IssuedAt = issuedAt;
            RequestUrl = requestUrl;
            Type = type;
            Ui = ui;
            ActiveOption = active;
            Oauth2LoginChallengeOption = oauth2LoginChallenge;
            Oauth2LoginRequestOption = oauth2LoginRequest;
            OrganizationIdOption = organizationId;
            ReturnToOption = returnTo;
            SessionTokenExchangeCodeOption = sessionTokenExchangeCode;
            State = state;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Active, if set, contains the registration method that is being used. It is initially not set. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode
        /// </summary>
        /// <value>Active, if set, contains the registration method that is being used. It is initially not set. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode</value>
        public enum ActiveEnum
        {
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            Password,

            /// <summary>
            /// Enum Oidc for value: oidc
            /// </summary>
            Oidc,

            /// <summary>
            /// Enum Totp for value: totp
            /// </summary>
            Totp,

            /// <summary>
            /// Enum LookupSecret for value: lookup_secret
            /// </summary>
            LookupSecret,

            /// <summary>
            /// Enum Webauthn for value: webauthn
            /// </summary>
            Webauthn,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            Code,

            /// <summary>
            /// Enum Passkey for value: passkey
            /// </summary>
            Passkey,

            /// <summary>
            /// Enum Profile for value: profile
            /// </summary>
            Profile,

            /// <summary>
            /// Enum LinkRecovery for value: link_recovery
            /// </summary>
            LinkRecovery,

            /// <summary>
            /// Enum CodeRecovery for value: code_recovery
            /// </summary>
            CodeRecovery
        }

        /// <summary>
        /// Returns a <see cref="ActiveEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActiveEnum ActiveEnumFromString(string value)
        {
            if (value.Equals("password"))
                return ActiveEnum.Password;

            if (value.Equals("oidc"))
                return ActiveEnum.Oidc;

            if (value.Equals("totp"))
                return ActiveEnum.Totp;

            if (value.Equals("lookup_secret"))
                return ActiveEnum.LookupSecret;

            if (value.Equals("webauthn"))
                return ActiveEnum.Webauthn;

            if (value.Equals("code"))
                return ActiveEnum.Code;

            if (value.Equals("passkey"))
                return ActiveEnum.Passkey;

            if (value.Equals("profile"))
                return ActiveEnum.Profile;

            if (value.Equals("link_recovery"))
                return ActiveEnum.LinkRecovery;

            if (value.Equals("code_recovery"))
                return ActiveEnum.CodeRecovery;

            throw new NotImplementedException($"Could not convert value to type ActiveEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActiveEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActiveEnum? ActiveEnumFromStringOrDefault(string value)
        {
            if (value.Equals("password"))
                return ActiveEnum.Password;

            if (value.Equals("oidc"))
                return ActiveEnum.Oidc;

            if (value.Equals("totp"))
                return ActiveEnum.Totp;

            if (value.Equals("lookup_secret"))
                return ActiveEnum.LookupSecret;

            if (value.Equals("webauthn"))
                return ActiveEnum.Webauthn;

            if (value.Equals("code"))
                return ActiveEnum.Code;

            if (value.Equals("passkey"))
                return ActiveEnum.Passkey;

            if (value.Equals("profile"))
                return ActiveEnum.Profile;

            if (value.Equals("link_recovery"))
                return ActiveEnum.LinkRecovery;

            if (value.Equals("code_recovery"))
                return ActiveEnum.CodeRecovery;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActiveEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActiveEnumToJsonValue(ActiveEnum? value)
        {
            if (value == ActiveEnum.Password)
                return "password";

            if (value == ActiveEnum.Oidc)
                return "oidc";

            if (value == ActiveEnum.Totp)
                return "totp";

            if (value == ActiveEnum.LookupSecret)
                return "lookup_secret";

            if (value == ActiveEnum.Webauthn)
                return "webauthn";

            if (value == ActiveEnum.Code)
                return "code";

            if (value == ActiveEnum.Passkey)
                return "passkey";

            if (value == ActiveEnum.Profile)
                return "profile";

            if (value == ActiveEnum.LinkRecovery)
                return "link_recovery";

            if (value == ActiveEnum.CodeRecovery)
                return "code_recovery";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ActiveEnum?> ActiveOption { get; private set; }

        /// <summary>
        /// Active, if set, contains the registration method that is being used. It is initially not set. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode
        /// </summary>
        /// <value>Active, if set, contains the registration method that is being used. It is initially not set. password CredentialsTypePassword oidc CredentialsTypeOIDC totp CredentialsTypeTOTP lookup_secret CredentialsTypeLookup webauthn CredentialsTypeWebAuthn code CredentialsTypeCodeAuth passkey CredentialsTypePasskey profile CredentialsTypeProfile link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself. code_recovery CredentialsTypeRecoveryCode</value>
        [JsonPropertyName("active")]
        public ActiveEnum? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.
        /// </summary>
        /// <value>ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.</value>
        [JsonPropertyName("expires_at")]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// ID represents the flow&#39;s unique ID. When performing the registration flow, this represents the id in the registration ui&#39;s query parameter: http://&lt;selfservice.flows.registration.ui_url&gt;/?flow&#x3D;&lt;id&gt;
        /// </summary>
        /// <value>ID represents the flow&#39;s unique ID. When performing the registration flow, this represents the id in the registration ui&#39;s query parameter: http://&lt;selfservice.flows.registration.ui_url&gt;/?flow&#x3D;&lt;id&gt;</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// IssuedAt is the time (UTC) when the flow occurred.
        /// </summary>
        /// <value>IssuedAt is the time (UTC) when the flow occurred.</value>
        [JsonPropertyName("issued_at")]
        public DateTime IssuedAt { get; set; }

        /// <summary>
        /// RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.
        /// </summary>
        /// <value>RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.</value>
        [JsonPropertyName("request_url")]
        public string RequestUrl { get; set; }

        /// <summary>
        /// The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.
        /// </summary>
        /// <value>The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.</value>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Ui
        /// </summary>
        [JsonPropertyName("ui")]
        public KratosUiContainer Ui { get; set; }

        /// <summary>
        /// Used to track the state of Oauth2LoginChallenge
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> Oauth2LoginChallengeOption { get; private set; }

        /// <summary>
        /// Ory OAuth 2.0 Login Challenge.  This value is set using the &#x60;login_challenge&#x60; query parameter of the registration and login endpoints. If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.
        /// </summary>
        /// <value>Ory OAuth 2.0 Login Challenge.  This value is set using the &#x60;login_challenge&#x60; query parameter of the registration and login endpoints. If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.</value>
        [JsonPropertyName("oauth2_login_challenge")]
        public string? Oauth2LoginChallenge { get { return this.Oauth2LoginChallengeOption; } set { this.Oauth2LoginChallengeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Oauth2LoginRequest
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosOAuth2LoginRequest?> Oauth2LoginRequestOption { get; private set; }

        /// <summary>
        /// Gets or Sets Oauth2LoginRequest
        /// </summary>
        [JsonPropertyName("oauth2_login_request")]
        public KratosOAuth2LoginRequest? Oauth2LoginRequest { get { return this.Oauth2LoginRequestOption; } set { this.Oauth2LoginRequestOption = new(value); } }

        /// <summary>
        /// Used to track the state of OrganizationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [JsonPropertyName("organization_id")]
        public string? OrganizationId { get { return this.OrganizationIdOption; } set { this.OrganizationIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReturnTo
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReturnToOption { get; private set; }

        /// <summary>
        /// ReturnTo contains the requested return_to URL.
        /// </summary>
        /// <value>ReturnTo contains the requested return_to URL.</value>
        [JsonPropertyName("return_to")]
        public string? ReturnTo { get { return this.ReturnToOption; } set { this.ReturnToOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionTokenExchangeCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionTokenExchangeCodeOption { get; private set; }

        /// <summary>
        /// SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the flow has been completed. This is only set if the client has requested a session token exchange code, and if the flow is of type \&quot;api\&quot;, and only on creating the flow.
        /// </summary>
        /// <value>SessionTokenExchangeCode holds the secret code that the client can use to retrieve a session token after the flow has been completed. This is only set if the client has requested a session token exchange code, and if the flow is of type \&quot;api\&quot;, and only on creating the flow.</value>
        [JsonPropertyName("session_token_exchange_code")]
        public string? SessionTokenExchangeCode { get { return this.SessionTokenExchangeCodeOption; } set { this.SessionTokenExchangeCodeOption = new(value); } }

        /// <summary>
        /// State represents the state of this request:  choose_method: ask the user to choose a method (e.g. registration with email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the registration challenge was passed.
        /// </summary>
        /// <value>State represents the state of this request:  choose_method: ask the user to choose a method (e.g. registration with email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the registration challenge was passed.</value>
        [JsonPropertyName("state")]
        public Object? State { get; set; }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// TransientPayload is used to pass data from the registration to a webhook
        /// </summary>
        /// <value>TransientPayload is used to pass data from the registration to a webhook</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosRegistrationFlow {\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("  RequestUrl: ").Append(RequestUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Ui: ").Append(Ui).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Oauth2LoginChallenge: ").Append(Oauth2LoginChallenge).Append("\n");
            sb.Append("  Oauth2LoginRequest: ").Append(Oauth2LoginRequest).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  SessionTokenExchangeCode: ").Append(SessionTokenExchangeCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosRegistrationFlow" />
    /// </summary>
    public class KratosRegistrationFlowJsonConverter : JsonConverter<KratosRegistrationFlow>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize IssuedAt
        /// </summary>
        public static string IssuedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosRegistrationFlow" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosRegistrationFlow Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> expiresAt = default;
            Option<string?> id = default;
            Option<DateTime?> issuedAt = default;
            Option<string?> requestUrl = default;
            Option<string?> type = default;
            Option<KratosUiContainer?> ui = default;
            Option<KratosRegistrationFlow.ActiveEnum?> active = default;
            Option<string?> oauth2LoginChallenge = default;
            Option<KratosOAuth2LoginRequest?> oauth2LoginRequest = default;
            Option<string?> organizationId = default;
            Option<string?> returnTo = default;
            Option<string?> sessionTokenExchangeCode = default;
            Option<Object?> state = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "expires_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetGuid());
                            break;
                        case "issued_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "request_url":
                            requestUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ui":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ui = new Option<KratosUiContainer?>(JsonSerializer.Deserialize<KratosUiContainer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "active":
                            string? activeRawValue = utf8JsonReader.GetString();
                            if (activeRawValue != null)
                                active = new Option<KratosRegistrationFlow.ActiveEnum?>(KratosRegistrationFlow.ActiveEnumFromStringOrDefault(activeRawValue));
                            break;
                        case "oauth2_login_challenge":
                            oauth2LoginChallenge = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "oauth2_login_request":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                oauth2LoginRequest = new Option<KratosOAuth2LoginRequest?>(JsonSerializer.Deserialize<KratosOAuth2LoginRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "organization_id":
                            organizationId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "return_to":
                            returnTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "session_token_exchange_code":
                            sessionTokenExchangeCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                state = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class KratosRegistrationFlow.", nameof(expiresAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosRegistrationFlow.", nameof(id));

            if (!issuedAt.IsSet)
                throw new ArgumentException("Property is required for class KratosRegistrationFlow.", nameof(issuedAt));

            if (!requestUrl.IsSet)
                throw new ArgumentException("Property is required for class KratosRegistrationFlow.", nameof(requestUrl));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class KratosRegistrationFlow.", nameof(type));

            if (!ui.IsSet)
                throw new ArgumentException("Property is required for class KratosRegistrationFlow.", nameof(ui));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class KratosRegistrationFlow.", nameof(state));

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class KratosRegistrationFlow.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosRegistrationFlow.");

            if (issuedAt.IsSet && issuedAt.Value == null)
                throw new ArgumentNullException(nameof(issuedAt), "Property is not nullable for class KratosRegistrationFlow.");

            if (requestUrl.IsSet && requestUrl.Value == null)
                throw new ArgumentNullException(nameof(requestUrl), "Property is not nullable for class KratosRegistrationFlow.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class KratosRegistrationFlow.");

            if (ui.IsSet && ui.Value == null)
                throw new ArgumentNullException(nameof(ui), "Property is not nullable for class KratosRegistrationFlow.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class KratosRegistrationFlow.");

            if (oauth2LoginChallenge.IsSet && oauth2LoginChallenge.Value == null)
                throw new ArgumentNullException(nameof(oauth2LoginChallenge), "Property is not nullable for class KratosRegistrationFlow.");

            if (oauth2LoginRequest.IsSet && oauth2LoginRequest.Value == null)
                throw new ArgumentNullException(nameof(oauth2LoginRequest), "Property is not nullable for class KratosRegistrationFlow.");

            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo), "Property is not nullable for class KratosRegistrationFlow.");

            if (sessionTokenExchangeCode.IsSet && sessionTokenExchangeCode.Value == null)
                throw new ArgumentNullException(nameof(sessionTokenExchangeCode), "Property is not nullable for class KratosRegistrationFlow.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosRegistrationFlow.");

            return new KratosRegistrationFlow(expiresAt.Value!.Value!, id.Value!, issuedAt.Value!.Value!, requestUrl.Value!, type.Value!, ui.Value!, active, oauth2LoginChallenge, oauth2LoginRequest, organizationId, returnTo, sessionTokenExchangeCode, state.Value!, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosRegistrationFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosRegistrationFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosRegistrationFlow kratosRegistrationFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosRegistrationFlow, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosRegistrationFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosRegistrationFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosRegistrationFlow kratosRegistrationFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosRegistrationFlow.Id == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.Id), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.RequestUrl == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.RequestUrl), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.Type == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.Type), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.Ui == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.Ui), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.Oauth2LoginChallengeOption.IsSet && kratosRegistrationFlow.Oauth2LoginChallenge == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.Oauth2LoginChallenge), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.Oauth2LoginRequestOption.IsSet && kratosRegistrationFlow.Oauth2LoginRequest == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.Oauth2LoginRequest), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.ReturnToOption.IsSet && kratosRegistrationFlow.ReturnTo == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.ReturnTo), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.SessionTokenExchangeCodeOption.IsSet && kratosRegistrationFlow.SessionTokenExchangeCode == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.SessionTokenExchangeCode), "Property is required for class KratosRegistrationFlow.");

            if (kratosRegistrationFlow.TransientPayloadOption.IsSet && kratosRegistrationFlow.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosRegistrationFlow.TransientPayload), "Property is required for class KratosRegistrationFlow.");

            writer.WriteString("expires_at", kratosRegistrationFlow.ExpiresAt.ToString(ExpiresAtFormat));

            writer.WriteString("id", kratosRegistrationFlow.Id);

            writer.WriteString("issued_at", kratosRegistrationFlow.IssuedAt.ToString(IssuedAtFormat));

            writer.WriteString("request_url", kratosRegistrationFlow.RequestUrl);

            writer.WriteString("type", kratosRegistrationFlow.Type);

            writer.WritePropertyName("ui");
            JsonSerializer.Serialize(writer, kratosRegistrationFlow.Ui, jsonSerializerOptions);
            var activeRawValue = KratosRegistrationFlow.ActiveEnumToJsonValue(kratosRegistrationFlow.ActiveOption.Value!.Value);
            writer.WriteString("active", activeRawValue);
            if (kratosRegistrationFlow.Oauth2LoginChallengeOption.IsSet)
                writer.WriteString("oauth2_login_challenge", kratosRegistrationFlow.Oauth2LoginChallenge);

            if (kratosRegistrationFlow.Oauth2LoginRequestOption.IsSet)
            {
                writer.WritePropertyName("oauth2_login_request");
                JsonSerializer.Serialize(writer, kratosRegistrationFlow.Oauth2LoginRequest, jsonSerializerOptions);
            }
            if (kratosRegistrationFlow.OrganizationIdOption.IsSet)
                if (kratosRegistrationFlow.OrganizationIdOption.Value != null)
                    writer.WriteString("organization_id", kratosRegistrationFlow.OrganizationId);
                else
                    writer.WriteNull("organization_id");

            if (kratosRegistrationFlow.ReturnToOption.IsSet)
                writer.WriteString("return_to", kratosRegistrationFlow.ReturnTo);

            if (kratosRegistrationFlow.SessionTokenExchangeCodeOption.IsSet)
                writer.WriteString("session_token_exchange_code", kratosRegistrationFlow.SessionTokenExchangeCode);

            if (kratosRegistrationFlow.State != null)
            {
                writer.WritePropertyName("state");
                JsonSerializer.Serialize(writer, kratosRegistrationFlow.State, jsonSerializerOptions);
            }
            else
                writer.WriteNull("state");
            if (kratosRegistrationFlow.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosRegistrationFlow.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
