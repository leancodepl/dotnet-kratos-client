// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// VerifiableAddress is an identity&#39;s verifiable address
    /// </summary>
    public partial class KratosVerifiableIdentityAddress
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosVerifiableIdentityAddress" /> class.
        /// </summary>
        /// <param name="status">VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema</param>
        /// <param name="value">The address value  example foo@user.com</param>
        /// <param name="verified">Indicates if the address has already been verified</param>
        /// <param name="via">The delivery method</param>
        /// <param name="createdAt">When this entry was created</param>
        /// <param name="id">The ID</param>
        /// <param name="updatedAt">When this entry was last updated</param>
        /// <param name="verifiedAt">verifiedAt</param>
        [JsonConstructor]
        public KratosVerifiableIdentityAddress(string status, string value, bool verified, ViaEnum via, Option<DateTime?> createdAt = default, Option<string?> id = default, Option<DateTime?> updatedAt = default, Option<DateTime?> verifiedAt = default)
        {
            Status = status;
            Value = value;
            Verified = verified;
            Via = via;
            CreatedAtOption = createdAt;
            IdOption = id;
            UpdatedAtOption = updatedAt;
            VerifiedAtOption = verifiedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The delivery method
        /// </summary>
        /// <value>The delivery method</value>
        public enum ViaEnum
        {
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            Email,

            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            Sms
        }

        /// <summary>
        /// Returns a <see cref="ViaEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ViaEnum ViaEnumFromString(string value)
        {
            if (value.Equals("email"))
                return ViaEnum.Email;

            if (value.Equals("sms"))
                return ViaEnum.Sms;

            throw new NotImplementedException($"Could not convert value to type ViaEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ViaEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ViaEnum? ViaEnumFromStringOrDefault(string value)
        {
            if (value.Equals("email"))
                return ViaEnum.Email;

            if (value.Equals("sms"))
                return ViaEnum.Sms;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ViaEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ViaEnumToJsonValue(ViaEnum value)
        {
            if (value == ViaEnum.Email)
                return "email";

            if (value == ViaEnum.Sms)
                return "sms";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// The delivery method
        /// </summary>
        /// <value>The delivery method</value>
        /// <example>email</example>
        [JsonPropertyName("via")]
        public ViaEnum Via { get; set; }

        /// <summary>
        /// VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
        /// </summary>
        /// <value>VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema</value>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// The address value  example foo@user.com
        /// </summary>
        /// <value>The address value  example foo@user.com</value>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Indicates if the address has already been verified
        /// </summary>
        /// <value>Indicates if the address has already been verified</value>
        /// <example>true</example>
        [JsonPropertyName("verified")]
        public bool Verified { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> CreatedAtOption { get; private set; }

        /// <summary>
        /// When this entry was created
        /// </summary>
        /// <value>When this entry was created</value>
        /// <example>2014-01-01T23:28:56.782Z</example>
        [JsonPropertyName("created_at")]
        public DateTime? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The ID
        /// </summary>
        /// <value>The ID</value>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// When this entry was last updated
        /// </summary>
        /// <value>When this entry was last updated</value>
        /// <example>2014-01-01T23:28:56.782Z</example>
        [JsonPropertyName("updated_at")]
        public DateTime? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of VerifiedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> VerifiedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets VerifiedAt
        /// </summary>
        [JsonPropertyName("verified_at")]
        public DateTime? VerifiedAt { get { return this.VerifiedAtOption; } set { this.VerifiedAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosVerifiableIdentityAddress {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("  Via: ").Append(Via).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  VerifiedAt: ").Append(VerifiedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosVerifiableIdentityAddress" />
    /// </summary>
    public class KratosVerifiableIdentityAddressJsonConverter : JsonConverter<KratosVerifiableIdentityAddress>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize VerifiedAt
        /// </summary>
        public static string VerifiedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosVerifiableIdentityAddress" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosVerifiableIdentityAddress Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> status = default;
            Option<string?> value = default;
            Option<bool?> verified = default;
            Option<KratosVerifiableIdentityAddress.ViaEnum?> via = default;
            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<DateTime?> updatedAt = default;
            Option<DateTime?> verifiedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "verified":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                verified = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "via":
                            string? viaRawValue = utf8JsonReader.GetString();
                            if (viaRawValue != null)
                                via = new Option<KratosVerifiableIdentityAddress.ViaEnum?>(KratosVerifiableIdentityAddress.ViaEnumFromStringOrDefault(viaRawValue));
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetGuid());
                            break;
                        case "updated_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "verified_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                verifiedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class KratosVerifiableIdentityAddress.", nameof(status));

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class KratosVerifiableIdentityAddress.", nameof(value));

            if (!verified.IsSet)
                throw new ArgumentException("Property is required for class KratosVerifiableIdentityAddress.", nameof(verified));

            if (!via.IsSet)
                throw new ArgumentException("Property is required for class KratosVerifiableIdentityAddress.", nameof(via));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            if (verified.IsSet && verified.Value == null)
                throw new ArgumentNullException(nameof(verified), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            if (via.IsSet && via.Value == null)
                throw new ArgumentNullException(nameof(via), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            if (verifiedAt.IsSet && verifiedAt.Value == null)
                throw new ArgumentNullException(nameof(verifiedAt), "Property is not nullable for class KratosVerifiableIdentityAddress.");

            return new KratosVerifiableIdentityAddress(status.Value!, value.Value!, verified.Value!.Value!, via.Value!.Value!, createdAt, id, updatedAt, verifiedAt);
        }

        /// <summary>
        /// Serializes a <see cref="KratosVerifiableIdentityAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosVerifiableIdentityAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosVerifiableIdentityAddress kratosVerifiableIdentityAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosVerifiableIdentityAddress, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosVerifiableIdentityAddress" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosVerifiableIdentityAddress"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosVerifiableIdentityAddress kratosVerifiableIdentityAddress, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosVerifiableIdentityAddress.Status == null)
                throw new ArgumentNullException(nameof(kratosVerifiableIdentityAddress.Status), "Property is required for class KratosVerifiableIdentityAddress.");

            if (kratosVerifiableIdentityAddress.Value == null)
                throw new ArgumentNullException(nameof(kratosVerifiableIdentityAddress.Value), "Property is required for class KratosVerifiableIdentityAddress.");

            if (kratosVerifiableIdentityAddress.IdOption.IsSet && kratosVerifiableIdentityAddress.Id == null)
                throw new ArgumentNullException(nameof(kratosVerifiableIdentityAddress.Id), "Property is required for class KratosVerifiableIdentityAddress.");

            writer.WriteString("status", kratosVerifiableIdentityAddress.Status);

            writer.WriteString("value", kratosVerifiableIdentityAddress.Value);

            writer.WriteBoolean("verified", kratosVerifiableIdentityAddress.Verified);

            var viaRawValue = KratosVerifiableIdentityAddress.ViaEnumToJsonValue(kratosVerifiableIdentityAddress.Via);
            writer.WriteString("via", viaRawValue);
            if (kratosVerifiableIdentityAddress.CreatedAtOption.IsSet)
                writer.WriteString("created_at", kratosVerifiableIdentityAddress.CreatedAtOption.Value!.Value.ToString(CreatedAtFormat));

            if (kratosVerifiableIdentityAddress.IdOption.IsSet)
                writer.WriteString("id", kratosVerifiableIdentityAddress.IdOption.Value);

            if (kratosVerifiableIdentityAddress.UpdatedAtOption.IsSet)
                writer.WriteString("updated_at", kratosVerifiableIdentityAddress.UpdatedAtOption.Value!.Value.ToString(UpdatedAtFormat));

            if (kratosVerifiableIdentityAddress.VerifiedAtOption.IsSet)
                writer.WriteString("verified_at", kratosVerifiableIdentityAddress.VerifiedAtOption.Value!.Value.ToString(VerifiedAtFormat));
        }
    }
}
