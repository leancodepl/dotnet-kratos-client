// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Settings Flow with WebAuthn Method
    /// </summary>
    public partial class KratosUpdateSettingsFlowWithWebAuthnMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateSettingsFlowWithWebAuthnMethod" /> class.
        /// </summary>
        /// <param name="method">Method  Should be set to \&quot;webauthn\&quot; when trying to add, update, or remove a webAuthn pairing.</param>
        /// <param name="csrfToken">CSRFToken is the anti-CSRF token</param>
        /// <param name="transientPayload">Transient data to pass along to any webhooks</param>
        /// <param name="webauthnRegister">Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.</param>
        /// <param name="webauthnRegisterDisplayname">Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.</param>
        /// <param name="webauthnRemove">Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.</param>
        [JsonConstructor]
        public KratosUpdateSettingsFlowWithWebAuthnMethod(string method, Option<string?> csrfToken = default, Option<Object?> transientPayload = default, Option<string?> webauthnRegister = default, Option<string?> webauthnRegisterDisplayname = default, Option<string?> webauthnRemove = default)
        {
            Method = method;
            CsrfTokenOption = csrfToken;
            TransientPayloadOption = transientPayload;
            WebauthnRegisterOption = webauthnRegister;
            WebauthnRegisterDisplaynameOption = webauthnRegisterDisplayname;
            WebauthnRemoveOption = webauthnRemove;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method  Should be set to \&quot;webauthn\&quot; when trying to add, update, or remove a webAuthn pairing.
        /// </summary>
        /// <value>Method  Should be set to \&quot;webauthn\&quot; when trying to add, update, or remove a webAuthn pairing.</value>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// CSRFToken is the anti-CSRF token
        /// </summary>
        /// <value>CSRFToken is the anti-CSRF token</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// Transient data to pass along to any webhooks
        /// </summary>
        /// <value>Transient data to pass along to any webhooks</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebauthnRegister
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebauthnRegisterOption { get; private set; }

        /// <summary>
        /// Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
        /// </summary>
        /// <value>Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.</value>
        [JsonPropertyName("webauthn_register")]
        public string? WebauthnRegister { get { return this.WebauthnRegisterOption; } set { this.WebauthnRegisterOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebauthnRegisterDisplayname
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebauthnRegisterDisplaynameOption { get; private set; }

        /// <summary>
        /// Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.
        /// </summary>
        /// <value>Name of the WebAuthn Security Key to be Added  A human-readable name for the security key which will be added.</value>
        [JsonPropertyName("webauthn_register_displayname")]
        public string? WebauthnRegisterDisplayname { get { return this.WebauthnRegisterDisplaynameOption; } set { this.WebauthnRegisterDisplaynameOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebauthnRemove
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebauthnRemoveOption { get; private set; }

        /// <summary>
        /// Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
        /// </summary>
        /// <value>Remove a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.</value>
        [JsonPropertyName("webauthn_remove")]
        public string? WebauthnRemove { get { return this.WebauthnRemoveOption; } set { this.WebauthnRemoveOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateSettingsFlowWithWebAuthnMethod {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("  WebauthnRegister: ").Append(WebauthnRegister).Append("\n");
            sb.Append("  WebauthnRegisterDisplayname: ").Append(WebauthnRegisterDisplayname).Append("\n");
            sb.Append("  WebauthnRemove: ").Append(WebauthnRemove).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateSettingsFlowWithWebAuthnMethod" />
    /// </summary>
    public class KratosUpdateSettingsFlowWithWebAuthnMethodJsonConverter : JsonConverter<KratosUpdateSettingsFlowWithWebAuthnMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateSettingsFlowWithWebAuthnMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateSettingsFlowWithWebAuthnMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> method = default;
            Option<string?> csrfToken = default;
            Option<Object?> transientPayload = default;
            Option<string?> webauthnRegister = default;
            Option<string?> webauthnRegisterDisplayname = default;
            Option<string?> webauthnRemove = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "webauthn_register":
                            webauthnRegister = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "webauthn_register_displayname":
                            webauthnRegisterDisplayname = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "webauthn_remove":
                            webauthnRemove = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateSettingsFlowWithWebAuthnMethod.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (webauthnRegister.IsSet && webauthnRegister.Value == null)
                throw new ArgumentNullException(nameof(webauthnRegister), "Property is not nullable for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (webauthnRegisterDisplayname.IsSet && webauthnRegisterDisplayname.Value == null)
                throw new ArgumentNullException(nameof(webauthnRegisterDisplayname), "Property is not nullable for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (webauthnRemove.IsSet && webauthnRemove.Value == null)
                throw new ArgumentNullException(nameof(webauthnRemove), "Property is not nullable for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            return new KratosUpdateSettingsFlowWithWebAuthnMethod(method.Value!, csrfToken, transientPayload, webauthnRegister, webauthnRegisterDisplayname, webauthnRemove);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateSettingsFlowWithWebAuthnMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateSettingsFlowWithWebAuthnMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateSettingsFlowWithWebAuthnMethod kratosUpdateSettingsFlowWithWebAuthnMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateSettingsFlowWithWebAuthnMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateSettingsFlowWithWebAuthnMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateSettingsFlowWithWebAuthnMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateSettingsFlowWithWebAuthnMethod kratosUpdateSettingsFlowWithWebAuthnMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateSettingsFlowWithWebAuthnMethod.Method == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithWebAuthnMethod.Method), "Property is required for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.CsrfTokenOption.IsSet && kratosUpdateSettingsFlowWithWebAuthnMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithWebAuthnMethod.CsrfToken), "Property is required for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.TransientPayloadOption.IsSet && kratosUpdateSettingsFlowWithWebAuthnMethod.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithWebAuthnMethod.TransientPayload), "Property is required for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegisterOption.IsSet && kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegister == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegister), "Property is required for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegisterDisplaynameOption.IsSet && kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegisterDisplayname == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegisterDisplayname), "Property is required for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRemoveOption.IsSet && kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRemove == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRemove), "Property is required for class KratosUpdateSettingsFlowWithWebAuthnMethod.");

            writer.WriteString("method", kratosUpdateSettingsFlowWithWebAuthnMethod.Method);

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateSettingsFlowWithWebAuthnMethod.CsrfToken);

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosUpdateSettingsFlowWithWebAuthnMethod.TransientPayload, jsonSerializerOptions);
            }
            if (kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegisterOption.IsSet)
                writer.WriteString("webauthn_register", kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegister);

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegisterDisplaynameOption.IsSet)
                writer.WriteString("webauthn_register_displayname", kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRegisterDisplayname);

            if (kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRemoveOption.IsSet)
                writer.WriteString("webauthn_remove", kratosUpdateSettingsFlowWithWebAuthnMethod.WebauthnRemove);
        }
    }
}
