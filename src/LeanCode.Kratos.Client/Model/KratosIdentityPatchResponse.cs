// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Response for a single identity patch
    /// </summary>
    public partial class KratosIdentityPatchResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityPatchResponse" /> class.
        /// </summary>
        /// <param name="action">The action for this specific patch create ActionCreate  Create this identity.</param>
        /// <param name="identity">The identity ID payload of this patch</param>
        /// <param name="patchId">The ID of this patch response, if an ID was specified in the patch.</param>
        [JsonConstructor]
        public KratosIdentityPatchResponse(Option<ActionEnum?> action = default, Option<string?> identity = default, Option<string?> patchId = default)
        {
            ActionOption = action;
            IdentityOption = identity;
            PatchIdOption = patchId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The action for this specific patch create ActionCreate  Create this identity.
        /// </summary>
        /// <value>The action for this specific patch create ActionCreate  Create this identity.</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum Create for value: create
            /// </summary>
            Create
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("create"))
                return ActionEnum.Create;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("create"))
                return ActionEnum.Create;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum? value)
        {
            if (value == ActionEnum.Create)
                return "create";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Action
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ActionEnum?> ActionOption { get; private set; }

        /// <summary>
        /// The action for this specific patch create ActionCreate  Create this identity.
        /// </summary>
        /// <value>The action for this specific patch create ActionCreate  Create this identity.</value>
        [JsonPropertyName("action")]
        public ActionEnum? Action { get { return this.ActionOption; } set { this.ActionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Identity
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdentityOption { get; private set; }

        /// <summary>
        /// The identity ID payload of this patch
        /// </summary>
        /// <value>The identity ID payload of this patch</value>
        [JsonPropertyName("identity")]
        public string? Identity { get { return this.IdentityOption; } set { this.IdentityOption = new(value); } }

        /// <summary>
        /// Used to track the state of PatchId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PatchIdOption { get; private set; }

        /// <summary>
        /// The ID of this patch response, if an ID was specified in the patch.
        /// </summary>
        /// <value>The ID of this patch response, if an ID was specified in the patch.</value>
        [JsonPropertyName("patch_id")]
        public string? PatchId { get { return this.PatchIdOption; } set { this.PatchIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityPatchResponse {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  PatchId: ").Append(PatchId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityPatchResponse" />
    /// </summary>
    public class KratosIdentityPatchResponseJsonConverter : JsonConverter<KratosIdentityPatchResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityPatchResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityPatchResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosIdentityPatchResponse.ActionEnum?> action = default;
            Option<string?> identity = default;
            Option<string?> patchId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<KratosIdentityPatchResponse.ActionEnum?>(KratosIdentityPatchResponse.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "identity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                identity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "patch_id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                patchId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class KratosIdentityPatchResponse.");

            if (identity.IsSet && identity.Value == null)
                throw new ArgumentNullException(nameof(identity), "Property is not nullable for class KratosIdentityPatchResponse.");

            if (patchId.IsSet && patchId.Value == null)
                throw new ArgumentNullException(nameof(patchId), "Property is not nullable for class KratosIdentityPatchResponse.");

            return new KratosIdentityPatchResponse(action, identity, patchId);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityPatchResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityPatchResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityPatchResponse kratosIdentityPatchResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityPatchResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityPatchResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityPatchResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityPatchResponse kratosIdentityPatchResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityPatchResponse.IdentityOption.IsSet && kratosIdentityPatchResponse.Identity == null)
                throw new ArgumentNullException(nameof(kratosIdentityPatchResponse.Identity), "Property is required for class KratosIdentityPatchResponse.");

            if (kratosIdentityPatchResponse.PatchIdOption.IsSet && kratosIdentityPatchResponse.PatchId == null)
                throw new ArgumentNullException(nameof(kratosIdentityPatchResponse.PatchId), "Property is required for class KratosIdentityPatchResponse.");

            var actionRawValue = KratosIdentityPatchResponse.ActionEnumToJsonValue(kratosIdentityPatchResponse.ActionOption.Value!.Value);
            writer.WriteString("action", actionRawValue);
            if (kratosIdentityPatchResponse.IdentityOption.IsSet)
                writer.WriteString("identity", kratosIdentityPatchResponse.IdentityOption.Value);

            if (kratosIdentityPatchResponse.PatchIdOption.IsSet)
                writer.WriteString("patch_id", kratosIdentityPatchResponse.PatchIdOption.Value);
        }
    }
}
