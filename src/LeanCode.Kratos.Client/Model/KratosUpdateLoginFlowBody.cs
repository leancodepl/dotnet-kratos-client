// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosUpdateLoginFlowBody
    /// </summary>
    public partial class KratosUpdateLoginFlowBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateLoginFlowWithPasswordMethod"></param>
        public KratosUpdateLoginFlowBody(KratosUpdateLoginFlowWithPasswordMethod kratosUpdateLoginFlowWithPasswordMethod)
        {
            KratosUpdateLoginFlowWithPasswordMethod = kratosUpdateLoginFlowWithPasswordMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateLoginFlowWithOidcMethod"></param>
        public KratosUpdateLoginFlowBody(KratosUpdateLoginFlowWithOidcMethod kratosUpdateLoginFlowWithOidcMethod)
        {
            KratosUpdateLoginFlowWithOidcMethod = kratosUpdateLoginFlowWithOidcMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateLoginFlowWithTotpMethod"></param>
        public KratosUpdateLoginFlowBody(KratosUpdateLoginFlowWithTotpMethod kratosUpdateLoginFlowWithTotpMethod)
        {
            KratosUpdateLoginFlowWithTotpMethod = kratosUpdateLoginFlowWithTotpMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateLoginFlowWithWebAuthnMethod"></param>
        public KratosUpdateLoginFlowBody(KratosUpdateLoginFlowWithWebAuthnMethod kratosUpdateLoginFlowWithWebAuthnMethod)
        {
            KratosUpdateLoginFlowWithWebAuthnMethod = kratosUpdateLoginFlowWithWebAuthnMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateLoginFlowWithLookupSecretMethod"></param>
        public KratosUpdateLoginFlowBody(KratosUpdateLoginFlowWithLookupSecretMethod kratosUpdateLoginFlowWithLookupSecretMethod)
        {
            KratosUpdateLoginFlowWithLookupSecretMethod = kratosUpdateLoginFlowWithLookupSecretMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateLoginFlowWithCodeMethod"></param>
        public KratosUpdateLoginFlowBody(KratosUpdateLoginFlowWithCodeMethod kratosUpdateLoginFlowWithCodeMethod)
        {
            KratosUpdateLoginFlowWithCodeMethod = kratosUpdateLoginFlowWithCodeMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateLoginFlowWithPasskeyMethod"></param>
        public KratosUpdateLoginFlowBody(KratosUpdateLoginFlowWithPasskeyMethod kratosUpdateLoginFlowWithPasskeyMethod)
        {
            KratosUpdateLoginFlowWithPasskeyMethod = kratosUpdateLoginFlowWithPasskeyMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets KratosUpdateLoginFlowWithPasswordMethod
        /// </summary>
        public KratosUpdateLoginFlowWithPasswordMethod? KratosUpdateLoginFlowWithPasswordMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateLoginFlowWithOidcMethod
        /// </summary>
        public KratosUpdateLoginFlowWithOidcMethod? KratosUpdateLoginFlowWithOidcMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateLoginFlowWithTotpMethod
        /// </summary>
        public KratosUpdateLoginFlowWithTotpMethod? KratosUpdateLoginFlowWithTotpMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateLoginFlowWithWebAuthnMethod
        /// </summary>
        public KratosUpdateLoginFlowWithWebAuthnMethod? KratosUpdateLoginFlowWithWebAuthnMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateLoginFlowWithLookupSecretMethod
        /// </summary>
        public KratosUpdateLoginFlowWithLookupSecretMethod? KratosUpdateLoginFlowWithLookupSecretMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateLoginFlowWithCodeMethod
        /// </summary>
        public KratosUpdateLoginFlowWithCodeMethod? KratosUpdateLoginFlowWithCodeMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateLoginFlowWithPasskeyMethod
        /// </summary>
        public KratosUpdateLoginFlowWithPasskeyMethod? KratosUpdateLoginFlowWithPasskeyMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateLoginFlowBody {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateLoginFlowBody" />
    /// </summary>
    public class KratosUpdateLoginFlowBodyJsonConverter : JsonConverter<KratosUpdateLoginFlowBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateLoginFlowBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateLoginFlowBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> method = default;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("method") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("code") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("lookup_secret") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("oidc") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("passkey") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("password") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("totp") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("webauthn") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateLoginFlowWithCodeMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateLoginFlowWithLookupSecretMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateLoginFlowWithOidcMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateLoginFlowWithPasskeyMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateLoginFlowWithPasswordMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateLoginFlowWithTotpMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateLoginFlowWithWebAuthnMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateLoginFlowBody.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateLoginFlowBody.");

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            if ( != null)
                return new KratosUpdateLoginFlowBody();

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateLoginFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithPasswordMethod != null)
            {
                KratosUpdateLoginFlowWithPasswordMethodJsonConverter kratosUpdateLoginFlowWithPasswordMethodJsonConverter = (KratosUpdateLoginFlowWithPasswordMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithPasswordMethod.GetType()));
                kratosUpdateLoginFlowWithPasswordMethodJsonConverter.WriteProperties(writer, kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithPasswordMethod, jsonSerializerOptions);
            }

            if (kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithOidcMethod != null)
            {
                KratosUpdateLoginFlowWithOidcMethodJsonConverter kratosUpdateLoginFlowWithOidcMethodJsonConverter = (KratosUpdateLoginFlowWithOidcMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithOidcMethod.GetType()));
                kratosUpdateLoginFlowWithOidcMethodJsonConverter.WriteProperties(writer, kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithOidcMethod, jsonSerializerOptions);
            }

            if (kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithTotpMethod != null)
            {
                KratosUpdateLoginFlowWithTotpMethodJsonConverter kratosUpdateLoginFlowWithTotpMethodJsonConverter = (KratosUpdateLoginFlowWithTotpMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithTotpMethod.GetType()));
                kratosUpdateLoginFlowWithTotpMethodJsonConverter.WriteProperties(writer, kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithTotpMethod, jsonSerializerOptions);
            }

            if (kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithWebAuthnMethod != null)
            {
                KratosUpdateLoginFlowWithWebAuthnMethodJsonConverter kratosUpdateLoginFlowWithWebAuthnMethodJsonConverter = (KratosUpdateLoginFlowWithWebAuthnMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithWebAuthnMethod.GetType()));
                kratosUpdateLoginFlowWithWebAuthnMethodJsonConverter.WriteProperties(writer, kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithWebAuthnMethod, jsonSerializerOptions);
            }

            if (kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithLookupSecretMethod != null)
            {
                KratosUpdateLoginFlowWithLookupSecretMethodJsonConverter kratosUpdateLoginFlowWithLookupSecretMethodJsonConverter = (KratosUpdateLoginFlowWithLookupSecretMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithLookupSecretMethod.GetType()));
                kratosUpdateLoginFlowWithLookupSecretMethodJsonConverter.WriteProperties(writer, kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithLookupSecretMethod, jsonSerializerOptions);
            }

            if (kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithCodeMethod != null)
            {
                KratosUpdateLoginFlowWithCodeMethodJsonConverter kratosUpdateLoginFlowWithCodeMethodJsonConverter = (KratosUpdateLoginFlowWithCodeMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithCodeMethod.GetType()));
                kratosUpdateLoginFlowWithCodeMethodJsonConverter.WriteProperties(writer, kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithCodeMethod, jsonSerializerOptions);
            }

            if (kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithPasskeyMethod != null)
            {
                KratosUpdateLoginFlowWithPasskeyMethodJsonConverter kratosUpdateLoginFlowWithPasskeyMethodJsonConverter = (KratosUpdateLoginFlowWithPasskeyMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithPasskeyMethod.GetType()));
                kratosUpdateLoginFlowWithPasskeyMethodJsonConverter.WriteProperties(writer, kratosUpdateLoginFlowBody.KratosUpdateLoginFlowWithPasskeyMethod, jsonSerializerOptions);
            }

            WriteProperties(writer, kratosUpdateLoginFlowBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateLoginFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
