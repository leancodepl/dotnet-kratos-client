// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosIdentityCredentialsOidc
    /// </summary>
    public partial class KratosIdentityCredentialsOidc
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityCredentialsOidc" /> class.
        /// </summary>
        /// <param name="providers">providers</param>
        [JsonConstructor]
        public KratosIdentityCredentialsOidc(Option<List<KratosIdentityCredentialsOidcProvider>?> providers = default)
        {
            ProvidersOption = providers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Providers
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosIdentityCredentialsOidcProvider>?> ProvidersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Providers
        /// </summary>
        [JsonPropertyName("providers")]
        public List<KratosIdentityCredentialsOidcProvider>? Providers { get { return this.ProvidersOption; } set { this.ProvidersOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityCredentialsOidc {\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityCredentialsOidc" />
    /// </summary>
    public class KratosIdentityCredentialsOidcJsonConverter : JsonConverter<KratosIdentityCredentialsOidc>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityCredentialsOidc" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityCredentialsOidc Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<KratosIdentityCredentialsOidcProvider>?> providers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "providers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                providers = new Option<List<KratosIdentityCredentialsOidcProvider>?>(JsonSerializer.Deserialize<List<KratosIdentityCredentialsOidcProvider>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (providers.IsSet && providers.Value == null)
                throw new ArgumentNullException(nameof(providers), "Property is not nullable for class KratosIdentityCredentialsOidc.");

            return new KratosIdentityCredentialsOidc(providers);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityCredentialsOidc" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsOidc"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityCredentialsOidc kratosIdentityCredentialsOidc, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityCredentialsOidc, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityCredentialsOidc" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsOidc"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityCredentialsOidc kratosIdentityCredentialsOidc, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityCredentialsOidc.ProvidersOption.IsSet && kratosIdentityCredentialsOidc.Providers == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsOidc.Providers), "Property is required for class KratosIdentityCredentialsOidc.");

            if (kratosIdentityCredentialsOidc.ProvidersOption.IsSet)
            {
                writer.WritePropertyName("providers");
                JsonSerializer.Serialize(writer, kratosIdentityCredentialsOidc.Providers, jsonSerializerOptions);
            }
        }
    }
}
