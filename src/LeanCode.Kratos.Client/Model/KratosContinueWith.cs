// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosContinueWith
    /// </summary>
    public partial class KratosContinueWith
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWith" /> class.
        /// </summary>
        /// <param name="kratosContinueWithVerificationUi"></param>
        public KratosContinueWith(KratosContinueWithVerificationUi kratosContinueWithVerificationUi)
        {
            KratosContinueWithVerificationUi = kratosContinueWithVerificationUi;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWith" /> class.
        /// </summary>
        /// <param name="kratosContinueWithSetOrySessionToken"></param>
        public KratosContinueWith(KratosContinueWithSetOrySessionToken kratosContinueWithSetOrySessionToken)
        {
            KratosContinueWithSetOrySessionToken = kratosContinueWithSetOrySessionToken;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWith" /> class.
        /// </summary>
        /// <param name="kratosContinueWithSettingsUi"></param>
        public KratosContinueWith(KratosContinueWithSettingsUi kratosContinueWithSettingsUi)
        {
            KratosContinueWithSettingsUi = kratosContinueWithSettingsUi;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWith" /> class.
        /// </summary>
        /// <param name="kratosContinueWithRecoveryUi"></param>
        public KratosContinueWith(KratosContinueWithRecoveryUi kratosContinueWithRecoveryUi)
        {
            KratosContinueWithRecoveryUi = kratosContinueWithRecoveryUi;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Action will always be &#x60;show_recovery_ui&#x60; show_recovery_ui ContinueWithActionShowRecoveryUIString
        /// </summary>
        /// <value>Action will always be &#x60;show_recovery_ui&#x60; show_recovery_ui ContinueWithActionShowRecoveryUIString</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum ShowRecoveryUi for value: show_recovery_ui
            /// </summary>
            ShowRecoveryUi
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("show_recovery_ui"))
                return ActionEnum.ShowRecoveryUi;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("show_recovery_ui"))
                return ActionEnum.ShowRecoveryUi;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.ShowRecoveryUi)
                return "show_recovery_ui";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets KratosContinueWithVerificationUi
        /// </summary>
        public KratosContinueWithVerificationUi? KratosContinueWithVerificationUi { get; set; }

        /// <summary>
        /// Gets or Sets KratosContinueWithSetOrySessionToken
        /// </summary>
        public KratosContinueWithSetOrySessionToken? KratosContinueWithSetOrySessionToken { get; set; }

        /// <summary>
        /// Gets or Sets KratosContinueWithSettingsUi
        /// </summary>
        public KratosContinueWithSettingsUi? KratosContinueWithSettingsUi { get; set; }

        /// <summary>
        /// Gets or Sets KratosContinueWithRecoveryUi
        /// </summary>
        public KratosContinueWithRecoveryUi? KratosContinueWithRecoveryUi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWith {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosContinueWith" />
    /// </summary>
    public class KratosContinueWithJsonConverter : JsonConverter<KratosContinueWith>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosContinueWith" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosContinueWith Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosContinueWith.ActionEnum?> action = default;

            KratosContinueWithVerificationUi? kratosContinueWithVerificationUi = null;
            KratosContinueWithSetOrySessionToken? kratosContinueWithSetOrySessionToken = null;
            KratosContinueWithSettingsUi? kratosContinueWithSettingsUi = null;
            KratosContinueWithRecoveryUi? kratosContinueWithRecoveryUi = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("action") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("set_ory_session_token") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithSetOrySessionToken = utf8JsonReader;
                            kratosContinueWithSetOrySessionToken = JsonSerializer.Deserialize<KratosContinueWithSetOrySessionToken>(ref utf8JsonReaderKratosContinueWithSetOrySessionToken, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("show_recovery_ui") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithRecoveryUi = utf8JsonReader;
                            kratosContinueWithRecoveryUi = JsonSerializer.Deserialize<KratosContinueWithRecoveryUi>(ref utf8JsonReaderKratosContinueWithRecoveryUi, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("show_settings_ui") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithSettingsUi = utf8JsonReader;
                            kratosContinueWithSettingsUi = JsonSerializer.Deserialize<KratosContinueWithSettingsUi>(ref utf8JsonReaderKratosContinueWithSettingsUi, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("show_verification_ui") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithVerificationUi = utf8JsonReader;
                            kratosContinueWithVerificationUi = JsonSerializer.Deserialize<KratosContinueWithVerificationUi>(ref utf8JsonReaderKratosContinueWithVerificationUi, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("continueWithRecoveryUi") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithRecoveryUi = utf8JsonReader;
                            kratosContinueWithRecoveryUi = JsonSerializer.Deserialize<KratosContinueWithRecoveryUi>(ref utf8JsonReaderKratosContinueWithRecoveryUi, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("continueWithSetOrySessionToken") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithSetOrySessionToken = utf8JsonReader;
                            kratosContinueWithSetOrySessionToken = JsonSerializer.Deserialize<KratosContinueWithSetOrySessionToken>(ref utf8JsonReaderKratosContinueWithSetOrySessionToken, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("continueWithSettingsUi") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithSettingsUi = utf8JsonReader;
                            kratosContinueWithSettingsUi = JsonSerializer.Deserialize<KratosContinueWithSettingsUi>(ref utf8JsonReaderKratosContinueWithSettingsUi, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("continueWithVerificationUi") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosContinueWithVerificationUi = utf8JsonReader;
                            kratosContinueWithVerificationUi = JsonSerializer.Deserialize<KratosContinueWithVerificationUi>(ref utf8JsonReaderKratosContinueWithVerificationUi, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<KratosContinueWith.ActionEnum?>(KratosContinueWith.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWith.", nameof(action));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class KratosContinueWith.");

            if (kratosContinueWithVerificationUi != null)
                return new KratosContinueWith(kratosContinueWithVerificationUi);

            if (kratosContinueWithSetOrySessionToken != null)
                return new KratosContinueWith(kratosContinueWithSetOrySessionToken);

            if (kratosContinueWithSettingsUi != null)
                return new KratosContinueWith(kratosContinueWithSettingsUi);

            if (kratosContinueWithRecoveryUi != null)
                return new KratosContinueWith(kratosContinueWithRecoveryUi);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="KratosContinueWith" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWith"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosContinueWith kratosContinueWith, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (kratosContinueWith.KratosContinueWithVerificationUi != null)
            {
                KratosContinueWithVerificationUiJsonConverter kratosContinueWithVerificationUiJsonConverter = (KratosContinueWithVerificationUiJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosContinueWith.KratosContinueWithVerificationUi.GetType()));
                kratosContinueWithVerificationUiJsonConverter.WriteProperties(writer, kratosContinueWith.KratosContinueWithVerificationUi, jsonSerializerOptions);
            }

            if (kratosContinueWith.KratosContinueWithSetOrySessionToken != null)
            {
                KratosContinueWithSetOrySessionTokenJsonConverter kratosContinueWithSetOrySessionTokenJsonConverter = (KratosContinueWithSetOrySessionTokenJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosContinueWith.KratosContinueWithSetOrySessionToken.GetType()));
                kratosContinueWithSetOrySessionTokenJsonConverter.WriteProperties(writer, kratosContinueWith.KratosContinueWithSetOrySessionToken, jsonSerializerOptions);
            }

            if (kratosContinueWith.KratosContinueWithSettingsUi != null)
            {
                KratosContinueWithSettingsUiJsonConverter kratosContinueWithSettingsUiJsonConverter = (KratosContinueWithSettingsUiJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosContinueWith.KratosContinueWithSettingsUi.GetType()));
                kratosContinueWithSettingsUiJsonConverter.WriteProperties(writer, kratosContinueWith.KratosContinueWithSettingsUi, jsonSerializerOptions);
            }

            if (kratosContinueWith.KratosContinueWithRecoveryUi != null)
            {
                KratosContinueWithRecoveryUiJsonConverter kratosContinueWithRecoveryUiJsonConverter = (KratosContinueWithRecoveryUiJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosContinueWith.KratosContinueWithRecoveryUi.GetType()));
                kratosContinueWithRecoveryUiJsonConverter.WriteProperties(writer, kratosContinueWith.KratosContinueWithRecoveryUi, jsonSerializerOptions);
            }

            WriteProperties(writer, kratosContinueWith, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosContinueWith" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWith"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosContinueWith kratosContinueWith, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
