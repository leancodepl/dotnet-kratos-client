// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// The authenticator assurance level can be one of \&quot;aal1\&quot;, \&quot;aal2\&quot;, or \&quot;aal3\&quot;. A higher number means that it is harder for an attacker to compromise the account.  Generally, \&quot;aal1\&quot; implies that one authentication factor was used while AAL2 implies that two factors (e.g. password + TOTP) have been used.  To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials
    /// </summary>
    /// <value>The authenticator assurance level can be one of \&quot;aal1\&quot;, \&quot;aal2\&quot;, or \&quot;aal3\&quot;. A higher number means that it is harder for an attacker to compromise the account.  Generally, \&quot;aal1\&quot; implies that one authentication factor was used while AAL2 implies that two factors (e.g. password + TOTP) have been used.  To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials</value>
    public enum KratosAuthenticatorAssuranceLevel
    {
        /// <summary>
        /// Enum Aal0 for value: aal0
        /// </summary>
        Aal0,

        /// <summary>
        /// Enum Aal1 for value: aal1
        /// </summary>
        Aal1,

        /// <summary>
        /// Enum Aal2 for value: aal2
        /// </summary>
        Aal2,

        /// <summary>
        /// Enum Aal3 for value: aal3
        /// </summary>
        Aal3
    }

    /// <summary>
    /// Converts <see cref="KratosAuthenticatorAssuranceLevel"/> to and from the JSON value
    /// </summary>
    public static class KratosAuthenticatorAssuranceLevelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="KratosAuthenticatorAssuranceLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosAuthenticatorAssuranceLevel FromString(string value)
        {
            if (value.Equals("aal0"))
                return KratosAuthenticatorAssuranceLevel.Aal0;

            if (value.Equals("aal1"))
                return KratosAuthenticatorAssuranceLevel.Aal1;

            if (value.Equals("aal2"))
                return KratosAuthenticatorAssuranceLevel.Aal2;

            if (value.Equals("aal3"))
                return KratosAuthenticatorAssuranceLevel.Aal3;

            throw new NotImplementedException($"Could not convert value to type KratosAuthenticatorAssuranceLevel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="KratosAuthenticatorAssuranceLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosAuthenticatorAssuranceLevel? FromStringOrDefault(string value)
        {
            if (value.Equals("aal0"))
                return KratosAuthenticatorAssuranceLevel.Aal0;

            if (value.Equals("aal1"))
                return KratosAuthenticatorAssuranceLevel.Aal1;

            if (value.Equals("aal2"))
                return KratosAuthenticatorAssuranceLevel.Aal2;

            if (value.Equals("aal3"))
                return KratosAuthenticatorAssuranceLevel.Aal3;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="KratosAuthenticatorAssuranceLevel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(KratosAuthenticatorAssuranceLevel value)
        {
            if (value == KratosAuthenticatorAssuranceLevel.Aal0)
                return "aal0";

            if (value == KratosAuthenticatorAssuranceLevel.Aal1)
                return "aal1";

            if (value == KratosAuthenticatorAssuranceLevel.Aal2)
                return "aal2";

            if (value == KratosAuthenticatorAssuranceLevel.Aal3)
                return "aal3";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosAuthenticatorAssuranceLevel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class KratosAuthenticatorAssuranceLevelJsonConverter : JsonConverter<KratosAuthenticatorAssuranceLevel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosAuthenticatorAssuranceLevel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosAuthenticatorAssuranceLevel? result = rawValue == null
                ? null
                : KratosAuthenticatorAssuranceLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the KratosAuthenticatorAssuranceLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosAuthenticatorAssuranceLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosAuthenticatorAssuranceLevel kratosAuthenticatorAssuranceLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosAuthenticatorAssuranceLevel.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosAuthenticatorAssuranceLevel"/>
    /// </summary>
    public class KratosAuthenticatorAssuranceLevelNullableJsonConverter : JsonConverter<KratosAuthenticatorAssuranceLevel?>
    {
        /// <summary>
        /// Returns a KratosAuthenticatorAssuranceLevel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosAuthenticatorAssuranceLevel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosAuthenticatorAssuranceLevel? result = rawValue == null
                ? null
                : KratosAuthenticatorAssuranceLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosAuthenticatorAssuranceLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosAuthenticatorAssuranceLevel? kratosAuthenticatorAssuranceLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosAuthenticatorAssuranceLevel?.ToString() ?? "null");
        }
    }
}
