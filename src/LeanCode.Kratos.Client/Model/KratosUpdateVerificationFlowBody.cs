// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Verification Flow Request Body
    /// </summary>
    public partial class KratosUpdateVerificationFlowBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateVerificationFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateVerificationFlowWithLinkMethod"></param>
        public KratosUpdateVerificationFlowBody(KratosUpdateVerificationFlowWithLinkMethod kratosUpdateVerificationFlowWithLinkMethod)
        {
            KratosUpdateVerificationFlowWithLinkMethod = kratosUpdateVerificationFlowWithLinkMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateVerificationFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateVerificationFlowWithCodeMethod"></param>
        public KratosUpdateVerificationFlowBody(KratosUpdateVerificationFlowWithCodeMethod kratosUpdateVerificationFlowWithCodeMethod)
        {
            KratosUpdateVerificationFlowWithCodeMethod = kratosUpdateVerificationFlowWithCodeMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method is the method that should be used for this verification flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link VerificationStrategyLink code VerificationStrategyCode
        /// </summary>
        /// <value>Method is the method that should be used for this verification flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link VerificationStrategyLink code VerificationStrategyCode</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            Link,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            Code
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.Link)
                return "link";

            if (value == MethodEnum.Code)
                return "code";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets KratosUpdateVerificationFlowWithLinkMethod
        /// </summary>
        public KratosUpdateVerificationFlowWithLinkMethod? KratosUpdateVerificationFlowWithLinkMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateVerificationFlowWithCodeMethod
        /// </summary>
        public KratosUpdateVerificationFlowWithCodeMethod? KratosUpdateVerificationFlowWithCodeMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateVerificationFlowBody {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateVerificationFlowBody" />
    /// </summary>
    public class KratosUpdateVerificationFlowBodyJsonConverter : JsonConverter<KratosUpdateVerificationFlowBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateVerificationFlowBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateVerificationFlowBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosUpdateVerificationFlowBody.MethodEnum?> method = default;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("method") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("code") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("link") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateVerificationFlowWithCodeMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateVerificationFlowWithLinkMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReader = utf8JsonReader;
                             = JsonSerializer.Deserialize<>(ref utf8JsonReader, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<KratosUpdateVerificationFlowBody.MethodEnum?>(KratosUpdateVerificationFlowBody.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateVerificationFlowBody.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateVerificationFlowBody.");

            if ( != null)
                return new KratosUpdateVerificationFlowBody();

            if ( != null)
                return new KratosUpdateVerificationFlowBody();

            if ( != null)
                return new KratosUpdateVerificationFlowBody();

            if ( != null)
                return new KratosUpdateVerificationFlowBody();

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateVerificationFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (kratosUpdateVerificationFlowBody.KratosUpdateVerificationFlowWithLinkMethod != null)
            {
                KratosUpdateVerificationFlowWithLinkMethodJsonConverter kratosUpdateVerificationFlowWithLinkMethodJsonConverter = (KratosUpdateVerificationFlowWithLinkMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateVerificationFlowBody.KratosUpdateVerificationFlowWithLinkMethod.GetType()));
                kratosUpdateVerificationFlowWithLinkMethodJsonConverter.WriteProperties(writer, kratosUpdateVerificationFlowBody.KratosUpdateVerificationFlowWithLinkMethod, jsonSerializerOptions);
            }

            if (kratosUpdateVerificationFlowBody.KratosUpdateVerificationFlowWithCodeMethod != null)
            {
                KratosUpdateVerificationFlowWithCodeMethodJsonConverter kratosUpdateVerificationFlowWithCodeMethodJsonConverter = (KratosUpdateVerificationFlowWithCodeMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateVerificationFlowBody.KratosUpdateVerificationFlowWithCodeMethod.GetType()));
                kratosUpdateVerificationFlowWithCodeMethodJsonConverter.WriteProperties(writer, kratosUpdateVerificationFlowBody.KratosUpdateVerificationFlowWithCodeMethod, jsonSerializerOptions);
            }

            WriteProperties(writer, kratosUpdateVerificationFlowBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateVerificationFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
