// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Indicates, that the UI flow could be continued by showing a verification ui
    /// </summary>
    public partial class KratosContinueWithVerificationUi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithVerificationUi" /> class.
        /// </summary>
        /// <param name="action">Action will always be &#x60;show_verification_ui&#x60; show_verification_ui ContinueWithActionShowVerificationUIString</param>
        /// <param name="flow">flow</param>
        [JsonConstructor]
        public KratosContinueWithVerificationUi(ActionEnum action, KratosContinueWithVerificationUiFlow flow)
        {
            Action = action;
            Flow = flow;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Action will always be &#x60;show_verification_ui&#x60; show_verification_ui ContinueWithActionShowVerificationUIString
        /// </summary>
        /// <value>Action will always be &#x60;show_verification_ui&#x60; show_verification_ui ContinueWithActionShowVerificationUIString</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum ShowVerificationUi for value: show_verification_ui
            /// </summary>
            ShowVerificationUi
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("show_verification_ui"))
                return ActionEnum.ShowVerificationUi;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("show_verification_ui"))
                return ActionEnum.ShowVerificationUi;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.ShowVerificationUi)
                return "show_verification_ui";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Action will always be &#x60;show_verification_ui&#x60; show_verification_ui ContinueWithActionShowVerificationUIString
        /// </summary>
        /// <value>Action will always be &#x60;show_verification_ui&#x60; show_verification_ui ContinueWithActionShowVerificationUIString</value>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Gets or Sets Flow
        /// </summary>
        [JsonPropertyName("flow")]
        public KratosContinueWithVerificationUiFlow Flow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWithVerificationUi {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosContinueWithVerificationUi" />
    /// </summary>
    public class KratosContinueWithVerificationUiJsonConverter : JsonConverter<KratosContinueWithVerificationUi>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosContinueWithVerificationUi" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosContinueWithVerificationUi Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosContinueWithVerificationUi.ActionEnum?> action = default;
            Option<KratosContinueWithVerificationUiFlow?> flow = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<KratosContinueWithVerificationUi.ActionEnum?>(KratosContinueWithVerificationUi.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "flow":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                flow = new Option<KratosContinueWithVerificationUiFlow?>(JsonSerializer.Deserialize<KratosContinueWithVerificationUiFlow>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithVerificationUi.", nameof(action));

            if (!flow.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithVerificationUi.", nameof(flow));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class KratosContinueWithVerificationUi.");

            if (flow.IsSet && flow.Value == null)
                throw new ArgumentNullException(nameof(flow), "Property is not nullable for class KratosContinueWithVerificationUi.");

            return new KratosContinueWithVerificationUi(action.Value!.Value!, flow.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="KratosContinueWithVerificationUi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithVerificationUi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosContinueWithVerificationUi kratosContinueWithVerificationUi, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosContinueWithVerificationUi, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosContinueWithVerificationUi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithVerificationUi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosContinueWithVerificationUi kratosContinueWithVerificationUi, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosContinueWithVerificationUi.Flow == null)
                throw new ArgumentNullException(nameof(kratosContinueWithVerificationUi.Flow), "Property is required for class KratosContinueWithVerificationUi.");

            var actionRawValue = KratosContinueWithVerificationUi.ActionEnumToJsonValue(kratosContinueWithVerificationUi.Action);
            writer.WriteString("action", actionRawValue);
            writer.WritePropertyName("flow");
            JsonSerializer.Serialize(writer, kratosContinueWithVerificationUi.Flow, jsonSerializerOptions);
        }
    }
}
