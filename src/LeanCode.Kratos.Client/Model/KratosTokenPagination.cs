// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosTokenPagination
    /// </summary>
    public partial class KratosTokenPagination
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosTokenPagination" /> class.
        /// </summary>
        /// <param name="pageSize">Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (default to &quot;1&quot;)</param>
        [JsonConstructor]
        public KratosTokenPagination(Option<long?> pageSize = default, Option<string?> pageToken = default)
        {
            PageSizeOption = pageSize;
            PageTokenOption = pageToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of PageSize
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> PageSizeOption { get; private set; }

        /// <summary>
        /// Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
        /// </summary>
        /// <value>Items per page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).</value>
        [JsonPropertyName("page_size")]
        public long? PageSize { get { return this.PageSizeOption; } set { this.PageSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PageTokenOption { get; private set; }

        /// <summary>
        /// Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
        /// </summary>
        /// <value>Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).</value>
        [JsonPropertyName("page_token")]
        public string? PageToken { get { return this.PageTokenOption; } set { this.PageTokenOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosTokenPagination {\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  PageToken: ").Append(PageToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosTokenPagination" />
    /// </summary>
    public class KratosTokenPaginationJsonConverter : JsonConverter<KratosTokenPagination>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosTokenPagination" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosTokenPagination Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> pageSize = default;
            Option<string?> pageToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "page_size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageSize = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "page_token":
                            pageToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (pageSize.IsSet && pageSize.Value == null)
                throw new ArgumentNullException(nameof(pageSize), "Property is not nullable for class KratosTokenPagination.");

            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken), "Property is not nullable for class KratosTokenPagination.");

            return new KratosTokenPagination(pageSize, pageToken);
        }

        /// <summary>
        /// Serializes a <see cref="KratosTokenPagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosTokenPagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosTokenPagination kratosTokenPagination, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosTokenPagination, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosTokenPagination" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosTokenPagination"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosTokenPagination kratosTokenPagination, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosTokenPagination.PageTokenOption.IsSet && kratosTokenPagination.PageToken == null)
                throw new ArgumentNullException(nameof(kratosTokenPagination.PageToken), "Property is required for class KratosTokenPagination.");

            if (kratosTokenPagination.PageSizeOption.IsSet)
                writer.WriteNumber("page_size", kratosTokenPagination.PageSizeOption.Value!.Value);

            if (kratosTokenPagination.PageTokenOption.IsSet)
                writer.WriteString("page_token", kratosTokenPagination.PageToken);
        }
    }
}
