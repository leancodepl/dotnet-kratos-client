// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Settings Flow with TOTP Method
    /// </summary>
    public partial class KratosUpdateSettingsFlowWithTotpMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateSettingsFlowWithTotpMethod" /> class.
        /// </summary>
        /// <param name="method">Method  Should be set to \&quot;totp\&quot; when trying to add, update, or remove a totp pairing.</param>
        /// <param name="csrfToken">CSRFToken is the anti-CSRF token</param>
        /// <param name="totpCode">ValidationTOTP must contain a valid TOTP based on the</param>
        /// <param name="totpUnlink">UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.</param>
        /// <param name="transientPayload">Transient data to pass along to any webhooks</param>
        [JsonConstructor]
        public KratosUpdateSettingsFlowWithTotpMethod(string method, Option<string?> csrfToken = default, Option<string?> totpCode = default, Option<bool?> totpUnlink = default, Option<Object?> transientPayload = default)
        {
            Method = method;
            CsrfTokenOption = csrfToken;
            TotpCodeOption = totpCode;
            TotpUnlinkOption = totpUnlink;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method  Should be set to \&quot;totp\&quot; when trying to add, update, or remove a totp pairing.
        /// </summary>
        /// <value>Method  Should be set to \&quot;totp\&quot; when trying to add, update, or remove a totp pairing.</value>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// CSRFToken is the anti-CSRF token
        /// </summary>
        /// <value>CSRFToken is the anti-CSRF token</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotpCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TotpCodeOption { get; private set; }

        /// <summary>
        /// ValidationTOTP must contain a valid TOTP based on the
        /// </summary>
        /// <value>ValidationTOTP must contain a valid TOTP based on the</value>
        [JsonPropertyName("totp_code")]
        public string? TotpCode { get { return this.TotpCodeOption; } set { this.TotpCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotpUnlink
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TotpUnlinkOption { get; private set; }

        /// <summary>
        /// UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.
        /// </summary>
        /// <value>UnlinkTOTP if true will remove the TOTP pairing, effectively removing the credential. This can be used to set up a new TOTP device.</value>
        [JsonPropertyName("totp_unlink")]
        public bool? TotpUnlink { get { return this.TotpUnlinkOption; } set { this.TotpUnlinkOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// Transient data to pass along to any webhooks
        /// </summary>
        /// <value>Transient data to pass along to any webhooks</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateSettingsFlowWithTotpMethod {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  TotpCode: ").Append(TotpCode).Append("\n");
            sb.Append("  TotpUnlink: ").Append(TotpUnlink).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateSettingsFlowWithTotpMethod" />
    /// </summary>
    public class KratosUpdateSettingsFlowWithTotpMethodJsonConverter : JsonConverter<KratosUpdateSettingsFlowWithTotpMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateSettingsFlowWithTotpMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateSettingsFlowWithTotpMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> method = default;
            Option<string?> csrfToken = default;
            Option<string?> totpCode = default;
            Option<bool?> totpUnlink = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "totp_code":
                            totpCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "totp_unlink":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totpUnlink = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateSettingsFlowWithTotpMethod.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateSettingsFlowWithTotpMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateSettingsFlowWithTotpMethod.");

            if (totpCode.IsSet && totpCode.Value == null)
                throw new ArgumentNullException(nameof(totpCode), "Property is not nullable for class KratosUpdateSettingsFlowWithTotpMethod.");

            if (totpUnlink.IsSet && totpUnlink.Value == null)
                throw new ArgumentNullException(nameof(totpUnlink), "Property is not nullable for class KratosUpdateSettingsFlowWithTotpMethod.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosUpdateSettingsFlowWithTotpMethod.");

            return new KratosUpdateSettingsFlowWithTotpMethod(method.Value!, csrfToken, totpCode, totpUnlink, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateSettingsFlowWithTotpMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateSettingsFlowWithTotpMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateSettingsFlowWithTotpMethod kratosUpdateSettingsFlowWithTotpMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateSettingsFlowWithTotpMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateSettingsFlowWithTotpMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateSettingsFlowWithTotpMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateSettingsFlowWithTotpMethod kratosUpdateSettingsFlowWithTotpMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateSettingsFlowWithTotpMethod.Method == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithTotpMethod.Method), "Property is required for class KratosUpdateSettingsFlowWithTotpMethod.");

            if (kratosUpdateSettingsFlowWithTotpMethod.CsrfTokenOption.IsSet && kratosUpdateSettingsFlowWithTotpMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithTotpMethod.CsrfToken), "Property is required for class KratosUpdateSettingsFlowWithTotpMethod.");

            if (kratosUpdateSettingsFlowWithTotpMethod.TotpCodeOption.IsSet && kratosUpdateSettingsFlowWithTotpMethod.TotpCode == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithTotpMethod.TotpCode), "Property is required for class KratosUpdateSettingsFlowWithTotpMethod.");

            if (kratosUpdateSettingsFlowWithTotpMethod.TransientPayloadOption.IsSet && kratosUpdateSettingsFlowWithTotpMethod.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowWithTotpMethod.TransientPayload), "Property is required for class KratosUpdateSettingsFlowWithTotpMethod.");

            writer.WriteString("method", kratosUpdateSettingsFlowWithTotpMethod.Method);

            if (kratosUpdateSettingsFlowWithTotpMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateSettingsFlowWithTotpMethod.CsrfToken);

            if (kratosUpdateSettingsFlowWithTotpMethod.TotpCodeOption.IsSet)
                writer.WriteString("totp_code", kratosUpdateSettingsFlowWithTotpMethod.TotpCode);

            if (kratosUpdateSettingsFlowWithTotpMethod.TotpUnlinkOption.IsSet)
                writer.WriteBoolean("totp_unlink", kratosUpdateSettingsFlowWithTotpMethod.TotpUnlinkOption.Value!.Value);

            if (kratosUpdateSettingsFlowWithTotpMethod.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosUpdateSettingsFlowWithTotpMethod.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
