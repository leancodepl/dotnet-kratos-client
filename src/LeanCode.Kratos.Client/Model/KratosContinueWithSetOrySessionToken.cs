// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Indicates that a session was issued, and the application should use this token for authenticated requests
    /// </summary>
    public partial class KratosContinueWithSetOrySessionToken
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithSetOrySessionToken" /> class.
        /// </summary>
        /// <param name="action">Action will always be &#x60;set_ory_session_token&#x60; set_ory_session_token ContinueWithActionSetOrySessionTokenString</param>
        /// <param name="orySessionToken">Token is the token of the session</param>
        [JsonConstructor]
        public KratosContinueWithSetOrySessionToken(ActionEnum action, string orySessionToken)
        {
            Action = action;
            OrySessionToken = orySessionToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Action will always be &#x60;set_ory_session_token&#x60; set_ory_session_token ContinueWithActionSetOrySessionTokenString
        /// </summary>
        /// <value>Action will always be &#x60;set_ory_session_token&#x60; set_ory_session_token ContinueWithActionSetOrySessionTokenString</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum SetOrySessionToken for value: set_ory_session_token
            /// </summary>
            SetOrySessionToken
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("set_ory_session_token"))
                return ActionEnum.SetOrySessionToken;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("set_ory_session_token"))
                return ActionEnum.SetOrySessionToken;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.SetOrySessionToken)
                return "set_ory_session_token";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Action will always be &#x60;set_ory_session_token&#x60; set_ory_session_token ContinueWithActionSetOrySessionTokenString
        /// </summary>
        /// <value>Action will always be &#x60;set_ory_session_token&#x60; set_ory_session_token ContinueWithActionSetOrySessionTokenString</value>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Token is the token of the session
        /// </summary>
        /// <value>Token is the token of the session</value>
        [JsonPropertyName("ory_session_token")]
        public string OrySessionToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWithSetOrySessionToken {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  OrySessionToken: ").Append(OrySessionToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosContinueWithSetOrySessionToken" />
    /// </summary>
    public class KratosContinueWithSetOrySessionTokenJsonConverter : JsonConverter<KratosContinueWithSetOrySessionToken>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosContinueWithSetOrySessionToken" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosContinueWithSetOrySessionToken Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosContinueWithSetOrySessionToken.ActionEnum?> action = default;
            Option<string?> orySessionToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<KratosContinueWithSetOrySessionToken.ActionEnum?>(KratosContinueWithSetOrySessionToken.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "ory_session_token":
                            orySessionToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithSetOrySessionToken.", nameof(action));

            if (!orySessionToken.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithSetOrySessionToken.", nameof(orySessionToken));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class KratosContinueWithSetOrySessionToken.");

            if (orySessionToken.IsSet && orySessionToken.Value == null)
                throw new ArgumentNullException(nameof(orySessionToken), "Property is not nullable for class KratosContinueWithSetOrySessionToken.");

            return new KratosContinueWithSetOrySessionToken(action.Value!.Value!, orySessionToken.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="KratosContinueWithSetOrySessionToken" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithSetOrySessionToken"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosContinueWithSetOrySessionToken kratosContinueWithSetOrySessionToken, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosContinueWithSetOrySessionToken, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosContinueWithSetOrySessionToken" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithSetOrySessionToken"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosContinueWithSetOrySessionToken kratosContinueWithSetOrySessionToken, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosContinueWithSetOrySessionToken.OrySessionToken == null)
                throw new ArgumentNullException(nameof(kratosContinueWithSetOrySessionToken.OrySessionToken), "Property is required for class KratosContinueWithSetOrySessionToken.");

            var actionRawValue = KratosContinueWithSetOrySessionToken.ActionEnumToJsonValue(kratosContinueWithSetOrySessionToken.Action);
            writer.WriteString("action", actionRawValue);
            writer.WriteString("ory_session_token", kratosContinueWithSetOrySessionToken.OrySessionToken);
        }
    }
}
