// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Recovery Flow with Link Method
    /// </summary>
    public partial class KratosUpdateRecoveryFlowWithLinkMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateRecoveryFlowWithLinkMethod" /> class.
        /// </summary>
        /// <param name="email">Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email</param>
        /// <param name="method">Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60; link RecoveryStrategyLink code RecoveryStrategyCode</param>
        /// <param name="csrfToken">Sending the anti-csrf token is only required for browser login flows.</param>
        /// <param name="transientPayload">Transient data to pass along to any webhooks</param>
        [JsonConstructor]
        public KratosUpdateRecoveryFlowWithLinkMethod(string email, MethodEnum method, Option<string?> csrfToken = default, Option<Object?> transientPayload = default)
        {
            Email = email;
            Method = method;
            CsrfTokenOption = csrfToken;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60; link RecoveryStrategyLink code RecoveryStrategyCode
        /// </summary>
        /// <value>Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60; link RecoveryStrategyLink code RecoveryStrategyCode</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            Link,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            Code
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.Link)
                return "link";

            if (value == MethodEnum.Code)
                return "code";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60; link RecoveryStrategyLink code RecoveryStrategyCode
        /// </summary>
        /// <value>Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60; link RecoveryStrategyLink code RecoveryStrategyCode</value>
        [JsonPropertyName("method")]
        public MethodEnum Method { get; set; }

        /// <summary>
        /// Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email
        /// </summary>
        /// <value>Email to Recover  Needs to be set when initiating the flow. If the email is a registered recovery email, a recovery link will be sent. If the email is not known, a email with details on what happened will be sent instead.  format: email</value>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// Sending the anti-csrf token is only required for browser login flows.
        /// </summary>
        /// <value>Sending the anti-csrf token is only required for browser login flows.</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// Transient data to pass along to any webhooks
        /// </summary>
        /// <value>Transient data to pass along to any webhooks</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateRecoveryFlowWithLinkMethod {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateRecoveryFlowWithLinkMethod" />
    /// </summary>
    public class KratosUpdateRecoveryFlowWithLinkMethodJsonConverter : JsonConverter<KratosUpdateRecoveryFlowWithLinkMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateRecoveryFlowWithLinkMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateRecoveryFlowWithLinkMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<KratosUpdateRecoveryFlowWithLinkMethod.MethodEnum?> method = default;
            Option<string?> csrfToken = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<KratosUpdateRecoveryFlowWithLinkMethod.MethodEnum?>(KratosUpdateRecoveryFlowWithLinkMethod.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!email.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRecoveryFlowWithLinkMethod.", nameof(email));

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRecoveryFlowWithLinkMethod.", nameof(method));

            if (email.IsSet && email.Value == null)
                throw new ArgumentNullException(nameof(email), "Property is not nullable for class KratosUpdateRecoveryFlowWithLinkMethod.");

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateRecoveryFlowWithLinkMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateRecoveryFlowWithLinkMethod.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosUpdateRecoveryFlowWithLinkMethod.");

            return new KratosUpdateRecoveryFlowWithLinkMethod(email.Value!, method.Value!.Value!, csrfToken, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateRecoveryFlowWithLinkMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRecoveryFlowWithLinkMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateRecoveryFlowWithLinkMethod kratosUpdateRecoveryFlowWithLinkMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateRecoveryFlowWithLinkMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateRecoveryFlowWithLinkMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRecoveryFlowWithLinkMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateRecoveryFlowWithLinkMethod kratosUpdateRecoveryFlowWithLinkMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateRecoveryFlowWithLinkMethod.Email == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowWithLinkMethod.Email), "Property is required for class KratosUpdateRecoveryFlowWithLinkMethod.");

            if (kratosUpdateRecoveryFlowWithLinkMethod.CsrfTokenOption.IsSet && kratosUpdateRecoveryFlowWithLinkMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowWithLinkMethod.CsrfToken), "Property is required for class KratosUpdateRecoveryFlowWithLinkMethod.");

            if (kratosUpdateRecoveryFlowWithLinkMethod.TransientPayloadOption.IsSet && kratosUpdateRecoveryFlowWithLinkMethod.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowWithLinkMethod.TransientPayload), "Property is required for class KratosUpdateRecoveryFlowWithLinkMethod.");

            writer.WriteString("email", kratosUpdateRecoveryFlowWithLinkMethod.Email);

            var methodRawValue = KratosUpdateRecoveryFlowWithLinkMethod.MethodEnumToJsonValue(kratosUpdateRecoveryFlowWithLinkMethod.Method);
            writer.WriteString("method", methodRawValue);
            if (kratosUpdateRecoveryFlowWithLinkMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateRecoveryFlowWithLinkMethod.CsrfToken);

            if (kratosUpdateRecoveryFlowWithLinkMethod.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosUpdateRecoveryFlowWithLinkMethod.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
