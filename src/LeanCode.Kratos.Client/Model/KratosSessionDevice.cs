// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Device corresponding to a Session
    /// </summary>
    public partial class KratosSessionDevice
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosSessionDevice" /> class.
        /// </summary>
        /// <param name="id">Device record ID</param>
        /// <param name="ipAddress">IPAddress of the client</param>
        /// <param name="location">Geo Location corresponding to the IP Address</param>
        /// <param name="userAgent">UserAgent of the client</param>
        [JsonConstructor]
        public KratosSessionDevice(string id, Option<string?> ipAddress = default, Option<string?> location = default, Option<string?> userAgent = default)
        {
            Id = id;
            IpAddressOption = ipAddress;
            LocationOption = location;
            UserAgentOption = userAgent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Device record ID
        /// </summary>
        /// <value>Device record ID</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of IpAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpAddressOption { get; private set; }

        /// <summary>
        /// IPAddress of the client
        /// </summary>
        /// <value>IPAddress of the client</value>
        [JsonPropertyName("ip_address")]
        public string? IpAddress { get { return this.IpAddressOption; } set { this.IpAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Geo Location corresponding to the IP Address
        /// </summary>
        /// <value>Geo Location corresponding to the IP Address</value>
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserAgent
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserAgentOption { get; private set; }

        /// <summary>
        /// UserAgent of the client
        /// </summary>
        /// <value>UserAgent of the client</value>
        [JsonPropertyName("user_agent")]
        public string? UserAgent { get { return this.UserAgentOption; } set { this.UserAgentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosSessionDevice {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosSessionDevice" />
    /// </summary>
    public class KratosSessionDeviceJsonConverter : JsonConverter<KratosSessionDevice>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosSessionDevice" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosSessionDevice Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> ipAddress = default;
            Option<string?> location = default;
            Option<string?> userAgent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ip_address":
                            ipAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "user_agent":
                            userAgent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosSessionDevice.", nameof(id));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosSessionDevice.");

            if (ipAddress.IsSet && ipAddress.Value == null)
                throw new ArgumentNullException(nameof(ipAddress), "Property is not nullable for class KratosSessionDevice.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class KratosSessionDevice.");

            if (userAgent.IsSet && userAgent.Value == null)
                throw new ArgumentNullException(nameof(userAgent), "Property is not nullable for class KratosSessionDevice.");

            return new KratosSessionDevice(id.Value!, ipAddress, location, userAgent);
        }

        /// <summary>
        /// Serializes a <see cref="KratosSessionDevice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSessionDevice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosSessionDevice kratosSessionDevice, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosSessionDevice, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosSessionDevice" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSessionDevice"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosSessionDevice kratosSessionDevice, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosSessionDevice.Id == null)
                throw new ArgumentNullException(nameof(kratosSessionDevice.Id), "Property is required for class KratosSessionDevice.");

            if (kratosSessionDevice.IpAddressOption.IsSet && kratosSessionDevice.IpAddress == null)
                throw new ArgumentNullException(nameof(kratosSessionDevice.IpAddress), "Property is required for class KratosSessionDevice.");

            if (kratosSessionDevice.LocationOption.IsSet && kratosSessionDevice.Location == null)
                throw new ArgumentNullException(nameof(kratosSessionDevice.Location), "Property is required for class KratosSessionDevice.");

            if (kratosSessionDevice.UserAgentOption.IsSet && kratosSessionDevice.UserAgent == null)
                throw new ArgumentNullException(nameof(kratosSessionDevice.UserAgent), "Property is required for class KratosSessionDevice.");

            writer.WriteString("id", kratosSessionDevice.Id);

            if (kratosSessionDevice.IpAddressOption.IsSet)
                writer.WriteString("ip_address", kratosSessionDevice.IpAddress);

            if (kratosSessionDevice.LocationOption.IsSet)
                writer.WriteString("location", kratosSessionDevice.Location);

            if (kratosSessionDevice.UserAgentOption.IsSet)
                writer.WriteString("user_agent", kratosSessionDevice.UserAgent);
        }
    }
}
