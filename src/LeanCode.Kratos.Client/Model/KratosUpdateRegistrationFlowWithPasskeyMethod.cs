// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Registration Flow with Passkey Method
    /// </summary>
    public partial class KratosUpdateRegistrationFlowWithPasskeyMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateRegistrationFlowWithPasskeyMethod" /> class.
        /// </summary>
        /// <param name="method">Method  Should be set to \&quot;passkey\&quot; when trying to add, update, or remove a Passkey.</param>
        /// <param name="traits">The identity&#39;s traits</param>
        /// <param name="csrfToken">CSRFToken is the anti-CSRF token</param>
        /// <param name="passkeyRegister">Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.</param>
        /// <param name="transientPayload">Transient data to pass along to any webhooks</param>
        [JsonConstructor]
        public KratosUpdateRegistrationFlowWithPasskeyMethod(string method, Object traits, Option<string?> csrfToken = default, Option<string?> passkeyRegister = default, Option<Object?> transientPayload = default)
        {
            Method = method;
            Traits = traits;
            CsrfTokenOption = csrfToken;
            PasskeyRegisterOption = passkeyRegister;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method  Should be set to \&quot;passkey\&quot; when trying to add, update, or remove a Passkey.
        /// </summary>
        /// <value>Method  Should be set to \&quot;passkey\&quot; when trying to add, update, or remove a Passkey.</value>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// The identity&#39;s traits
        /// </summary>
        /// <value>The identity&#39;s traits</value>
        [JsonPropertyName("traits")]
        public Object Traits { get; set; }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// CSRFToken is the anti-CSRF token
        /// </summary>
        /// <value>CSRFToken is the anti-CSRF token</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of PasskeyRegister
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasskeyRegisterOption { get; private set; }

        /// <summary>
        /// Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.
        /// </summary>
        /// <value>Register a WebAuthn Security Key  It is expected that the JSON returned by the WebAuthn registration process is included here.</value>
        [JsonPropertyName("passkey_register")]
        public string? PasskeyRegister { get { return this.PasskeyRegisterOption; } set { this.PasskeyRegisterOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// Transient data to pass along to any webhooks
        /// </summary>
        /// <value>Transient data to pass along to any webhooks</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateRegistrationFlowWithPasskeyMethod {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Traits: ").Append(Traits).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  PasskeyRegister: ").Append(PasskeyRegister).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateRegistrationFlowWithPasskeyMethod" />
    /// </summary>
    public class KratosUpdateRegistrationFlowWithPasskeyMethodJsonConverter : JsonConverter<KratosUpdateRegistrationFlowWithPasskeyMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateRegistrationFlowWithPasskeyMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateRegistrationFlowWithPasskeyMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> method = default;
            Option<Object?> traits = default;
            Option<string?> csrfToken = default;
            Option<string?> passkeyRegister = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "traits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                traits = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passkey_register":
                            passkeyRegister = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRegistrationFlowWithPasskeyMethod.", nameof(method));

            if (!traits.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRegistrationFlowWithPasskeyMethod.", nameof(traits));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (traits.IsSet && traits.Value == null)
                throw new ArgumentNullException(nameof(traits), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (passkeyRegister.IsSet && passkeyRegister.Value == null)
                throw new ArgumentNullException(nameof(passkeyRegister), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            return new KratosUpdateRegistrationFlowWithPasskeyMethod(method.Value!, traits.Value!, csrfToken, passkeyRegister, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateRegistrationFlowWithPasskeyMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRegistrationFlowWithPasskeyMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateRegistrationFlowWithPasskeyMethod kratosUpdateRegistrationFlowWithPasskeyMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateRegistrationFlowWithPasskeyMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateRegistrationFlowWithPasskeyMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRegistrationFlowWithPasskeyMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateRegistrationFlowWithPasskeyMethod kratosUpdateRegistrationFlowWithPasskeyMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateRegistrationFlowWithPasskeyMethod.Method == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasskeyMethod.Method), "Property is required for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (kratosUpdateRegistrationFlowWithPasskeyMethod.Traits == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasskeyMethod.Traits), "Property is required for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (kratosUpdateRegistrationFlowWithPasskeyMethod.CsrfTokenOption.IsSet && kratosUpdateRegistrationFlowWithPasskeyMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasskeyMethod.CsrfToken), "Property is required for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (kratosUpdateRegistrationFlowWithPasskeyMethod.PasskeyRegisterOption.IsSet && kratosUpdateRegistrationFlowWithPasskeyMethod.PasskeyRegister == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasskeyMethod.PasskeyRegister), "Property is required for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            if (kratosUpdateRegistrationFlowWithPasskeyMethod.TransientPayloadOption.IsSet && kratosUpdateRegistrationFlowWithPasskeyMethod.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasskeyMethod.TransientPayload), "Property is required for class KratosUpdateRegistrationFlowWithPasskeyMethod.");

            writer.WriteString("method", kratosUpdateRegistrationFlowWithPasskeyMethod.Method);

            writer.WritePropertyName("traits");
            JsonSerializer.Serialize(writer, kratosUpdateRegistrationFlowWithPasskeyMethod.Traits, jsonSerializerOptions);
            if (kratosUpdateRegistrationFlowWithPasskeyMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateRegistrationFlowWithPasskeyMethod.CsrfToken);

            if (kratosUpdateRegistrationFlowWithPasskeyMethod.PasskeyRegisterOption.IsSet)
                writer.WriteString("passkey_register", kratosUpdateRegistrationFlowWithPasskeyMethod.PasskeyRegister);

            if (kratosUpdateRegistrationFlowWithPasskeyMethod.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosUpdateRegistrationFlowWithPasskeyMethod.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
