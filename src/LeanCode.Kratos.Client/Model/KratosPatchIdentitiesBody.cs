// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Patch Identities Body
    /// </summary>
    public partial class KratosPatchIdentitiesBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosPatchIdentitiesBody" /> class.
        /// </summary>
        /// <param name="identities">Identities holds the list of patches to apply  required</param>
        [JsonConstructor]
        public KratosPatchIdentitiesBody(Option<List<KratosIdentityPatch>?> identities = default)
        {
            IdentitiesOption = identities;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Identities
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosIdentityPatch>?> IdentitiesOption { get; private set; }

        /// <summary>
        /// Identities holds the list of patches to apply  required
        /// </summary>
        /// <value>Identities holds the list of patches to apply  required</value>
        [JsonPropertyName("identities")]
        public List<KratosIdentityPatch>? Identities { get { return this.IdentitiesOption; } set { this.IdentitiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosPatchIdentitiesBody {\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosPatchIdentitiesBody" />
    /// </summary>
    public class KratosPatchIdentitiesBodyJsonConverter : JsonConverter<KratosPatchIdentitiesBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosPatchIdentitiesBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosPatchIdentitiesBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<KratosIdentityPatch>?> identities = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "identities":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                identities = new Option<List<KratosIdentityPatch>?>(JsonSerializer.Deserialize<List<KratosIdentityPatch>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (identities.IsSet && identities.Value == null)
                throw new ArgumentNullException(nameof(identities), "Property is not nullable for class KratosPatchIdentitiesBody.");

            return new KratosPatchIdentitiesBody(identities);
        }

        /// <summary>
        /// Serializes a <see cref="KratosPatchIdentitiesBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosPatchIdentitiesBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosPatchIdentitiesBody kratosPatchIdentitiesBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosPatchIdentitiesBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosPatchIdentitiesBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosPatchIdentitiesBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosPatchIdentitiesBody kratosPatchIdentitiesBody, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosPatchIdentitiesBody.IdentitiesOption.IsSet && kratosPatchIdentitiesBody.Identities == null)
                throw new ArgumentNullException(nameof(kratosPatchIdentitiesBody.Identities), "Property is required for class KratosPatchIdentitiesBody.");

            if (kratosPatchIdentitiesBody.IdentitiesOption.IsSet)
            {
                writer.WritePropertyName("identities");
                JsonSerializer.Serialize(writer, kratosPatchIdentitiesBody.Identities, jsonSerializerOptions);
            }
        }
    }
}
