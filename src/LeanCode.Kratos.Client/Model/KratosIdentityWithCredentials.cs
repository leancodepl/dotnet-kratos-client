// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Create Identity and Import Credentials
    /// </summary>
    public partial class KratosIdentityWithCredentials
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityWithCredentials" /> class.
        /// </summary>
        /// <param name="oidc">oidc</param>
        /// <param name="password">password</param>
        [JsonConstructor]
        public KratosIdentityWithCredentials(Option<KratosIdentityWithCredentialsOidc?> oidc = default, Option<KratosIdentityWithCredentialsPassword?> password = default)
        {
            OidcOption = oidc;
            PasswordOption = password;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Oidc
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosIdentityWithCredentialsOidc?> OidcOption { get; private set; }

        /// <summary>
        /// Gets or Sets Oidc
        /// </summary>
        [JsonPropertyName("oidc")]
        public KratosIdentityWithCredentialsOidc? Oidc { get { return this.OidcOption; } set { this.OidcOption = new(value); } }

        /// <summary>
        /// Used to track the state of Password
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosIdentityWithCredentialsPassword?> PasswordOption { get; private set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public KratosIdentityWithCredentialsPassword? Password { get { return this.PasswordOption; } set { this.PasswordOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityWithCredentials {\n");
            sb.Append("  Oidc: ").Append(Oidc).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityWithCredentials" />
    /// </summary>
    public class KratosIdentityWithCredentialsJsonConverter : JsonConverter<KratosIdentityWithCredentials>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityWithCredentials" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityWithCredentials Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosIdentityWithCredentialsOidc?> oidc = default;
            Option<KratosIdentityWithCredentialsPassword?> password = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "oidc":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                oidc = new Option<KratosIdentityWithCredentialsOidc?>(JsonSerializer.Deserialize<KratosIdentityWithCredentialsOidc>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "password":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                password = new Option<KratosIdentityWithCredentialsPassword?>(JsonSerializer.Deserialize<KratosIdentityWithCredentialsPassword>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (oidc.IsSet && oidc.Value == null)
                throw new ArgumentNullException(nameof(oidc), "Property is not nullable for class KratosIdentityWithCredentials.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class KratosIdentityWithCredentials.");

            return new KratosIdentityWithCredentials(oidc, password);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityWithCredentials" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityWithCredentials"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityWithCredentials kratosIdentityWithCredentials, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityWithCredentials, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityWithCredentials" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityWithCredentials"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityWithCredentials kratosIdentityWithCredentials, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityWithCredentials.OidcOption.IsSet && kratosIdentityWithCredentials.Oidc == null)
                throw new ArgumentNullException(nameof(kratosIdentityWithCredentials.Oidc), "Property is required for class KratosIdentityWithCredentials.");

            if (kratosIdentityWithCredentials.PasswordOption.IsSet && kratosIdentityWithCredentials.Password == null)
                throw new ArgumentNullException(nameof(kratosIdentityWithCredentials.Password), "Property is required for class KratosIdentityWithCredentials.");

            if (kratosIdentityWithCredentials.OidcOption.IsSet)
            {
                writer.WritePropertyName("oidc");
                JsonSerializer.Serialize(writer, kratosIdentityWithCredentials.Oidc, jsonSerializerOptions);
            }
            if (kratosIdentityWithCredentials.PasswordOption.IsSet)
            {
                writer.WritePropertyName("password");
                JsonSerializer.Serialize(writer, kratosIdentityWithCredentials.Password, jsonSerializerOptions);
            }
        }
    }
}
