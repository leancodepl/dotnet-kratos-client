// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Login Flow with Lookup Secret Method
    /// </summary>
    public partial class KratosUpdateLoginFlowWithLookupSecretMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowWithLookupSecretMethod" /> class.
        /// </summary>
        /// <param name="lookupSecret">The lookup secret.</param>
        /// <param name="method">Method should be set to \&quot;lookup_secret\&quot; when logging in using the lookup_secret strategy.</param>
        /// <param name="csrfToken">Sending the anti-csrf token is only required for browser login flows.</param>
        [JsonConstructor]
        public KratosUpdateLoginFlowWithLookupSecretMethod(string lookupSecret, string method, Option<string?> csrfToken = default)
        {
            LookupSecret = lookupSecret;
            Method = method;
            CsrfTokenOption = csrfToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The lookup secret.
        /// </summary>
        /// <value>The lookup secret.</value>
        [JsonPropertyName("lookup_secret")]
        public string LookupSecret { get; set; }

        /// <summary>
        /// Method should be set to \&quot;lookup_secret\&quot; when logging in using the lookup_secret strategy.
        /// </summary>
        /// <value>Method should be set to \&quot;lookup_secret\&quot; when logging in using the lookup_secret strategy.</value>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// Sending the anti-csrf token is only required for browser login flows.
        /// </summary>
        /// <value>Sending the anti-csrf token is only required for browser login flows.</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateLoginFlowWithLookupSecretMethod {\n");
            sb.Append("  LookupSecret: ").Append(LookupSecret).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateLoginFlowWithLookupSecretMethod" />
    /// </summary>
    public class KratosUpdateLoginFlowWithLookupSecretMethodJsonConverter : JsonConverter<KratosUpdateLoginFlowWithLookupSecretMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateLoginFlowWithLookupSecretMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateLoginFlowWithLookupSecretMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> lookupSecret = default;
            Option<string?> method = default;
            Option<string?> csrfToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "lookup_secret":
                            lookupSecret = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!lookupSecret.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateLoginFlowWithLookupSecretMethod.", nameof(lookupSecret));

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateLoginFlowWithLookupSecretMethod.", nameof(method));

            if (lookupSecret.IsSet && lookupSecret.Value == null)
                throw new ArgumentNullException(nameof(lookupSecret), "Property is not nullable for class KratosUpdateLoginFlowWithLookupSecretMethod.");

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateLoginFlowWithLookupSecretMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateLoginFlowWithLookupSecretMethod.");

            return new KratosUpdateLoginFlowWithLookupSecretMethod(lookupSecret.Value!, method.Value!, csrfToken);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateLoginFlowWithLookupSecretMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowWithLookupSecretMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateLoginFlowWithLookupSecretMethod kratosUpdateLoginFlowWithLookupSecretMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateLoginFlowWithLookupSecretMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateLoginFlowWithLookupSecretMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowWithLookupSecretMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateLoginFlowWithLookupSecretMethod kratosUpdateLoginFlowWithLookupSecretMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateLoginFlowWithLookupSecretMethod.LookupSecret == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithLookupSecretMethod.LookupSecret), "Property is required for class KratosUpdateLoginFlowWithLookupSecretMethod.");

            if (kratosUpdateLoginFlowWithLookupSecretMethod.Method == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithLookupSecretMethod.Method), "Property is required for class KratosUpdateLoginFlowWithLookupSecretMethod.");

            if (kratosUpdateLoginFlowWithLookupSecretMethod.CsrfTokenOption.IsSet && kratosUpdateLoginFlowWithLookupSecretMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithLookupSecretMethod.CsrfToken), "Property is required for class KratosUpdateLoginFlowWithLookupSecretMethod.");

            writer.WriteString("lookup_secret", kratosUpdateLoginFlowWithLookupSecretMethod.LookupSecret);

            writer.WriteString("method", kratosUpdateLoginFlowWithLookupSecretMethod.Method);

            if (kratosUpdateLoginFlowWithLookupSecretMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateLoginFlowWithLookupSecretMethod.CsrfToken);
        }
    }
}
