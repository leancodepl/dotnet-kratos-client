// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosContinueWithRecoveryUiFlow
    /// </summary>
    public partial class KratosContinueWithRecoveryUiFlow
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithRecoveryUiFlow" /> class.
        /// </summary>
        /// <param name="id">The ID of the recovery flow</param>
        /// <param name="url">The URL of the recovery flow</param>
        [JsonConstructor]
        public KratosContinueWithRecoveryUiFlow(string id, Option<string?> url = default)
        {
            Id = id;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID of the recovery flow
        /// </summary>
        /// <value>The ID of the recovery flow</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// The URL of the recovery flow
        /// </summary>
        /// <value>The URL of the recovery flow</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWithRecoveryUiFlow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosContinueWithRecoveryUiFlow" />
    /// </summary>
    public class KratosContinueWithRecoveryUiFlowJsonConverter : JsonConverter<KratosContinueWithRecoveryUiFlow>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosContinueWithRecoveryUiFlow" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosContinueWithRecoveryUiFlow Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithRecoveryUiFlow.", nameof(id));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosContinueWithRecoveryUiFlow.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class KratosContinueWithRecoveryUiFlow.");

            return new KratosContinueWithRecoveryUiFlow(id.Value!, url);
        }

        /// <summary>
        /// Serializes a <see cref="KratosContinueWithRecoveryUiFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithRecoveryUiFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosContinueWithRecoveryUiFlow kratosContinueWithRecoveryUiFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosContinueWithRecoveryUiFlow, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosContinueWithRecoveryUiFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithRecoveryUiFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosContinueWithRecoveryUiFlow kratosContinueWithRecoveryUiFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosContinueWithRecoveryUiFlow.Id == null)
                throw new ArgumentNullException(nameof(kratosContinueWithRecoveryUiFlow.Id), "Property is required for class KratosContinueWithRecoveryUiFlow.");

            if (kratosContinueWithRecoveryUiFlow.UrlOption.IsSet && kratosContinueWithRecoveryUiFlow.Url == null)
                throw new ArgumentNullException(nameof(kratosContinueWithRecoveryUiFlow.Url), "Property is required for class KratosContinueWithRecoveryUiFlow.");

            writer.WriteString("id", kratosContinueWithRecoveryUiFlow.Id);

            if (kratosContinueWithRecoveryUiFlow.UrlOption.IsSet)
                writer.WriteString("url", kratosContinueWithRecoveryUiFlow.Url);
        }
    }
}
