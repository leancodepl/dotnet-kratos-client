// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Indicates, that the UI flow could be continued by showing a recovery ui
    /// </summary>
    public partial class KratosContinueWithRecoveryUi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithRecoveryUi" /> class.
        /// </summary>
        /// <param name="action">Action will always be &#x60;show_recovery_ui&#x60; show_recovery_ui ContinueWithActionShowRecoveryUIString</param>
        /// <param name="flow">flow</param>
        [JsonConstructor]
        public KratosContinueWithRecoveryUi(ActionEnum action, KratosContinueWithRecoveryUiFlow flow)
        {
            Action = action;
            Flow = flow;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Action will always be &#x60;show_recovery_ui&#x60; show_recovery_ui ContinueWithActionShowRecoveryUIString
        /// </summary>
        /// <value>Action will always be &#x60;show_recovery_ui&#x60; show_recovery_ui ContinueWithActionShowRecoveryUIString</value>
        public enum ActionEnum
        {
            /// <summary>
            /// Enum ShowRecoveryUi for value: show_recovery_ui
            /// </summary>
            ShowRecoveryUi
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ActionEnum ActionEnumFromString(string value)
        {
            if (value.Equals("show_recovery_ui"))
                return ActionEnum.ShowRecoveryUi;

            throw new NotImplementedException($"Could not convert value to type ActionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ActionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ActionEnum? ActionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("show_recovery_ui"))
                return ActionEnum.ShowRecoveryUi;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ActionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ActionEnumToJsonValue(ActionEnum value)
        {
            if (value == ActionEnum.ShowRecoveryUi)
                return "show_recovery_ui";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Action will always be &#x60;show_recovery_ui&#x60; show_recovery_ui ContinueWithActionShowRecoveryUIString
        /// </summary>
        /// <value>Action will always be &#x60;show_recovery_ui&#x60; show_recovery_ui ContinueWithActionShowRecoveryUIString</value>
        [JsonPropertyName("action")]
        public ActionEnum Action { get; set; }

        /// <summary>
        /// Gets or Sets Flow
        /// </summary>
        [JsonPropertyName("flow")]
        public KratosContinueWithRecoveryUiFlow Flow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWithRecoveryUi {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Flow: ").Append(Flow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosContinueWithRecoveryUi" />
    /// </summary>
    public class KratosContinueWithRecoveryUiJsonConverter : JsonConverter<KratosContinueWithRecoveryUi>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosContinueWithRecoveryUi" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosContinueWithRecoveryUi Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosContinueWithRecoveryUi.ActionEnum?> action = default;
            Option<KratosContinueWithRecoveryUiFlow?> flow = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "action":
                            string? actionRawValue = utf8JsonReader.GetString();
                            if (actionRawValue != null)
                                action = new Option<KratosContinueWithRecoveryUi.ActionEnum?>(KratosContinueWithRecoveryUi.ActionEnumFromStringOrDefault(actionRawValue));
                            break;
                        case "flow":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                flow = new Option<KratosContinueWithRecoveryUiFlow?>(JsonSerializer.Deserialize<KratosContinueWithRecoveryUiFlow>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!action.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithRecoveryUi.", nameof(action));

            if (!flow.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithRecoveryUi.", nameof(flow));

            if (action.IsSet && action.Value == null)
                throw new ArgumentNullException(nameof(action), "Property is not nullable for class KratosContinueWithRecoveryUi.");

            if (flow.IsSet && flow.Value == null)
                throw new ArgumentNullException(nameof(flow), "Property is not nullable for class KratosContinueWithRecoveryUi.");

            return new KratosContinueWithRecoveryUi(action.Value!.Value!, flow.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="KratosContinueWithRecoveryUi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithRecoveryUi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosContinueWithRecoveryUi kratosContinueWithRecoveryUi, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosContinueWithRecoveryUi, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosContinueWithRecoveryUi" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithRecoveryUi"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosContinueWithRecoveryUi kratosContinueWithRecoveryUi, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosContinueWithRecoveryUi.Flow == null)
                throw new ArgumentNullException(nameof(kratosContinueWithRecoveryUi.Flow), "Property is required for class KratosContinueWithRecoveryUi.");

            var actionRawValue = KratosContinueWithRecoveryUi.ActionEnumToJsonValue(kratosContinueWithRecoveryUi.Action);
            writer.WriteString("action", actionRawValue);
            writer.WritePropertyName("flow");
            JsonSerializer.Serialize(writer, kratosContinueWithRecoveryUi.Flow, jsonSerializerOptions);
        }
    }
}
