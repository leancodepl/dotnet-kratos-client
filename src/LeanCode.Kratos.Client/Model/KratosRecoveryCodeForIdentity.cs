// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Used when an administrator creates a recovery code for an identity.
    /// </summary>
    public partial class KratosRecoveryCodeForIdentity
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosRecoveryCodeForIdentity" /> class.
        /// </summary>
        /// <param name="recoveryCode">RecoveryCode is the code that can be used to recover the account</param>
        /// <param name="recoveryLink">RecoveryLink with flow  This link opens the recovery UI with an empty &#x60;code&#x60; field.</param>
        /// <param name="expiresAt">Expires At is the timestamp of when the recovery flow expires  The timestamp when the recovery code expires.</param>
        [JsonConstructor]
        public KratosRecoveryCodeForIdentity(string recoveryCode, string recoveryLink, Option<DateTime?> expiresAt = default)
        {
            RecoveryCode = recoveryCode;
            RecoveryLink = recoveryLink;
            ExpiresAtOption = expiresAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// RecoveryCode is the code that can be used to recover the account
        /// </summary>
        /// <value>RecoveryCode is the code that can be used to recover the account</value>
        [JsonPropertyName("recovery_code")]
        public string RecoveryCode { get; set; }

        /// <summary>
        /// RecoveryLink with flow  This link opens the recovery UI with an empty &#x60;code&#x60; field.
        /// </summary>
        /// <value>RecoveryLink with flow  This link opens the recovery UI with an empty &#x60;code&#x60; field.</value>
        [JsonPropertyName("recovery_link")]
        public string RecoveryLink { get; set; }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// Expires At is the timestamp of when the recovery flow expires  The timestamp when the recovery code expires.
        /// </summary>
        /// <value>Expires At is the timestamp of when the recovery flow expires  The timestamp when the recovery code expires.</value>
        [JsonPropertyName("expires_at")]
        public DateTime? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosRecoveryCodeForIdentity {\n");
            sb.Append("  RecoveryCode: ").Append(RecoveryCode).Append("\n");
            sb.Append("  RecoveryLink: ").Append(RecoveryLink).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosRecoveryCodeForIdentity" />
    /// </summary>
    public class KratosRecoveryCodeForIdentityJsonConverter : JsonConverter<KratosRecoveryCodeForIdentity>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosRecoveryCodeForIdentity" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosRecoveryCodeForIdentity Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> recoveryCode = default;
            Option<string?> recoveryLink = default;
            Option<DateTime?> expiresAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "recovery_code":
                            recoveryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "recovery_link":
                            recoveryLink = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!recoveryCode.IsSet)
                throw new ArgumentException("Property is required for class KratosRecoveryCodeForIdentity.", nameof(recoveryCode));

            if (!recoveryLink.IsSet)
                throw new ArgumentException("Property is required for class KratosRecoveryCodeForIdentity.", nameof(recoveryLink));

            if (recoveryCode.IsSet && recoveryCode.Value == null)
                throw new ArgumentNullException(nameof(recoveryCode), "Property is not nullable for class KratosRecoveryCodeForIdentity.");

            if (recoveryLink.IsSet && recoveryLink.Value == null)
                throw new ArgumentNullException(nameof(recoveryLink), "Property is not nullable for class KratosRecoveryCodeForIdentity.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class KratosRecoveryCodeForIdentity.");

            return new KratosRecoveryCodeForIdentity(recoveryCode.Value!, recoveryLink.Value!, expiresAt);
        }

        /// <summary>
        /// Serializes a <see cref="KratosRecoveryCodeForIdentity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosRecoveryCodeForIdentity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosRecoveryCodeForIdentity kratosRecoveryCodeForIdentity, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosRecoveryCodeForIdentity, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosRecoveryCodeForIdentity" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosRecoveryCodeForIdentity"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosRecoveryCodeForIdentity kratosRecoveryCodeForIdentity, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosRecoveryCodeForIdentity.RecoveryCode == null)
                throw new ArgumentNullException(nameof(kratosRecoveryCodeForIdentity.RecoveryCode), "Property is required for class KratosRecoveryCodeForIdentity.");

            if (kratosRecoveryCodeForIdentity.RecoveryLink == null)
                throw new ArgumentNullException(nameof(kratosRecoveryCodeForIdentity.RecoveryLink), "Property is required for class KratosRecoveryCodeForIdentity.");

            writer.WriteString("recovery_code", kratosRecoveryCodeForIdentity.RecoveryCode);

            writer.WriteString("recovery_link", kratosRecoveryCodeForIdentity.RecoveryLink);

            if (kratosRecoveryCodeForIdentity.ExpiresAtOption.IsSet)
                writer.WriteString("expires_at", kratosRecoveryCodeForIdentity.ExpiresAtOption.Value!.Value.ToString(ExpiresAtFormat));
        }
    }
}
