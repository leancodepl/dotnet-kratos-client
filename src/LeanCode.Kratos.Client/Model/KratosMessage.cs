// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosMessage
    /// </summary>
    public partial class KratosMessage
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosMessage" /> class.
        /// </summary>
        /// <param name="body">body</param>
        /// <param name="createdAt">CreatedAt is a helper struct field for gobuffalo.pop.</param>
        /// <param name="id">id</param>
        /// <param name="recipient">recipient</param>
        /// <param name="sendCount">sendCount</param>
        /// <param name="status">status</param>
        /// <param name="subject">subject</param>
        /// <param name="templateType"> recovery_invalid TypeRecoveryInvalid recovery_valid TypeRecoveryValid recovery_code_invalid TypeRecoveryCodeInvalid recovery_code_valid TypeRecoveryCodeValid verification_invalid TypeVerificationInvalid verification_valid TypeVerificationValid verification_code_invalid TypeVerificationCodeInvalid verification_code_valid TypeVerificationCodeValid stub TypeTestStub login_code_valid TypeLoginCodeValid registration_code_valid TypeRegistrationCodeValid</param>
        /// <param name="type">type</param>
        /// <param name="updatedAt">UpdatedAt is a helper struct field for gobuffalo.pop.</param>
        /// <param name="channel">channel</param>
        /// <param name="dispatches">Dispatches store information about the attempts of delivering a message May contain an error if any happened, or just the &#x60;success&#x60; state.</param>
        [JsonConstructor]
        public KratosMessage(string body, DateTime createdAt, string id, string recipient, long sendCount, KratosCourierMessageStatus status, string subject, TemplateTypeEnum templateType, KratosCourierMessageType type, DateTime updatedAt, Option<string?> channel = default, Option<List<KratosMessageDispatch>?> dispatches = default)
        {
            Body = body;
            CreatedAt = createdAt;
            Id = id;
            Recipient = recipient;
            SendCount = sendCount;
            Status = status;
            Subject = subject;
            TemplateType = templateType;
            Type = type;
            UpdatedAt = updatedAt;
            ChannelOption = channel;
            DispatchesOption = dispatches;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public KratosCourierMessageStatus Status { get; set; }

        /// <summary>
        ///  recovery_invalid TypeRecoveryInvalid recovery_valid TypeRecoveryValid recovery_code_invalid TypeRecoveryCodeInvalid recovery_code_valid TypeRecoveryCodeValid verification_invalid TypeVerificationInvalid verification_valid TypeVerificationValid verification_code_invalid TypeVerificationCodeInvalid verification_code_valid TypeVerificationCodeValid stub TypeTestStub login_code_valid TypeLoginCodeValid registration_code_valid TypeRegistrationCodeValid
        /// </summary>
        /// <value> recovery_invalid TypeRecoveryInvalid recovery_valid TypeRecoveryValid recovery_code_invalid TypeRecoveryCodeInvalid recovery_code_valid TypeRecoveryCodeValid verification_invalid TypeVerificationInvalid verification_valid TypeVerificationValid verification_code_invalid TypeVerificationCodeInvalid verification_code_valid TypeVerificationCodeValid stub TypeTestStub login_code_valid TypeLoginCodeValid registration_code_valid TypeRegistrationCodeValid</value>
        public enum TemplateTypeEnum
        {
            /// <summary>
            /// Enum RecoveryInvalid for value: recovery_invalid
            /// </summary>
            RecoveryInvalid,

            /// <summary>
            /// Enum RecoveryValid for value: recovery_valid
            /// </summary>
            RecoveryValid,

            /// <summary>
            /// Enum RecoveryCodeInvalid for value: recovery_code_invalid
            /// </summary>
            RecoveryCodeInvalid,

            /// <summary>
            /// Enum RecoveryCodeValid for value: recovery_code_valid
            /// </summary>
            RecoveryCodeValid,

            /// <summary>
            /// Enum VerificationInvalid for value: verification_invalid
            /// </summary>
            VerificationInvalid,

            /// <summary>
            /// Enum VerificationValid for value: verification_valid
            /// </summary>
            VerificationValid,

            /// <summary>
            /// Enum VerificationCodeInvalid for value: verification_code_invalid
            /// </summary>
            VerificationCodeInvalid,

            /// <summary>
            /// Enum VerificationCodeValid for value: verification_code_valid
            /// </summary>
            VerificationCodeValid,

            /// <summary>
            /// Enum Stub for value: stub
            /// </summary>
            Stub,

            /// <summary>
            /// Enum LoginCodeValid for value: login_code_valid
            /// </summary>
            LoginCodeValid,

            /// <summary>
            /// Enum RegistrationCodeValid for value: registration_code_valid
            /// </summary>
            RegistrationCodeValid
        }

        /// <summary>
        /// Returns a <see cref="TemplateTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TemplateTypeEnum TemplateTypeEnumFromString(string value)
        {
            if (value.Equals("recovery_invalid"))
                return TemplateTypeEnum.RecoveryInvalid;

            if (value.Equals("recovery_valid"))
                return TemplateTypeEnum.RecoveryValid;

            if (value.Equals("recovery_code_invalid"))
                return TemplateTypeEnum.RecoveryCodeInvalid;

            if (value.Equals("recovery_code_valid"))
                return TemplateTypeEnum.RecoveryCodeValid;

            if (value.Equals("verification_invalid"))
                return TemplateTypeEnum.VerificationInvalid;

            if (value.Equals("verification_valid"))
                return TemplateTypeEnum.VerificationValid;

            if (value.Equals("verification_code_invalid"))
                return TemplateTypeEnum.VerificationCodeInvalid;

            if (value.Equals("verification_code_valid"))
                return TemplateTypeEnum.VerificationCodeValid;

            if (value.Equals("stub"))
                return TemplateTypeEnum.Stub;

            if (value.Equals("login_code_valid"))
                return TemplateTypeEnum.LoginCodeValid;

            if (value.Equals("registration_code_valid"))
                return TemplateTypeEnum.RegistrationCodeValid;

            throw new NotImplementedException($"Could not convert value to type TemplateTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TemplateTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TemplateTypeEnum? TemplateTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("recovery_invalid"))
                return TemplateTypeEnum.RecoveryInvalid;

            if (value.Equals("recovery_valid"))
                return TemplateTypeEnum.RecoveryValid;

            if (value.Equals("recovery_code_invalid"))
                return TemplateTypeEnum.RecoveryCodeInvalid;

            if (value.Equals("recovery_code_valid"))
                return TemplateTypeEnum.RecoveryCodeValid;

            if (value.Equals("verification_invalid"))
                return TemplateTypeEnum.VerificationInvalid;

            if (value.Equals("verification_valid"))
                return TemplateTypeEnum.VerificationValid;

            if (value.Equals("verification_code_invalid"))
                return TemplateTypeEnum.VerificationCodeInvalid;

            if (value.Equals("verification_code_valid"))
                return TemplateTypeEnum.VerificationCodeValid;

            if (value.Equals("stub"))
                return TemplateTypeEnum.Stub;

            if (value.Equals("login_code_valid"))
                return TemplateTypeEnum.LoginCodeValid;

            if (value.Equals("registration_code_valid"))
                return TemplateTypeEnum.RegistrationCodeValid;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TemplateTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TemplateTypeEnumToJsonValue(TemplateTypeEnum value)
        {
            if (value == TemplateTypeEnum.RecoveryInvalid)
                return "recovery_invalid";

            if (value == TemplateTypeEnum.RecoveryValid)
                return "recovery_valid";

            if (value == TemplateTypeEnum.RecoveryCodeInvalid)
                return "recovery_code_invalid";

            if (value == TemplateTypeEnum.RecoveryCodeValid)
                return "recovery_code_valid";

            if (value == TemplateTypeEnum.VerificationInvalid)
                return "verification_invalid";

            if (value == TemplateTypeEnum.VerificationValid)
                return "verification_valid";

            if (value == TemplateTypeEnum.VerificationCodeInvalid)
                return "verification_code_invalid";

            if (value == TemplateTypeEnum.VerificationCodeValid)
                return "verification_code_valid";

            if (value == TemplateTypeEnum.Stub)
                return "stub";

            if (value == TemplateTypeEnum.LoginCodeValid)
                return "login_code_valid";

            if (value == TemplateTypeEnum.RegistrationCodeValid)
                return "registration_code_valid";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        ///  recovery_invalid TypeRecoveryInvalid recovery_valid TypeRecoveryValid recovery_code_invalid TypeRecoveryCodeInvalid recovery_code_valid TypeRecoveryCodeValid verification_invalid TypeVerificationInvalid verification_valid TypeVerificationValid verification_code_invalid TypeVerificationCodeInvalid verification_code_valid TypeVerificationCodeValid stub TypeTestStub login_code_valid TypeLoginCodeValid registration_code_valid TypeRegistrationCodeValid
        /// </summary>
        /// <value> recovery_invalid TypeRecoveryInvalid recovery_valid TypeRecoveryValid recovery_code_invalid TypeRecoveryCodeInvalid recovery_code_valid TypeRecoveryCodeValid verification_invalid TypeVerificationInvalid verification_valid TypeVerificationValid verification_code_invalid TypeVerificationCodeInvalid verification_code_valid TypeVerificationCodeValid stub TypeTestStub login_code_valid TypeLoginCodeValid registration_code_valid TypeRegistrationCodeValid</value>
        [JsonPropertyName("template_type")]
        public TemplateTypeEnum TemplateType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public KratosCourierMessageType Type { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [JsonPropertyName("body")]
        public string Body { get; set; }

        /// <summary>
        /// CreatedAt is a helper struct field for gobuffalo.pop.
        /// </summary>
        /// <value>CreatedAt is a helper struct field for gobuffalo.pop.</value>
        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Recipient
        /// </summary>
        [JsonPropertyName("recipient")]
        public string Recipient { get; set; }

        /// <summary>
        /// Gets or Sets SendCount
        /// </summary>
        [JsonPropertyName("send_count")]
        public long SendCount { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string Subject { get; set; }

        /// <summary>
        /// UpdatedAt is a helper struct field for gobuffalo.pop.
        /// </summary>
        /// <value>UpdatedAt is a helper struct field for gobuffalo.pop.</value>
        [JsonPropertyName("updated_at")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Channel
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChannelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [JsonPropertyName("channel")]
        public string? Channel { get { return this.ChannelOption; } set { this.ChannelOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dispatches
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosMessageDispatch>?> DispatchesOption { get; private set; }

        /// <summary>
        /// Dispatches store information about the attempts of delivering a message May contain an error if any happened, or just the &#x60;success&#x60; state.
        /// </summary>
        /// <value>Dispatches store information about the attempts of delivering a message May contain an error if any happened, or just the &#x60;success&#x60; state.</value>
        [JsonPropertyName("dispatches")]
        public List<KratosMessageDispatch>? Dispatches { get { return this.DispatchesOption; } set { this.DispatchesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosMessage {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  SendCount: ").Append(SendCount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TemplateType: ").Append(TemplateType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Dispatches: ").Append(Dispatches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosMessage" />
    /// </summary>
    public class KratosMessageJsonConverter : JsonConverter<KratosMessage>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosMessage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosMessage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> body = default;
            Option<DateTime?> createdAt = default;
            Option<string?> id = default;
            Option<string?> recipient = default;
            Option<long?> sendCount = default;
            Option<KratosCourierMessageStatus?> status = default;
            Option<string?> subject = default;
            Option<KratosMessage.TemplateTypeEnum?> templateType = default;
            Option<KratosCourierMessageType?> type = default;
            Option<DateTime?> updatedAt = default;
            Option<string?> channel = default;
            Option<List<KratosMessageDispatch>?> dispatches = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "created_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "recipient":
                            recipient = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "send_count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sendCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<KratosCourierMessageStatus?>(KratosCourierMessageStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "template_type":
                            string? templateTypeRawValue = utf8JsonReader.GetString();
                            if (templateTypeRawValue != null)
                                templateType = new Option<KratosMessage.TemplateTypeEnum?>(KratosMessage.TemplateTypeEnumFromStringOrDefault(templateTypeRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<KratosCourierMessageType?>(KratosCourierMessageTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "updated_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "channel":
                            channel = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dispatches":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dispatches = new Option<List<KratosMessageDispatch>?>(JsonSerializer.Deserialize<List<KratosMessageDispatch>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!body.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(body));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(id));

            if (!recipient.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(recipient));

            if (!sendCount.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(sendCount));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(status));

            if (!subject.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(subject));

            if (!templateType.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(templateType));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(type));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class KratosMessage.", nameof(updatedAt));

            if (body.IsSet && body.Value == null)
                throw new ArgumentNullException(nameof(body), "Property is not nullable for class KratosMessage.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class KratosMessage.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosMessage.");

            if (recipient.IsSet && recipient.Value == null)
                throw new ArgumentNullException(nameof(recipient), "Property is not nullable for class KratosMessage.");

            if (sendCount.IsSet && sendCount.Value == null)
                throw new ArgumentNullException(nameof(sendCount), "Property is not nullable for class KratosMessage.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class KratosMessage.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class KratosMessage.");

            if (templateType.IsSet && templateType.Value == null)
                throw new ArgumentNullException(nameof(templateType), "Property is not nullable for class KratosMessage.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class KratosMessage.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class KratosMessage.");

            if (channel.IsSet && channel.Value == null)
                throw new ArgumentNullException(nameof(channel), "Property is not nullable for class KratosMessage.");

            if (dispatches.IsSet && dispatches.Value == null)
                throw new ArgumentNullException(nameof(dispatches), "Property is not nullable for class KratosMessage.");

            return new KratosMessage(body.Value!, createdAt.Value!.Value!, id.Value!, recipient.Value!, sendCount.Value!.Value!, status.Value!.Value!, subject.Value!, templateType.Value!.Value!, type.Value!.Value!, updatedAt.Value!.Value!, channel, dispatches);
        }

        /// <summary>
        /// Serializes a <see cref="KratosMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosMessage kratosMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosMessage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosMessage kratosMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosMessage.Body == null)
                throw new ArgumentNullException(nameof(kratosMessage.Body), "Property is required for class KratosMessage.");

            if (kratosMessage.Id == null)
                throw new ArgumentNullException(nameof(kratosMessage.Id), "Property is required for class KratosMessage.");

            if (kratosMessage.Recipient == null)
                throw new ArgumentNullException(nameof(kratosMessage.Recipient), "Property is required for class KratosMessage.");

            if (kratosMessage.Subject == null)
                throw new ArgumentNullException(nameof(kratosMessage.Subject), "Property is required for class KratosMessage.");

            if (kratosMessage.ChannelOption.IsSet && kratosMessage.Channel == null)
                throw new ArgumentNullException(nameof(kratosMessage.Channel), "Property is required for class KratosMessage.");

            if (kratosMessage.DispatchesOption.IsSet && kratosMessage.Dispatches == null)
                throw new ArgumentNullException(nameof(kratosMessage.Dispatches), "Property is required for class KratosMessage.");

            writer.WriteString("body", kratosMessage.Body);

            writer.WriteString("created_at", kratosMessage.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("id", kratosMessage.Id);

            writer.WriteString("recipient", kratosMessage.Recipient);

            writer.WriteNumber("send_count", kratosMessage.SendCount);

            var statusRawValue = KratosCourierMessageStatusValueConverter.ToJsonValue(kratosMessage.Status);
            writer.WriteString("status", statusRawValue);

            writer.WriteString("subject", kratosMessage.Subject);

            var templateTypeRawValue = KratosMessage.TemplateTypeEnumToJsonValue(kratosMessage.TemplateType);
            writer.WriteString("template_type", templateTypeRawValue);
            var typeRawValue = KratosCourierMessageTypeValueConverter.ToJsonValue(kratosMessage.Type);
            writer.WriteString("type", typeRawValue);

            writer.WriteString("updated_at", kratosMessage.UpdatedAt.ToString(UpdatedAtFormat));

            if (kratosMessage.ChannelOption.IsSet)
                writer.WriteString("channel", kratosMessage.Channel);

            if (kratosMessage.DispatchesOption.IsSet)
            {
                writer.WritePropertyName("dispatches");
                JsonSerializer.Serialize(writer, kratosMessage.Dispatches, jsonSerializerOptions);
            }
        }
    }
}
