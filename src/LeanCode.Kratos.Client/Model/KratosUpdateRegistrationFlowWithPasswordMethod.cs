// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Registration Flow with Password Method
    /// </summary>
    public partial class KratosUpdateRegistrationFlowWithPasswordMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateRegistrationFlowWithPasswordMethod" /> class.
        /// </summary>
        /// <param name="method">Method to use  This field must be set to &#x60;password&#x60; when using the password method.</param>
        /// <param name="password">Password to sign the user up with</param>
        /// <param name="traits">The identity&#39;s traits</param>
        /// <param name="csrfToken">The CSRF Token</param>
        /// <param name="transientPayload">Transient data to pass along to any webhooks</param>
        [JsonConstructor]
        public KratosUpdateRegistrationFlowWithPasswordMethod(string method, string password, Object traits, Option<string?> csrfToken = default, Option<Object?> transientPayload = default)
        {
            Method = method;
            Password = password;
            Traits = traits;
            CsrfTokenOption = csrfToken;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method to use  This field must be set to &#x60;password&#x60; when using the password method.
        /// </summary>
        /// <value>Method to use  This field must be set to &#x60;password&#x60; when using the password method.</value>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// Password to sign the user up with
        /// </summary>
        /// <value>Password to sign the user up with</value>
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// The identity&#39;s traits
        /// </summary>
        /// <value>The identity&#39;s traits</value>
        [JsonPropertyName("traits")]
        public Object Traits { get; set; }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// The CSRF Token
        /// </summary>
        /// <value>The CSRF Token</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// Transient data to pass along to any webhooks
        /// </summary>
        /// <value>Transient data to pass along to any webhooks</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateRegistrationFlowWithPasswordMethod {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Traits: ").Append(Traits).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateRegistrationFlowWithPasswordMethod" />
    /// </summary>
    public class KratosUpdateRegistrationFlowWithPasswordMethodJsonConverter : JsonConverter<KratosUpdateRegistrationFlowWithPasswordMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateRegistrationFlowWithPasswordMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateRegistrationFlowWithPasswordMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> method = default;
            Option<string?> password = default;
            Option<Object?> traits = default;
            Option<string?> csrfToken = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "traits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                traits = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.", nameof(method));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.", nameof(password));

            if (!traits.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.", nameof(traits));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (traits.IsSet && traits.Value == null)
                throw new ArgumentNullException(nameof(traits), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            return new KratosUpdateRegistrationFlowWithPasswordMethod(method.Value!, password.Value!, traits.Value!, csrfToken, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateRegistrationFlowWithPasswordMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRegistrationFlowWithPasswordMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateRegistrationFlowWithPasswordMethod kratosUpdateRegistrationFlowWithPasswordMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateRegistrationFlowWithPasswordMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateRegistrationFlowWithPasswordMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRegistrationFlowWithPasswordMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateRegistrationFlowWithPasswordMethod kratosUpdateRegistrationFlowWithPasswordMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateRegistrationFlowWithPasswordMethod.Method == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasswordMethod.Method), "Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (kratosUpdateRegistrationFlowWithPasswordMethod.Password == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasswordMethod.Password), "Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (kratosUpdateRegistrationFlowWithPasswordMethod.Traits == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasswordMethod.Traits), "Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (kratosUpdateRegistrationFlowWithPasswordMethod.CsrfTokenOption.IsSet && kratosUpdateRegistrationFlowWithPasswordMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasswordMethod.CsrfToken), "Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            if (kratosUpdateRegistrationFlowWithPasswordMethod.TransientPayloadOption.IsSet && kratosUpdateRegistrationFlowWithPasswordMethod.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowWithPasswordMethod.TransientPayload), "Property is required for class KratosUpdateRegistrationFlowWithPasswordMethod.");

            writer.WriteString("method", kratosUpdateRegistrationFlowWithPasswordMethod.Method);

            writer.WriteString("password", kratosUpdateRegistrationFlowWithPasswordMethod.Password);

            writer.WritePropertyName("traits");
            JsonSerializer.Serialize(writer, kratosUpdateRegistrationFlowWithPasswordMethod.Traits, jsonSerializerOptions);
            if (kratosUpdateRegistrationFlowWithPasswordMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateRegistrationFlowWithPasswordMethod.CsrfToken);

            if (kratosUpdateRegistrationFlowWithPasswordMethod.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosUpdateRegistrationFlowWithPasswordMethod.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
