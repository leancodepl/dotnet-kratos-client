// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosIsAlive200Response
    /// </summary>
    public partial class KratosIsAlive200Response
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIsAlive200Response" /> class.
        /// </summary>
        /// <param name="status">Always \&quot;ok\&quot;.</param>
        [JsonConstructor]
        public KratosIsAlive200Response(string status)
        {
            Status = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Always \&quot;ok\&quot;.
        /// </summary>
        /// <value>Always \&quot;ok\&quot;.</value>
        [JsonPropertyName("status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIsAlive200Response {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIsAlive200Response" />
    /// </summary>
    public class KratosIsAlive200ResponseJsonConverter : JsonConverter<KratosIsAlive200Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIsAlive200Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIsAlive200Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class KratosIsAlive200Response.", nameof(status));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class KratosIsAlive200Response.");

            return new KratosIsAlive200Response(status.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIsAlive200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIsAlive200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIsAlive200Response kratosIsAlive200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIsAlive200Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIsAlive200Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIsAlive200Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIsAlive200Response kratosIsAlive200Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIsAlive200Response.Status == null)
                throw new ArgumentNullException(nameof(kratosIsAlive200Response.Status), "Property is required for class KratosIsAlive200Response.");

            writer.WriteString("status", kratosIsAlive200Response.Status);
        }
    }
}
