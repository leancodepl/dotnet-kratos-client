// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// OAuth2ConsentRequestOpenIDConnectContext struct for OAuth2ConsentRequestOpenIDConnectContext
    /// </summary>
    public partial class KratosOAuth2ConsentRequestOpenIDConnectContext
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosOAuth2ConsentRequestOpenIDConnectContext" /> class.
        /// </summary>
        /// <param name="acrValues">ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: &gt; Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.</param>
        /// <param name="display">Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \\\&quot;feature phone\\\&quot; type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.</param>
        /// <param name="idTokenHintClaims">IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User&#39;s current or past authenticated session with the Client.</param>
        /// <param name="loginHint">LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.</param>
        /// <param name="uiLocales">UILocales is the End-User&#39;id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \\\&quot;fr-CA fr en\\\&quot; represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.</param>
        [JsonConstructor]
        public KratosOAuth2ConsentRequestOpenIDConnectContext(Option<List<string>?> acrValues = default, Option<string?> display = default, Option<Dictionary<string, Object>?> idTokenHintClaims = default, Option<string?> loginHint = default, Option<List<string>?> uiLocales = default)
        {
            AcrValuesOption = acrValues;
            DisplayOption = display;
            IdTokenHintClaimsOption = idTokenHintClaims;
            LoginHintOption = loginHint;
            UiLocalesOption = uiLocales;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AcrValues
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> AcrValuesOption { get; private set; }

        /// <summary>
        /// ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: &gt; Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.
        /// </summary>
        /// <value>ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: &gt; Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter.</value>
        [JsonPropertyName("acr_values")]
        public List<string>? AcrValues { get { return this.AcrValuesOption; } set { this.AcrValuesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Display
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayOption { get; private set; }

        /// <summary>
        /// Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \\\&quot;feature phone\\\&quot; type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.
        /// </summary>
        /// <value>Display is a string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. wap: The Authorization Server SHOULD display the authentication and consent UI consistent with a \\\&quot;feature phone\\\&quot; type display.  The Authorization Server MAY also attempt to detect the capabilities of the User Agent and present an appropriate display.</value>
        [JsonPropertyName("display")]
        public string? Display { get { return this.DisplayOption; } set { this.DisplayOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdTokenHintClaims
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> IdTokenHintClaimsOption { get; private set; }

        /// <summary>
        /// IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User&#39;s current or past authenticated session with the Client.
        /// </summary>
        /// <value>IDTokenHintClaims are the claims of the ID Token previously issued by the Authorization Server being passed as a hint about the End-User&#39;s current or past authenticated session with the Client.</value>
        [JsonPropertyName("id_token_hint_claims")]
        public Dictionary<string, Object>? IdTokenHintClaims { get { return this.IdTokenHintClaimsOption; } set { this.IdTokenHintClaimsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoginHint
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LoginHintOption { get; private set; }

        /// <summary>
        /// LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.
        /// </summary>
        /// <value>LoginHint hints about the login identifier the End-User might use to log in (if necessary). This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. This value MAY also be a phone number in the format specified for the phone_number Claim. The use of this parameter is optional.</value>
        [JsonPropertyName("login_hint")]
        public string? LoginHint { get { return this.LoginHintOption; } set { this.LoginHintOption = new(value); } }

        /// <summary>
        /// Used to track the state of UiLocales
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> UiLocalesOption { get; private set; }

        /// <summary>
        /// UILocales is the End-User&#39;id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \\\&quot;fr-CA fr en\\\&quot; represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.
        /// </summary>
        /// <value>UILocales is the End-User&#39;id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \\\&quot;fr-CA fr en\\\&quot; represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider.</value>
        [JsonPropertyName("ui_locales")]
        public List<string>? UiLocales { get { return this.UiLocalesOption; } set { this.UiLocalesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosOAuth2ConsentRequestOpenIDConnectContext {\n");
            sb.Append("  AcrValues: ").Append(AcrValues).Append("\n");
            sb.Append("  Display: ").Append(Display).Append("\n");
            sb.Append("  IdTokenHintClaims: ").Append(IdTokenHintClaims).Append("\n");
            sb.Append("  LoginHint: ").Append(LoginHint).Append("\n");
            sb.Append("  UiLocales: ").Append(UiLocales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosOAuth2ConsentRequestOpenIDConnectContext" />
    /// </summary>
    public class KratosOAuth2ConsentRequestOpenIDConnectContextJsonConverter : JsonConverter<KratosOAuth2ConsentRequestOpenIDConnectContext>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosOAuth2ConsentRequestOpenIDConnectContext" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosOAuth2ConsentRequestOpenIDConnectContext Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> acrValues = default;
            Option<string?> display = default;
            Option<Dictionary<string, Object>?> idTokenHintClaims = default;
            Option<string?> loginHint = default;
            Option<List<string>?> uiLocales = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "acr_values":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                acrValues = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "display":
                            display = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id_token_hint_claims":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                idTokenHintClaims = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "login_hint":
                            loginHint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ui_locales":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                uiLocales = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (acrValues.IsSet && acrValues.Value == null)
                throw new ArgumentNullException(nameof(acrValues), "Property is not nullable for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (display.IsSet && display.Value == null)
                throw new ArgumentNullException(nameof(display), "Property is not nullable for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (idTokenHintClaims.IsSet && idTokenHintClaims.Value == null)
                throw new ArgumentNullException(nameof(idTokenHintClaims), "Property is not nullable for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (loginHint.IsSet && loginHint.Value == null)
                throw new ArgumentNullException(nameof(loginHint), "Property is not nullable for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (uiLocales.IsSet && uiLocales.Value == null)
                throw new ArgumentNullException(nameof(uiLocales), "Property is not nullable for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            return new KratosOAuth2ConsentRequestOpenIDConnectContext(acrValues, display, idTokenHintClaims, loginHint, uiLocales);
        }

        /// <summary>
        /// Serializes a <see cref="KratosOAuth2ConsentRequestOpenIDConnectContext" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosOAuth2ConsentRequestOpenIDConnectContext"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosOAuth2ConsentRequestOpenIDConnectContext kratosOAuth2ConsentRequestOpenIDConnectContext, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosOAuth2ConsentRequestOpenIDConnectContext, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosOAuth2ConsentRequestOpenIDConnectContext" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosOAuth2ConsentRequestOpenIDConnectContext"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosOAuth2ConsentRequestOpenIDConnectContext kratosOAuth2ConsentRequestOpenIDConnectContext, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosOAuth2ConsentRequestOpenIDConnectContext.AcrValuesOption.IsSet && kratosOAuth2ConsentRequestOpenIDConnectContext.AcrValues == null)
                throw new ArgumentNullException(nameof(kratosOAuth2ConsentRequestOpenIDConnectContext.AcrValues), "Property is required for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (kratosOAuth2ConsentRequestOpenIDConnectContext.DisplayOption.IsSet && kratosOAuth2ConsentRequestOpenIDConnectContext.Display == null)
                throw new ArgumentNullException(nameof(kratosOAuth2ConsentRequestOpenIDConnectContext.Display), "Property is required for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (kratosOAuth2ConsentRequestOpenIDConnectContext.IdTokenHintClaimsOption.IsSet && kratosOAuth2ConsentRequestOpenIDConnectContext.IdTokenHintClaims == null)
                throw new ArgumentNullException(nameof(kratosOAuth2ConsentRequestOpenIDConnectContext.IdTokenHintClaims), "Property is required for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (kratosOAuth2ConsentRequestOpenIDConnectContext.LoginHintOption.IsSet && kratosOAuth2ConsentRequestOpenIDConnectContext.LoginHint == null)
                throw new ArgumentNullException(nameof(kratosOAuth2ConsentRequestOpenIDConnectContext.LoginHint), "Property is required for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (kratosOAuth2ConsentRequestOpenIDConnectContext.UiLocalesOption.IsSet && kratosOAuth2ConsentRequestOpenIDConnectContext.UiLocales == null)
                throw new ArgumentNullException(nameof(kratosOAuth2ConsentRequestOpenIDConnectContext.UiLocales), "Property is required for class KratosOAuth2ConsentRequestOpenIDConnectContext.");

            if (kratosOAuth2ConsentRequestOpenIDConnectContext.AcrValuesOption.IsSet)
            {
                writer.WritePropertyName("acr_values");
                JsonSerializer.Serialize(writer, kratosOAuth2ConsentRequestOpenIDConnectContext.AcrValues, jsonSerializerOptions);
            }
            if (kratosOAuth2ConsentRequestOpenIDConnectContext.DisplayOption.IsSet)
                writer.WriteString("display", kratosOAuth2ConsentRequestOpenIDConnectContext.Display);

            if (kratosOAuth2ConsentRequestOpenIDConnectContext.IdTokenHintClaimsOption.IsSet)
            {
                writer.WritePropertyName("id_token_hint_claims");
                JsonSerializer.Serialize(writer, kratosOAuth2ConsentRequestOpenIDConnectContext.IdTokenHintClaims, jsonSerializerOptions);
            }
            if (kratosOAuth2ConsentRequestOpenIDConnectContext.LoginHintOption.IsSet)
                writer.WriteString("login_hint", kratosOAuth2ConsentRequestOpenIDConnectContext.LoginHint);

            if (kratosOAuth2ConsentRequestOpenIDConnectContext.UiLocalesOption.IsSet)
            {
                writer.WritePropertyName("ui_locales");
                JsonSerializer.Serialize(writer, kratosOAuth2ConsentRequestOpenIDConnectContext.UiLocales, jsonSerializerOptions);
            }
        }
    }
}
