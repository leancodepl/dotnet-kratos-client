// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosErrorAuthenticatorAssuranceLevelNotSatisfied
    /// </summary>
    public partial class KratosErrorAuthenticatorAssuranceLevelNotSatisfied
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosErrorAuthenticatorAssuranceLevelNotSatisfied" /> class.
        /// </summary>
        /// <param name="error">error</param>
        /// <param name="redirectBrowserTo">Points to where to redirect the user to next.</param>
        [JsonConstructor]
        public KratosErrorAuthenticatorAssuranceLevelNotSatisfied(Option<KratosGenericError?> error = default, Option<string?> redirectBrowserTo = default)
        {
            ErrorOption = error;
            RedirectBrowserToOption = redirectBrowserTo;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosGenericError?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public KratosGenericError? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of RedirectBrowserTo
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RedirectBrowserToOption { get; private set; }

        /// <summary>
        /// Points to where to redirect the user to next.
        /// </summary>
        /// <value>Points to where to redirect the user to next.</value>
        [JsonPropertyName("redirect_browser_to")]
        public string? RedirectBrowserTo { get { return this.RedirectBrowserToOption; } set { this.RedirectBrowserToOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosErrorAuthenticatorAssuranceLevelNotSatisfied {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  RedirectBrowserTo: ").Append(RedirectBrowserTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosErrorAuthenticatorAssuranceLevelNotSatisfied" />
    /// </summary>
    public class KratosErrorAuthenticatorAssuranceLevelNotSatisfiedJsonConverter : JsonConverter<KratosErrorAuthenticatorAssuranceLevelNotSatisfied>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosErrorAuthenticatorAssuranceLevelNotSatisfied" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosErrorAuthenticatorAssuranceLevelNotSatisfied Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosGenericError?> error = default;
            Option<string?> redirectBrowserTo = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = new Option<KratosGenericError?>(JsonSerializer.Deserialize<KratosGenericError>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "redirect_browser_to":
                            redirectBrowserTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class KratosErrorAuthenticatorAssuranceLevelNotSatisfied.");

            if (redirectBrowserTo.IsSet && redirectBrowserTo.Value == null)
                throw new ArgumentNullException(nameof(redirectBrowserTo), "Property is not nullable for class KratosErrorAuthenticatorAssuranceLevelNotSatisfied.");

            return new KratosErrorAuthenticatorAssuranceLevelNotSatisfied(error, redirectBrowserTo);
        }

        /// <summary>
        /// Serializes a <see cref="KratosErrorAuthenticatorAssuranceLevelNotSatisfied" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosErrorAuthenticatorAssuranceLevelNotSatisfied"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosErrorAuthenticatorAssuranceLevelNotSatisfied kratosErrorAuthenticatorAssuranceLevelNotSatisfied, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosErrorAuthenticatorAssuranceLevelNotSatisfied, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosErrorAuthenticatorAssuranceLevelNotSatisfied" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosErrorAuthenticatorAssuranceLevelNotSatisfied"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosErrorAuthenticatorAssuranceLevelNotSatisfied kratosErrorAuthenticatorAssuranceLevelNotSatisfied, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosErrorAuthenticatorAssuranceLevelNotSatisfied.ErrorOption.IsSet && kratosErrorAuthenticatorAssuranceLevelNotSatisfied.Error == null)
                throw new ArgumentNullException(nameof(kratosErrorAuthenticatorAssuranceLevelNotSatisfied.Error), "Property is required for class KratosErrorAuthenticatorAssuranceLevelNotSatisfied.");

            if (kratosErrorAuthenticatorAssuranceLevelNotSatisfied.RedirectBrowserToOption.IsSet && kratosErrorAuthenticatorAssuranceLevelNotSatisfied.RedirectBrowserTo == null)
                throw new ArgumentNullException(nameof(kratosErrorAuthenticatorAssuranceLevelNotSatisfied.RedirectBrowserTo), "Property is required for class KratosErrorAuthenticatorAssuranceLevelNotSatisfied.");

            if (kratosErrorAuthenticatorAssuranceLevelNotSatisfied.ErrorOption.IsSet)
            {
                writer.WritePropertyName("error");
                JsonSerializer.Serialize(writer, kratosErrorAuthenticatorAssuranceLevelNotSatisfied.Error, jsonSerializerOptions);
            }
            if (kratosErrorAuthenticatorAssuranceLevelNotSatisfied.RedirectBrowserToOption.IsSet)
                writer.WriteString("redirect_browser_to", kratosErrorAuthenticatorAssuranceLevelNotSatisfied.RedirectBrowserTo);
        }
    }
}
