// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Control API consistency guarantees
    /// </summary>
    public partial class KratosConsistencyRequestParameters
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosConsistencyRequestParameters" /> class.
        /// </summary>
        /// <param name="consistency">Read Consistency Level (preview)  The read consistency level determines the consistency guarantee for reads:  strong (slow): The read is guaranteed to return the most recent data committed at the start of the read. eventual (very fast): The result will return data that is about 4.8 seconds old.  The default consistency guarantee can be changed in the Ory Network Console or using the Ory CLI with &#x60;ory patch project - -replace &#39;/previews/default_read_consistency_level&#x3D;\&quot;strong\&quot;&#39;&#x60;.  Setting the default consistency level to &#x60;eventual&#x60; may cause regressions in the future as we add consistency controls to more APIs. Currently, the following APIs will be affected by this setting:  &#x60;GET /admin/identities&#x60;  This feature is in preview and only available in Ory Network.  ConsistencyLevelUnset  ConsistencyLevelUnset is the unset / default consistency level. strong ConsistencyLevelStrong  ConsistencyLevelStrong is the strong consistency level. eventual ConsistencyLevelEventual  ConsistencyLevelEventual is the eventual consistency level using follower read timestamps.</param>
        [JsonConstructor]
        public KratosConsistencyRequestParameters(Option<ConsistencyEnum?> consistency = default)
        {
            ConsistencyOption = consistency;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Read Consistency Level (preview)  The read consistency level determines the consistency guarantee for reads:  strong (slow): The read is guaranteed to return the most recent data committed at the start of the read. eventual (very fast): The result will return data that is about 4.8 seconds old.  The default consistency guarantee can be changed in the Ory Network Console or using the Ory CLI with &#x60;ory patch project - -replace &#39;/previews/default_read_consistency_level&#x3D;\&quot;strong\&quot;&#39;&#x60;.  Setting the default consistency level to &#x60;eventual&#x60; may cause regressions in the future as we add consistency controls to more APIs. Currently, the following APIs will be affected by this setting:  &#x60;GET /admin/identities&#x60;  This feature is in preview and only available in Ory Network.  ConsistencyLevelUnset  ConsistencyLevelUnset is the unset / default consistency level. strong ConsistencyLevelStrong  ConsistencyLevelStrong is the strong consistency level. eventual ConsistencyLevelEventual  ConsistencyLevelEventual is the eventual consistency level using follower read timestamps.
        /// </summary>
        /// <value>Read Consistency Level (preview)  The read consistency level determines the consistency guarantee for reads:  strong (slow): The read is guaranteed to return the most recent data committed at the start of the read. eventual (very fast): The result will return data that is about 4.8 seconds old.  The default consistency guarantee can be changed in the Ory Network Console or using the Ory CLI with &#x60;ory patch project - -replace &#39;/previews/default_read_consistency_level&#x3D;\&quot;strong\&quot;&#39;&#x60;.  Setting the default consistency level to &#x60;eventual&#x60; may cause regressions in the future as we add consistency controls to more APIs. Currently, the following APIs will be affected by this setting:  &#x60;GET /admin/identities&#x60;  This feature is in preview and only available in Ory Network.  ConsistencyLevelUnset  ConsistencyLevelUnset is the unset / default consistency level. strong ConsistencyLevelStrong  ConsistencyLevelStrong is the strong consistency level. eventual ConsistencyLevelEventual  ConsistencyLevelEventual is the eventual consistency level using follower read timestamps.</value>
        public enum ConsistencyEnum
        {
            /// <summary>
            /// Enum Empty for value: 
            /// </summary>
            Empty,

            /// <summary>
            /// Enum Strong for value: strong
            /// </summary>
            Strong,

            /// <summary>
            /// Enum Eventual for value: eventual
            /// </summary>
            Eventual
        }

        /// <summary>
        /// Returns a <see cref="ConsistencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ConsistencyEnum ConsistencyEnumFromString(string value)
        {
            if (value.Equals(""))
                return ConsistencyEnum.Empty;

            if (value.Equals("strong"))
                return ConsistencyEnum.Strong;

            if (value.Equals("eventual"))
                return ConsistencyEnum.Eventual;

            throw new NotImplementedException($"Could not convert value to type ConsistencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ConsistencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ConsistencyEnum? ConsistencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals(""))
                return ConsistencyEnum.Empty;

            if (value.Equals("strong"))
                return ConsistencyEnum.Strong;

            if (value.Equals("eventual"))
                return ConsistencyEnum.Eventual;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ConsistencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ConsistencyEnumToJsonValue(ConsistencyEnum? value)
        {
            if (value == ConsistencyEnum.Empty)
                return "";

            if (value == ConsistencyEnum.Strong)
                return "strong";

            if (value == ConsistencyEnum.Eventual)
                return "eventual";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Consistency
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ConsistencyEnum?> ConsistencyOption { get; private set; }

        /// <summary>
        /// Read Consistency Level (preview)  The read consistency level determines the consistency guarantee for reads:  strong (slow): The read is guaranteed to return the most recent data committed at the start of the read. eventual (very fast): The result will return data that is about 4.8 seconds old.  The default consistency guarantee can be changed in the Ory Network Console or using the Ory CLI with &#x60;ory patch project - -replace &#39;/previews/default_read_consistency_level&#x3D;\&quot;strong\&quot;&#39;&#x60;.  Setting the default consistency level to &#x60;eventual&#x60; may cause regressions in the future as we add consistency controls to more APIs. Currently, the following APIs will be affected by this setting:  &#x60;GET /admin/identities&#x60;  This feature is in preview and only available in Ory Network.  ConsistencyLevelUnset  ConsistencyLevelUnset is the unset / default consistency level. strong ConsistencyLevelStrong  ConsistencyLevelStrong is the strong consistency level. eventual ConsistencyLevelEventual  ConsistencyLevelEventual is the eventual consistency level using follower read timestamps.
        /// </summary>
        /// <value>Read Consistency Level (preview)  The read consistency level determines the consistency guarantee for reads:  strong (slow): The read is guaranteed to return the most recent data committed at the start of the read. eventual (very fast): The result will return data that is about 4.8 seconds old.  The default consistency guarantee can be changed in the Ory Network Console or using the Ory CLI with &#x60;ory patch project - -replace &#39;/previews/default_read_consistency_level&#x3D;\&quot;strong\&quot;&#39;&#x60;.  Setting the default consistency level to &#x60;eventual&#x60; may cause regressions in the future as we add consistency controls to more APIs. Currently, the following APIs will be affected by this setting:  &#x60;GET /admin/identities&#x60;  This feature is in preview and only available in Ory Network.  ConsistencyLevelUnset  ConsistencyLevelUnset is the unset / default consistency level. strong ConsistencyLevelStrong  ConsistencyLevelStrong is the strong consistency level. eventual ConsistencyLevelEventual  ConsistencyLevelEventual is the eventual consistency level using follower read timestamps.</value>
        [JsonPropertyName("consistency")]
        public ConsistencyEnum? Consistency { get { return this.ConsistencyOption; } set { this.ConsistencyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosConsistencyRequestParameters {\n");
            sb.Append("  Consistency: ").Append(Consistency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosConsistencyRequestParameters" />
    /// </summary>
    public class KratosConsistencyRequestParametersJsonConverter : JsonConverter<KratosConsistencyRequestParameters>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosConsistencyRequestParameters" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosConsistencyRequestParameters Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosConsistencyRequestParameters.ConsistencyEnum?> consistency = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "consistency":
                            string? consistencyRawValue = utf8JsonReader.GetString();
                            if (consistencyRawValue != null)
                                consistency = new Option<KratosConsistencyRequestParameters.ConsistencyEnum?>(KratosConsistencyRequestParameters.ConsistencyEnumFromStringOrDefault(consistencyRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (consistency.IsSet && consistency.Value == null)
                throw new ArgumentNullException(nameof(consistency), "Property is not nullable for class KratosConsistencyRequestParameters.");

            return new KratosConsistencyRequestParameters(consistency);
        }

        /// <summary>
        /// Serializes a <see cref="KratosConsistencyRequestParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosConsistencyRequestParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosConsistencyRequestParameters kratosConsistencyRequestParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosConsistencyRequestParameters, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosConsistencyRequestParameters" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosConsistencyRequestParameters"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosConsistencyRequestParameters kratosConsistencyRequestParameters, JsonSerializerOptions jsonSerializerOptions)
        {
            var consistencyRawValue = KratosConsistencyRequestParameters.ConsistencyEnumToJsonValue(kratosConsistencyRequestParameters.ConsistencyOption.Value!.Value);
            writer.WriteString("consistency", consistencyRawValue);
        }
    }
}
