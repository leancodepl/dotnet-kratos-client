// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosNeedsPrivilegedSessionError
    /// </summary>
    public partial class KratosNeedsPrivilegedSessionError
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosNeedsPrivilegedSessionError" /> class.
        /// </summary>
        /// <param name="redirectBrowserTo">Points to where to redirect the user to next.</param>
        /// <param name="error">error</param>
        [JsonConstructor]
        public KratosNeedsPrivilegedSessionError(string redirectBrowserTo, Option<KratosGenericError?> error = default)
        {
            RedirectBrowserTo = redirectBrowserTo;
            ErrorOption = error;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Points to where to redirect the user to next.
        /// </summary>
        /// <value>Points to where to redirect the user to next.</value>
        [JsonPropertyName("redirect_browser_to")]
        public string RedirectBrowserTo { get; set; }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosGenericError?> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public KratosGenericError? Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosNeedsPrivilegedSessionError {\n");
            sb.Append("  RedirectBrowserTo: ").Append(RedirectBrowserTo).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosNeedsPrivilegedSessionError" />
    /// </summary>
    public class KratosNeedsPrivilegedSessionErrorJsonConverter : JsonConverter<KratosNeedsPrivilegedSessionError>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosNeedsPrivilegedSessionError" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosNeedsPrivilegedSessionError Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> redirectBrowserTo = default;
            Option<KratosGenericError?> error = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "redirect_browser_to":
                            redirectBrowserTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = new Option<KratosGenericError?>(JsonSerializer.Deserialize<KratosGenericError>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!redirectBrowserTo.IsSet)
                throw new ArgumentException("Property is required for class KratosNeedsPrivilegedSessionError.", nameof(redirectBrowserTo));

            if (redirectBrowserTo.IsSet && redirectBrowserTo.Value == null)
                throw new ArgumentNullException(nameof(redirectBrowserTo), "Property is not nullable for class KratosNeedsPrivilegedSessionError.");

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class KratosNeedsPrivilegedSessionError.");

            return new KratosNeedsPrivilegedSessionError(redirectBrowserTo.Value!, error);
        }

        /// <summary>
        /// Serializes a <see cref="KratosNeedsPrivilegedSessionError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosNeedsPrivilegedSessionError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosNeedsPrivilegedSessionError kratosNeedsPrivilegedSessionError, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosNeedsPrivilegedSessionError, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosNeedsPrivilegedSessionError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosNeedsPrivilegedSessionError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosNeedsPrivilegedSessionError kratosNeedsPrivilegedSessionError, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosNeedsPrivilegedSessionError.RedirectBrowserTo == null)
                throw new ArgumentNullException(nameof(kratosNeedsPrivilegedSessionError.RedirectBrowserTo), "Property is required for class KratosNeedsPrivilegedSessionError.");

            if (kratosNeedsPrivilegedSessionError.ErrorOption.IsSet && kratosNeedsPrivilegedSessionError.Error == null)
                throw new ArgumentNullException(nameof(kratosNeedsPrivilegedSessionError.Error), "Property is required for class KratosNeedsPrivilegedSessionError.");

            writer.WriteString("redirect_browser_to", kratosNeedsPrivilegedSessionError.RedirectBrowserTo);

            if (kratosNeedsPrivilegedSessionError.ErrorOption.IsSet)
            {
                writer.WritePropertyName("error");
                JsonSerializer.Serialize(writer, kratosNeedsPrivilegedSessionError.Error, jsonSerializerOptions);
            }
        }
    }
}
