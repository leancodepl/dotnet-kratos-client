// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Patch identities response
    /// </summary>
    public partial class KratosBatchPatchIdentitiesResponse
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosBatchPatchIdentitiesResponse" /> class.
        /// </summary>
        /// <param name="identities">The patch responses for the individual identities.</param>
        [JsonConstructor]
        public KratosBatchPatchIdentitiesResponse(Option<List<KratosIdentityPatchResponse>?> identities = default)
        {
            IdentitiesOption = identities;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Identities
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosIdentityPatchResponse>?> IdentitiesOption { get; private set; }

        /// <summary>
        /// The patch responses for the individual identities.
        /// </summary>
        /// <value>The patch responses for the individual identities.</value>
        [JsonPropertyName("identities")]
        public List<KratosIdentityPatchResponse>? Identities { get { return this.IdentitiesOption; } set { this.IdentitiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosBatchPatchIdentitiesResponse {\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosBatchPatchIdentitiesResponse" />
    /// </summary>
    public class KratosBatchPatchIdentitiesResponseJsonConverter : JsonConverter<KratosBatchPatchIdentitiesResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosBatchPatchIdentitiesResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosBatchPatchIdentitiesResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<KratosIdentityPatchResponse>?> identities = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "identities":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                identities = new Option<List<KratosIdentityPatchResponse>?>(JsonSerializer.Deserialize<List<KratosIdentityPatchResponse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (identities.IsSet && identities.Value == null)
                throw new ArgumentNullException(nameof(identities), "Property is not nullable for class KratosBatchPatchIdentitiesResponse.");

            return new KratosBatchPatchIdentitiesResponse(identities);
        }

        /// <summary>
        /// Serializes a <see cref="KratosBatchPatchIdentitiesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosBatchPatchIdentitiesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosBatchPatchIdentitiesResponse kratosBatchPatchIdentitiesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosBatchPatchIdentitiesResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosBatchPatchIdentitiesResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosBatchPatchIdentitiesResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosBatchPatchIdentitiesResponse kratosBatchPatchIdentitiesResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosBatchPatchIdentitiesResponse.IdentitiesOption.IsSet && kratosBatchPatchIdentitiesResponse.Identities == null)
                throw new ArgumentNullException(nameof(kratosBatchPatchIdentitiesResponse.Identities), "Property is required for class KratosBatchPatchIdentitiesResponse.");

            if (kratosBatchPatchIdentitiesResponse.IdentitiesOption.IsSet)
            {
                writer.WritePropertyName("identities");
                JsonSerializer.Serialize(writer, kratosBatchPatchIdentitiesResponse.Identities, jsonSerializerOptions);
            }
        }
    }
}
