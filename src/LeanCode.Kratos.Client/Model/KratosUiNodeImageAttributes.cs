// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosUiNodeImageAttributes
    /// </summary>
    public partial class KratosUiNodeImageAttributes
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUiNodeImageAttributes" /> class.
        /// </summary>
        /// <param name="height">Height of the image</param>
        /// <param name="id">A unique identifier</param>
        /// <param name="nodeType">NodeType represents this node&#39;s types. It is a mirror of &#x60;node.type&#x60; and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \&quot;img\&quot;. text Text input Input img Image a Anchor script Script</param>
        /// <param name="src">The image&#39;s source URL.  format: uri</param>
        /// <param name="width">Width of the image</param>
        [JsonConstructor]
        public KratosUiNodeImageAttributes(long height, string id, NodeTypeEnum nodeType, string src, long width)
        {
            Height = height;
            Id = id;
            NodeType = nodeType;
            Src = src;
            Width = width;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// NodeType represents this node&#39;s types. It is a mirror of &#x60;node.type&#x60; and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \&quot;img\&quot;. text Text input Input img Image a Anchor script Script
        /// </summary>
        /// <value>NodeType represents this node&#39;s types. It is a mirror of &#x60;node.type&#x60; and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \&quot;img\&quot;. text Text input Input img Image a Anchor script Script</value>
        public enum NodeTypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            Text,

            /// <summary>
            /// Enum Input for value: input
            /// </summary>
            Input,

            /// <summary>
            /// Enum Img for value: img
            /// </summary>
            Img,

            /// <summary>
            /// Enum A for value: a
            /// </summary>
            A,

            /// <summary>
            /// Enum Script for value: script
            /// </summary>
            Script
        }

        /// <summary>
        /// Returns a <see cref="NodeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static NodeTypeEnum NodeTypeEnumFromString(string value)
        {
            if (value.Equals("text"))
                return NodeTypeEnum.Text;

            if (value.Equals("input"))
                return NodeTypeEnum.Input;

            if (value.Equals("img"))
                return NodeTypeEnum.Img;

            if (value.Equals("a"))
                return NodeTypeEnum.A;

            if (value.Equals("script"))
                return NodeTypeEnum.Script;

            throw new NotImplementedException($"Could not convert value to type NodeTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="NodeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NodeTypeEnum? NodeTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("text"))
                return NodeTypeEnum.Text;

            if (value.Equals("input"))
                return NodeTypeEnum.Input;

            if (value.Equals("img"))
                return NodeTypeEnum.Img;

            if (value.Equals("a"))
                return NodeTypeEnum.A;

            if (value.Equals("script"))
                return NodeTypeEnum.Script;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NodeTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string NodeTypeEnumToJsonValue(NodeTypeEnum value)
        {
            if (value == NodeTypeEnum.Text)
                return "text";

            if (value == NodeTypeEnum.Input)
                return "input";

            if (value == NodeTypeEnum.Img)
                return "img";

            if (value == NodeTypeEnum.A)
                return "a";

            if (value == NodeTypeEnum.Script)
                return "script";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// NodeType represents this node&#39;s types. It is a mirror of &#x60;node.type&#x60; and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \&quot;img\&quot;. text Text input Input img Image a Anchor script Script
        /// </summary>
        /// <value>NodeType represents this node&#39;s types. It is a mirror of &#x60;node.type&#x60; and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \&quot;img\&quot;. text Text input Input img Image a Anchor script Script</value>
        [JsonPropertyName("node_type")]
        public NodeTypeEnum NodeType { get; set; }

        /// <summary>
        /// Height of the image
        /// </summary>
        /// <value>Height of the image</value>
        [JsonPropertyName("height")]
        public long Height { get; set; }

        /// <summary>
        /// A unique identifier
        /// </summary>
        /// <value>A unique identifier</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The image&#39;s source URL.  format: uri
        /// </summary>
        /// <value>The image&#39;s source URL.  format: uri</value>
        [JsonPropertyName("src")]
        public string Src { get; set; }

        /// <summary>
        /// Width of the image
        /// </summary>
        /// <value>Width of the image</value>
        [JsonPropertyName("width")]
        public long Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUiNodeImageAttributes {\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NodeType: ").Append(NodeType).Append("\n");
            sb.Append("  Src: ").Append(Src).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUiNodeImageAttributes" />
    /// </summary>
    public class KratosUiNodeImageAttributesJsonConverter : JsonConverter<KratosUiNodeImageAttributes>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUiNodeImageAttributes" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUiNodeImageAttributes Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> height = default;
            Option<string?> id = default;
            Option<KratosUiNodeImageAttributes.NodeTypeEnum?> nodeType = default;
            Option<string?> src = default;
            Option<long?> width = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "node_type":
                            string? nodeTypeRawValue = utf8JsonReader.GetString();
                            if (nodeTypeRawValue != null)
                                nodeType = new Option<KratosUiNodeImageAttributes.NodeTypeEnum?>(KratosUiNodeImageAttributes.NodeTypeEnumFromStringOrDefault(nodeTypeRawValue));
                            break;
                        case "src":
                            src = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!height.IsSet)
                throw new ArgumentException("Property is required for class KratosUiNodeImageAttributes.", nameof(height));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosUiNodeImageAttributes.", nameof(id));

            if (!nodeType.IsSet)
                throw new ArgumentException("Property is required for class KratosUiNodeImageAttributes.", nameof(nodeType));

            if (!src.IsSet)
                throw new ArgumentException("Property is required for class KratosUiNodeImageAttributes.", nameof(src));

            if (!width.IsSet)
                throw new ArgumentException("Property is required for class KratosUiNodeImageAttributes.", nameof(width));

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class KratosUiNodeImageAttributes.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosUiNodeImageAttributes.");

            if (nodeType.IsSet && nodeType.Value == null)
                throw new ArgumentNullException(nameof(nodeType), "Property is not nullable for class KratosUiNodeImageAttributes.");

            if (src.IsSet && src.Value == null)
                throw new ArgumentNullException(nameof(src), "Property is not nullable for class KratosUiNodeImageAttributes.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class KratosUiNodeImageAttributes.");

            return new KratosUiNodeImageAttributes(height.Value!.Value!, id.Value!, nodeType.Value!.Value!, src.Value!, width.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUiNodeImageAttributes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUiNodeImageAttributes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUiNodeImageAttributes kratosUiNodeImageAttributes, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUiNodeImageAttributes, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUiNodeImageAttributes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUiNodeImageAttributes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUiNodeImageAttributes kratosUiNodeImageAttributes, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUiNodeImageAttributes.Id == null)
                throw new ArgumentNullException(nameof(kratosUiNodeImageAttributes.Id), "Property is required for class KratosUiNodeImageAttributes.");

            if (kratosUiNodeImageAttributes.Src == null)
                throw new ArgumentNullException(nameof(kratosUiNodeImageAttributes.Src), "Property is required for class KratosUiNodeImageAttributes.");

            writer.WriteNumber("height", kratosUiNodeImageAttributes.Height);

            writer.WriteString("id", kratosUiNodeImageAttributes.Id);

            var nodeTypeRawValue = KratosUiNodeImageAttributes.NodeTypeEnumToJsonValue(kratosUiNodeImageAttributes.NodeType);
            writer.WriteString("node_type", nodeTypeRawValue);
            writer.WriteString("src", kratosUiNodeImageAttributes.Src);

            writer.WriteNumber("width", kratosUiNodeImageAttributes.Width);
        }
    }
}
