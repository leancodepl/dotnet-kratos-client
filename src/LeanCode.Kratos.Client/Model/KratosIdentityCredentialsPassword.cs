// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosIdentityCredentialsPassword
    /// </summary>
    public partial class KratosIdentityCredentialsPassword
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosIdentityCredentialsPassword" /> class.
        /// </summary>
        /// <param name="hashedPassword">HashedPassword is a hash-representation of the password.</param>
        [JsonConstructor]
        public KratosIdentityCredentialsPassword(Option<string?> hashedPassword = default)
        {
            HashedPasswordOption = hashedPassword;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HashedPassword
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HashedPasswordOption { get; private set; }

        /// <summary>
        /// HashedPassword is a hash-representation of the password.
        /// </summary>
        /// <value>HashedPassword is a hash-representation of the password.</value>
        [JsonPropertyName("hashed_password")]
        public string? HashedPassword { get { return this.HashedPasswordOption; } set { this.HashedPasswordOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosIdentityCredentialsPassword {\n");
            sb.Append("  HashedPassword: ").Append(HashedPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosIdentityCredentialsPassword" />
    /// </summary>
    public class KratosIdentityCredentialsPasswordJsonConverter : JsonConverter<KratosIdentityCredentialsPassword>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosIdentityCredentialsPassword" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosIdentityCredentialsPassword Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> hashedPassword = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hashed_password":
                            hashedPassword = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (hashedPassword.IsSet && hashedPassword.Value == null)
                throw new ArgumentNullException(nameof(hashedPassword), "Property is not nullable for class KratosIdentityCredentialsPassword.");

            return new KratosIdentityCredentialsPassword(hashedPassword);
        }

        /// <summary>
        /// Serializes a <see cref="KratosIdentityCredentialsPassword" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsPassword"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosIdentityCredentialsPassword kratosIdentityCredentialsPassword, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosIdentityCredentialsPassword, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosIdentityCredentialsPassword" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosIdentityCredentialsPassword"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosIdentityCredentialsPassword kratosIdentityCredentialsPassword, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosIdentityCredentialsPassword.HashedPasswordOption.IsSet && kratosIdentityCredentialsPassword.HashedPassword == null)
                throw new ArgumentNullException(nameof(kratosIdentityCredentialsPassword.HashedPassword), "Property is required for class KratosIdentityCredentialsPassword.");

            if (kratosIdentityCredentialsPassword.HashedPasswordOption.IsSet)
                writer.WriteString("hashed_password", kratosIdentityCredentialsPassword.HashedPassword);
        }
    }
}
