// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosUiNodeAttributes
    /// </summary>
    public partial class KratosUiNodeAttributes
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUiNodeAttributes" /> class.
        /// </summary>
        /// <param name="kratosUiNodeInputAttributes"></param>
        public KratosUiNodeAttributes(KratosUiNodeInputAttributes kratosUiNodeInputAttributes)
        {
            KratosUiNodeInputAttributes = kratosUiNodeInputAttributes;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUiNodeAttributes" /> class.
        /// </summary>
        /// <param name="kratosUiNodeTextAttributes"></param>
        public KratosUiNodeAttributes(KratosUiNodeTextAttributes kratosUiNodeTextAttributes)
        {
            KratosUiNodeTextAttributes = kratosUiNodeTextAttributes;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUiNodeAttributes" /> class.
        /// </summary>
        /// <param name="kratosUiNodeImageAttributes"></param>
        public KratosUiNodeAttributes(KratosUiNodeImageAttributes kratosUiNodeImageAttributes)
        {
            KratosUiNodeImageAttributes = kratosUiNodeImageAttributes;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUiNodeAttributes" /> class.
        /// </summary>
        /// <param name="kratosUiNodeAnchorAttributes"></param>
        public KratosUiNodeAttributes(KratosUiNodeAnchorAttributes kratosUiNodeAnchorAttributes)
        {
            KratosUiNodeAnchorAttributes = kratosUiNodeAnchorAttributes;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUiNodeAttributes" /> class.
        /// </summary>
        /// <param name="kratosUiNodeScriptAttributes"></param>
        public KratosUiNodeAttributes(KratosUiNodeScriptAttributes kratosUiNodeScriptAttributes)
        {
            KratosUiNodeScriptAttributes = kratosUiNodeScriptAttributes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// NodeType represents this node&#39;s types. It is a mirror of &#x60;node.type&#x60; and is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is \&quot;script\&quot;. text Text input Input img Image a Anchor script Script
        /// </summary>
        /// <value>NodeType represents this node&#39;s types. It is a mirror of &#x60;node.type&#x60; and is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is \&quot;script\&quot;. text Text input Input img Image a Anchor script Script</value>
        public enum NodeTypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            Text,

            /// <summary>
            /// Enum Input for value: input
            /// </summary>
            Input,

            /// <summary>
            /// Enum Img for value: img
            /// </summary>
            Img,

            /// <summary>
            /// Enum A for value: a
            /// </summary>
            A,

            /// <summary>
            /// Enum Script for value: script
            /// </summary>
            Script
        }

        /// <summary>
        /// Returns a <see cref="NodeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static NodeTypeEnum NodeTypeEnumFromString(string value)
        {
            if (value.Equals("text"))
                return NodeTypeEnum.Text;

            if (value.Equals("input"))
                return NodeTypeEnum.Input;

            if (value.Equals("img"))
                return NodeTypeEnum.Img;

            if (value.Equals("a"))
                return NodeTypeEnum.A;

            if (value.Equals("script"))
                return NodeTypeEnum.Script;

            throw new NotImplementedException($"Could not convert value to type NodeTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="NodeTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NodeTypeEnum? NodeTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("text"))
                return NodeTypeEnum.Text;

            if (value.Equals("input"))
                return NodeTypeEnum.Input;

            if (value.Equals("img"))
                return NodeTypeEnum.Img;

            if (value.Equals("a"))
                return NodeTypeEnum.A;

            if (value.Equals("script"))
                return NodeTypeEnum.Script;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NodeTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string NodeTypeEnumToJsonValue(NodeTypeEnum value)
        {
            if (value == NodeTypeEnum.Text)
                return "text";

            if (value == NodeTypeEnum.Input)
                return "input";

            if (value == NodeTypeEnum.Img)
                return "img";

            if (value == NodeTypeEnum.A)
                return "a";

            if (value == NodeTypeEnum.Script)
                return "script";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets KratosUiNodeInputAttributes
        /// </summary>
        public KratosUiNodeInputAttributes? KratosUiNodeInputAttributes { get; set; }

        /// <summary>
        /// Gets or Sets KratosUiNodeTextAttributes
        /// </summary>
        public KratosUiNodeTextAttributes? KratosUiNodeTextAttributes { get; set; }

        /// <summary>
        /// Gets or Sets KratosUiNodeImageAttributes
        /// </summary>
        public KratosUiNodeImageAttributes? KratosUiNodeImageAttributes { get; set; }

        /// <summary>
        /// Gets or Sets KratosUiNodeAnchorAttributes
        /// </summary>
        public KratosUiNodeAnchorAttributes? KratosUiNodeAnchorAttributes { get; set; }

        /// <summary>
        /// Gets or Sets KratosUiNodeScriptAttributes
        /// </summary>
        public KratosUiNodeScriptAttributes? KratosUiNodeScriptAttributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUiNodeAttributes {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUiNodeAttributes" />
    /// </summary>
    public class KratosUiNodeAttributesJsonConverter : JsonConverter<KratosUiNodeAttributes>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUiNodeAttributes" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUiNodeAttributes Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosUiNodeAttributes.NodeTypeEnum?> nodeType = default;

            KratosUiNodeInputAttributes? kratosUiNodeInputAttributes = null;
            KratosUiNodeTextAttributes? kratosUiNodeTextAttributes = null;
            KratosUiNodeImageAttributes? kratosUiNodeImageAttributes = null;
            KratosUiNodeAnchorAttributes? kratosUiNodeAnchorAttributes = null;
            KratosUiNodeScriptAttributes? kratosUiNodeScriptAttributes = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("node_type") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("a") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeAnchorAttributes = utf8JsonReader;
                            kratosUiNodeAnchorAttributes = JsonSerializer.Deserialize<KratosUiNodeAnchorAttributes>(ref utf8JsonReaderKratosUiNodeAnchorAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("img") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeImageAttributes = utf8JsonReader;
                            kratosUiNodeImageAttributes = JsonSerializer.Deserialize<KratosUiNodeImageAttributes>(ref utf8JsonReaderKratosUiNodeImageAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("input") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeInputAttributes = utf8JsonReader;
                            kratosUiNodeInputAttributes = JsonSerializer.Deserialize<KratosUiNodeInputAttributes>(ref utf8JsonReaderKratosUiNodeInputAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("script") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeScriptAttributes = utf8JsonReader;
                            kratosUiNodeScriptAttributes = JsonSerializer.Deserialize<KratosUiNodeScriptAttributes>(ref utf8JsonReaderKratosUiNodeScriptAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("text") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeTextAttributes = utf8JsonReader;
                            kratosUiNodeTextAttributes = JsonSerializer.Deserialize<KratosUiNodeTextAttributes>(ref utf8JsonReaderKratosUiNodeTextAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("uiNodeAnchorAttributes") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeAnchorAttributes = utf8JsonReader;
                            kratosUiNodeAnchorAttributes = JsonSerializer.Deserialize<KratosUiNodeAnchorAttributes>(ref utf8JsonReaderKratosUiNodeAnchorAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("uiNodeImageAttributes") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeImageAttributes = utf8JsonReader;
                            kratosUiNodeImageAttributes = JsonSerializer.Deserialize<KratosUiNodeImageAttributes>(ref utf8JsonReaderKratosUiNodeImageAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("uiNodeInputAttributes") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeInputAttributes = utf8JsonReader;
                            kratosUiNodeInputAttributes = JsonSerializer.Deserialize<KratosUiNodeInputAttributes>(ref utf8JsonReaderKratosUiNodeInputAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("uiNodeScriptAttributes") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeScriptAttributes = utf8JsonReader;
                            kratosUiNodeScriptAttributes = JsonSerializer.Deserialize<KratosUiNodeScriptAttributes>(ref utf8JsonReaderKratosUiNodeScriptAttributes, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("uiNodeTextAttributes") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUiNodeTextAttributes = utf8JsonReader;
                            kratosUiNodeTextAttributes = JsonSerializer.Deserialize<KratosUiNodeTextAttributes>(ref utf8JsonReaderKratosUiNodeTextAttributes, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "node_type":
                            string? nodeTypeRawValue = utf8JsonReader.GetString();
                            if (nodeTypeRawValue != null)
                                nodeType = new Option<KratosUiNodeAttributes.NodeTypeEnum?>(KratosUiNodeAttributes.NodeTypeEnumFromStringOrDefault(nodeTypeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!nodeType.IsSet)
                throw new ArgumentException("Property is required for class KratosUiNodeAttributes.", nameof(nodeType));

            if (nodeType.IsSet && nodeType.Value == null)
                throw new ArgumentNullException(nameof(nodeType), "Property is not nullable for class KratosUiNodeAttributes.");

            if (kratosUiNodeInputAttributes != null)
                return new KratosUiNodeAttributes(kratosUiNodeInputAttributes);

            if (kratosUiNodeTextAttributes != null)
                return new KratosUiNodeAttributes(kratosUiNodeTextAttributes);

            if (kratosUiNodeImageAttributes != null)
                return new KratosUiNodeAttributes(kratosUiNodeImageAttributes);

            if (kratosUiNodeAnchorAttributes != null)
                return new KratosUiNodeAttributes(kratosUiNodeAnchorAttributes);

            if (kratosUiNodeScriptAttributes != null)
                return new KratosUiNodeAttributes(kratosUiNodeScriptAttributes);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="KratosUiNodeAttributes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUiNodeAttributes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUiNodeAttributes kratosUiNodeAttributes, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (kratosUiNodeAttributes.KratosUiNodeInputAttributes != null)
            {
                KratosUiNodeInputAttributesJsonConverter kratosUiNodeInputAttributesJsonConverter = (KratosUiNodeInputAttributesJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUiNodeAttributes.KratosUiNodeInputAttributes.GetType()));
                kratosUiNodeInputAttributesJsonConverter.WriteProperties(writer, kratosUiNodeAttributes.KratosUiNodeInputAttributes, jsonSerializerOptions);
            }

            if (kratosUiNodeAttributes.KratosUiNodeTextAttributes != null)
            {
                KratosUiNodeTextAttributesJsonConverter kratosUiNodeTextAttributesJsonConverter = (KratosUiNodeTextAttributesJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUiNodeAttributes.KratosUiNodeTextAttributes.GetType()));
                kratosUiNodeTextAttributesJsonConverter.WriteProperties(writer, kratosUiNodeAttributes.KratosUiNodeTextAttributes, jsonSerializerOptions);
            }

            if (kratosUiNodeAttributes.KratosUiNodeImageAttributes != null)
            {
                KratosUiNodeImageAttributesJsonConverter kratosUiNodeImageAttributesJsonConverter = (KratosUiNodeImageAttributesJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUiNodeAttributes.KratosUiNodeImageAttributes.GetType()));
                kratosUiNodeImageAttributesJsonConverter.WriteProperties(writer, kratosUiNodeAttributes.KratosUiNodeImageAttributes, jsonSerializerOptions);
            }

            if (kratosUiNodeAttributes.KratosUiNodeAnchorAttributes != null)
            {
                KratosUiNodeAnchorAttributesJsonConverter kratosUiNodeAnchorAttributesJsonConverter = (KratosUiNodeAnchorAttributesJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUiNodeAttributes.KratosUiNodeAnchorAttributes.GetType()));
                kratosUiNodeAnchorAttributesJsonConverter.WriteProperties(writer, kratosUiNodeAttributes.KratosUiNodeAnchorAttributes, jsonSerializerOptions);
            }

            if (kratosUiNodeAttributes.KratosUiNodeScriptAttributes != null)
            {
                KratosUiNodeScriptAttributesJsonConverter kratosUiNodeScriptAttributesJsonConverter = (KratosUiNodeScriptAttributesJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUiNodeAttributes.KratosUiNodeScriptAttributes.GetType()));
                kratosUiNodeScriptAttributesJsonConverter.WriteProperties(writer, kratosUiNodeAttributes.KratosUiNodeScriptAttributes, jsonSerializerOptions);
            }

            WriteProperties(writer, kratosUiNodeAttributes, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUiNodeAttributes" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUiNodeAttributes"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUiNodeAttributes kratosUiNodeAttributes, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
