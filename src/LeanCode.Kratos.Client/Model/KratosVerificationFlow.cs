// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Used to verify an out-of-band communication channel such as an email address or a phone number.  For more information head over to: https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation
    /// </summary>
    public partial class KratosVerificationFlow
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosVerificationFlow" /> class.
        /// </summary>
        /// <param name="id">ID represents the request&#39;s unique ID. When performing the verification flow, this represents the id in the verify ui&#39;s query parameter: http://&lt;selfservice.flows.verification.ui_url&gt;?request&#x3D;&lt;id&gt;  type: string format: uuid</param>
        /// <param name="type">The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.</param>
        /// <param name="ui">ui</param>
        /// <param name="active">Active, if set, contains the registration method that is being used. It is initially not set.</param>
        /// <param name="expiresAt">ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.</param>
        /// <param name="issuedAt">IssuedAt is the time (UTC) when the request occurred.</param>
        /// <param name="requestUrl">RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.</param>
        /// <param name="returnTo">ReturnTo contains the requested return_to URL.</param>
        /// <param name="state">State represents the state of this request:  choose_method: ask the user to choose a method (e.g. verify your email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the verification challenge was passed.</param>
        /// <param name="transientPayload">TransientPayload is used to pass data from the verification flow to hooks and email templates</param>
        [JsonConstructor]
        public KratosVerificationFlow(string id, string type, KratosUiContainer ui, Option<string?> active = default, Option<DateTime?> expiresAt = default, Option<DateTime?> issuedAt = default, Option<string?> requestUrl = default, Option<string?> returnTo = default, Object? state = default, Option<Object?> transientPayload = default)
        {
            Id = id;
            Type = type;
            Ui = ui;
            ActiveOption = active;
            ExpiresAtOption = expiresAt;
            IssuedAtOption = issuedAt;
            RequestUrlOption = requestUrl;
            ReturnToOption = returnTo;
            State = state;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ID represents the request&#39;s unique ID. When performing the verification flow, this represents the id in the verify ui&#39;s query parameter: http://&lt;selfservice.flows.verification.ui_url&gt;?request&#x3D;&lt;id&gt;  type: string format: uuid
        /// </summary>
        /// <value>ID represents the request&#39;s unique ID. When performing the verification flow, this represents the id in the verify ui&#39;s query parameter: http://&lt;selfservice.flows.verification.ui_url&gt;?request&#x3D;&lt;id&gt;  type: string format: uuid</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.
        /// </summary>
        /// <value>The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.</value>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Ui
        /// </summary>
        [JsonPropertyName("ui")]
        public KratosUiContainer Ui { get; set; }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActiveOption { get; private set; }

        /// <summary>
        /// Active, if set, contains the registration method that is being used. It is initially not set.
        /// </summary>
        /// <value>Active, if set, contains the registration method that is being used. It is initially not set.</value>
        [JsonPropertyName("active")]
        public string? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.
        /// </summary>
        /// <value>ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.</value>
        [JsonPropertyName("expires_at")]
        public DateTime? ExpiresAt { get { return this.ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of IssuedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> IssuedAtOption { get; private set; }

        /// <summary>
        /// IssuedAt is the time (UTC) when the request occurred.
        /// </summary>
        /// <value>IssuedAt is the time (UTC) when the request occurred.</value>
        [JsonPropertyName("issued_at")]
        public DateTime? IssuedAt { get { return this.IssuedAtOption; } set { this.IssuedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequestUrl
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RequestUrlOption { get; private set; }

        /// <summary>
        /// RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.
        /// </summary>
        /// <value>RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.</value>
        [JsonPropertyName("request_url")]
        public string? RequestUrl { get { return this.RequestUrlOption; } set { this.RequestUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReturnTo
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReturnToOption { get; private set; }

        /// <summary>
        /// ReturnTo contains the requested return_to URL.
        /// </summary>
        /// <value>ReturnTo contains the requested return_to URL.</value>
        [JsonPropertyName("return_to")]
        public string? ReturnTo { get { return this.ReturnToOption; } set { this.ReturnToOption = new(value); } }

        /// <summary>
        /// State represents the state of this request:  choose_method: ask the user to choose a method (e.g. verify your email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the verification challenge was passed.
        /// </summary>
        /// <value>State represents the state of this request:  choose_method: ask the user to choose a method (e.g. verify your email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the verification challenge was passed.</value>
        [JsonPropertyName("state")]
        public Object? State { get; set; }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// TransientPayload is used to pass data from the verification flow to hooks and email templates
        /// </summary>
        /// <value>TransientPayload is used to pass data from the verification flow to hooks and email templates</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosVerificationFlow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Ui: ").Append(Ui).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("  RequestUrl: ").Append(RequestUrl).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosVerificationFlow" />
    /// </summary>
    public class KratosVerificationFlowJsonConverter : JsonConverter<KratosVerificationFlow>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize IssuedAt
        /// </summary>
        public static string IssuedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosVerificationFlow" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosVerificationFlow Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> type = default;
            Option<KratosUiContainer?> ui = default;
            Option<string?> active = default;
            Option<DateTime?> expiresAt = default;
            Option<DateTime?> issuedAt = default;
            Option<string?> requestUrl = default;
            Option<string?> returnTo = default;
            Option<Object?> state = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ui":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ui = new Option<KratosUiContainer?>(JsonSerializer.Deserialize<KratosUiContainer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "active":
                            active = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "issued_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "request_url":
                            requestUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "return_to":
                            returnTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                state = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosVerificationFlow.", nameof(id));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class KratosVerificationFlow.", nameof(type));

            if (!ui.IsSet)
                throw new ArgumentException("Property is required for class KratosVerificationFlow.", nameof(ui));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class KratosVerificationFlow.", nameof(state));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosVerificationFlow.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class KratosVerificationFlow.");

            if (ui.IsSet && ui.Value == null)
                throw new ArgumentNullException(nameof(ui), "Property is not nullable for class KratosVerificationFlow.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class KratosVerificationFlow.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class KratosVerificationFlow.");

            if (issuedAt.IsSet && issuedAt.Value == null)
                throw new ArgumentNullException(nameof(issuedAt), "Property is not nullable for class KratosVerificationFlow.");

            if (requestUrl.IsSet && requestUrl.Value == null)
                throw new ArgumentNullException(nameof(requestUrl), "Property is not nullable for class KratosVerificationFlow.");

            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo), "Property is not nullable for class KratosVerificationFlow.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosVerificationFlow.");

            return new KratosVerificationFlow(id.Value!, type.Value!, ui.Value!, active, expiresAt, issuedAt, requestUrl, returnTo, state.Value!, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosVerificationFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosVerificationFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosVerificationFlow kratosVerificationFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosVerificationFlow, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosVerificationFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosVerificationFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosVerificationFlow kratosVerificationFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosVerificationFlow.Id == null)
                throw new ArgumentNullException(nameof(kratosVerificationFlow.Id), "Property is required for class KratosVerificationFlow.");

            if (kratosVerificationFlow.Type == null)
                throw new ArgumentNullException(nameof(kratosVerificationFlow.Type), "Property is required for class KratosVerificationFlow.");

            if (kratosVerificationFlow.Ui == null)
                throw new ArgumentNullException(nameof(kratosVerificationFlow.Ui), "Property is required for class KratosVerificationFlow.");

            if (kratosVerificationFlow.ActiveOption.IsSet && kratosVerificationFlow.Active == null)
                throw new ArgumentNullException(nameof(kratosVerificationFlow.Active), "Property is required for class KratosVerificationFlow.");

            if (kratosVerificationFlow.RequestUrlOption.IsSet && kratosVerificationFlow.RequestUrl == null)
                throw new ArgumentNullException(nameof(kratosVerificationFlow.RequestUrl), "Property is required for class KratosVerificationFlow.");

            if (kratosVerificationFlow.ReturnToOption.IsSet && kratosVerificationFlow.ReturnTo == null)
                throw new ArgumentNullException(nameof(kratosVerificationFlow.ReturnTo), "Property is required for class KratosVerificationFlow.");

            if (kratosVerificationFlow.TransientPayloadOption.IsSet && kratosVerificationFlow.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosVerificationFlow.TransientPayload), "Property is required for class KratosVerificationFlow.");

            writer.WriteString("id", kratosVerificationFlow.Id);

            writer.WriteString("type", kratosVerificationFlow.Type);

            writer.WritePropertyName("ui");
            JsonSerializer.Serialize(writer, kratosVerificationFlow.Ui, jsonSerializerOptions);
            if (kratosVerificationFlow.ActiveOption.IsSet)
                writer.WriteString("active", kratosVerificationFlow.Active);

            if (kratosVerificationFlow.ExpiresAtOption.IsSet)
                writer.WriteString("expires_at", kratosVerificationFlow.ExpiresAtOption.Value!.Value.ToString(ExpiresAtFormat));

            if (kratosVerificationFlow.IssuedAtOption.IsSet)
                writer.WriteString("issued_at", kratosVerificationFlow.IssuedAtOption.Value!.Value.ToString(IssuedAtFormat));

            if (kratosVerificationFlow.RequestUrlOption.IsSet)
                writer.WriteString("request_url", kratosVerificationFlow.RequestUrl);

            if (kratosVerificationFlow.ReturnToOption.IsSet)
                writer.WriteString("return_to", kratosVerificationFlow.ReturnTo);

            if (kratosVerificationFlow.State != null)
            {
                writer.WritePropertyName("state");
                JsonSerializer.Serialize(writer, kratosVerificationFlow.State, jsonSerializerOptions);
            }
            else
                writer.WriteNull("state");
            if (kratosVerificationFlow.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosVerificationFlow.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
