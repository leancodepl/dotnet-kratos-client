// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// OAuth2LoginRequest struct for OAuth2LoginRequest
    /// </summary>
    public partial class KratosOAuth2LoginRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosOAuth2LoginRequest" /> class.
        /// </summary>
        /// <param name="challenge">ID is the identifier (\\\&quot;login challenge\\\&quot;) of the login request. It is used to identify the session.</param>
        /// <param name="oidcContext">oidcContext</param>
        /// <param name="requestUrl">RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.</param>
        /// <param name="requestedAccessTokenAudience">requestedAccessTokenAudience</param>
        /// <param name="requestedScope">requestedScope</param>
        /// <param name="sessionId">SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \\\&quot;sid\\\&quot; parameter in the ID Token and in OIDC Front-/Back- channel logout. It&#39;s value can generally be used to associate consecutive login requests by a certain user.</param>
        /// <param name="skip">Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.</param>
        /// <param name="subject">Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and &#x60;skip&#x60; is true, you MUST include this subject type when accepting the login request, or the request will fail.</param>
        /// <param name="varClient">varClient</param>
        [JsonConstructor]
        public KratosOAuth2LoginRequest(Option<string?> challenge = default, Option<KratosOAuth2ConsentRequestOpenIDConnectContext?> oidcContext = default, Option<string?> requestUrl = default, Option<List<string>?> requestedAccessTokenAudience = default, Option<List<string>?> requestedScope = default, Option<string?> sessionId = default, Option<bool?> skip = default, Option<string?> subject = default, Option<KratosOAuth2Client?> varClient = default)
        {
            ChallengeOption = challenge;
            OidcContextOption = oidcContext;
            RequestUrlOption = requestUrl;
            RequestedAccessTokenAudienceOption = requestedAccessTokenAudience;
            RequestedScopeOption = requestedScope;
            SessionIdOption = sessionId;
            SkipOption = skip;
            SubjectOption = subject;
            VarClientOption = varClient;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Challenge
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ChallengeOption { get; private set; }

        /// <summary>
        /// ID is the identifier (\\\&quot;login challenge\\\&quot;) of the login request. It is used to identify the session.
        /// </summary>
        /// <value>ID is the identifier (\\\&quot;login challenge\\\&quot;) of the login request. It is used to identify the session.</value>
        [JsonPropertyName("challenge")]
        public string? Challenge { get { return this.ChallengeOption; } set { this.ChallengeOption = new(value); } }

        /// <summary>
        /// Used to track the state of OidcContext
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosOAuth2ConsentRequestOpenIDConnectContext?> OidcContextOption { get; private set; }

        /// <summary>
        /// Gets or Sets OidcContext
        /// </summary>
        [JsonPropertyName("oidc_context")]
        public KratosOAuth2ConsentRequestOpenIDConnectContext? OidcContext { get { return this.OidcContextOption; } set { this.OidcContextOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequestUrl
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RequestUrlOption { get; private set; }

        /// <summary>
        /// RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.
        /// </summary>
        /// <value>RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters.</value>
        [JsonPropertyName("request_url")]
        public string? RequestUrl { get { return this.RequestUrlOption; } set { this.RequestUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequestedAccessTokenAudience
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RequestedAccessTokenAudienceOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequestedAccessTokenAudience
        /// </summary>
        [JsonPropertyName("requested_access_token_audience")]
        public List<string>? RequestedAccessTokenAudience { get { return this.RequestedAccessTokenAudienceOption; } set { this.RequestedAccessTokenAudienceOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequestedScope
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> RequestedScopeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequestedScope
        /// </summary>
        [JsonPropertyName("requested_scope")]
        public List<string>? RequestedScope { get { return this.RequestedScopeOption; } set { this.RequestedScopeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SessionIdOption { get; private set; }

        /// <summary>
        /// SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \\\&quot;sid\\\&quot; parameter in the ID Token and in OIDC Front-/Back- channel logout. It&#39;s value can generally be used to associate consecutive login requests by a certain user.
        /// </summary>
        /// <value>SessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \\\&quot;sid\\\&quot; parameter in the ID Token and in OIDC Front-/Back- channel logout. It&#39;s value can generally be used to associate consecutive login requests by a certain user.</value>
        [JsonPropertyName("session_id")]
        public string? SessionId { get { return this.SessionIdOption; } set { this.SessionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Skip
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SkipOption { get; private set; }

        /// <summary>
        /// Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.
        /// </summary>
        /// <value>Skip, if true, implies that the client has requested the same scopes from the same user previously. If true, you can skip asking the user to grant the requested scopes, and simply forward the user to the redirect URL.  This feature allows you to update / set session information.</value>
        [JsonPropertyName("skip")]
        public bool? Skip { get { return this.SkipOption; } set { this.SkipOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and &#x60;skip&#x60; is true, you MUST include this subject type when accepting the login request, or the request will fail.
        /// </summary>
        /// <value>Subject is the user ID of the end-user that authenticated. Now, that end user needs to grant or deny the scope requested by the OAuth 2.0 client. If this value is set and &#x60;skip&#x60; is true, you MUST include this subject type when accepting the login request, or the request will fail.</value>
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarClient
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<KratosOAuth2Client?> VarClientOption { get; private set; }

        /// <summary>
        /// Gets or Sets VarClient
        /// </summary>
        [JsonPropertyName("client")]
        public KratosOAuth2Client? VarClient { get { return this.VarClientOption; } set { this.VarClientOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosOAuth2LoginRequest {\n");
            sb.Append("  Challenge: ").Append(Challenge).Append("\n");
            sb.Append("  OidcContext: ").Append(OidcContext).Append("\n");
            sb.Append("  RequestUrl: ").Append(RequestUrl).Append("\n");
            sb.Append("  RequestedAccessTokenAudience: ").Append(RequestedAccessTokenAudience).Append("\n");
            sb.Append("  RequestedScope: ").Append(RequestedScope).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosOAuth2LoginRequest" />
    /// </summary>
    public class KratosOAuth2LoginRequestJsonConverter : JsonConverter<KratosOAuth2LoginRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosOAuth2LoginRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosOAuth2LoginRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> challenge = default;
            Option<KratosOAuth2ConsentRequestOpenIDConnectContext?> oidcContext = default;
            Option<string?> requestUrl = default;
            Option<List<string>?> requestedAccessTokenAudience = default;
            Option<List<string>?> requestedScope = default;
            Option<string?> sessionId = default;
            Option<bool?> skip = default;
            Option<string?> subject = default;
            Option<KratosOAuth2Client?> varClient = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "challenge":
                            challenge = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "oidc_context":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                oidcContext = new Option<KratosOAuth2ConsentRequestOpenIDConnectContext?>(JsonSerializer.Deserialize<KratosOAuth2ConsentRequestOpenIDConnectContext>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "request_url":
                            requestUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "requested_access_token_audience":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                requestedAccessTokenAudience = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "requested_scope":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                requestedScope = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "session_id":
                            sessionId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "skip":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                skip = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "client":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varClient = new Option<KratosOAuth2Client?>(JsonSerializer.Deserialize<KratosOAuth2Client>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (challenge.IsSet && challenge.Value == null)
                throw new ArgumentNullException(nameof(challenge), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (oidcContext.IsSet && oidcContext.Value == null)
                throw new ArgumentNullException(nameof(oidcContext), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (requestUrl.IsSet && requestUrl.Value == null)
                throw new ArgumentNullException(nameof(requestUrl), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (requestedAccessTokenAudience.IsSet && requestedAccessTokenAudience.Value == null)
                throw new ArgumentNullException(nameof(requestedAccessTokenAudience), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (requestedScope.IsSet && requestedScope.Value == null)
                throw new ArgumentNullException(nameof(requestedScope), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (sessionId.IsSet && sessionId.Value == null)
                throw new ArgumentNullException(nameof(sessionId), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (skip.IsSet && skip.Value == null)
                throw new ArgumentNullException(nameof(skip), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class KratosOAuth2LoginRequest.");

            if (varClient.IsSet && varClient.Value == null)
                throw new ArgumentNullException(nameof(varClient), "Property is not nullable for class KratosOAuth2LoginRequest.");

            return new KratosOAuth2LoginRequest(challenge, oidcContext, requestUrl, requestedAccessTokenAudience, requestedScope, sessionId, skip, subject, varClient);
        }

        /// <summary>
        /// Serializes a <see cref="KratosOAuth2LoginRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosOAuth2LoginRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosOAuth2LoginRequest kratosOAuth2LoginRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosOAuth2LoginRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosOAuth2LoginRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosOAuth2LoginRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosOAuth2LoginRequest kratosOAuth2LoginRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosOAuth2LoginRequest.ChallengeOption.IsSet && kratosOAuth2LoginRequest.Challenge == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.Challenge), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.OidcContextOption.IsSet && kratosOAuth2LoginRequest.OidcContext == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.OidcContext), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.RequestUrlOption.IsSet && kratosOAuth2LoginRequest.RequestUrl == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.RequestUrl), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.RequestedAccessTokenAudienceOption.IsSet && kratosOAuth2LoginRequest.RequestedAccessTokenAudience == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.RequestedAccessTokenAudience), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.RequestedScopeOption.IsSet && kratosOAuth2LoginRequest.RequestedScope == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.RequestedScope), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.SessionIdOption.IsSet && kratosOAuth2LoginRequest.SessionId == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.SessionId), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.SubjectOption.IsSet && kratosOAuth2LoginRequest.Subject == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.Subject), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.VarClientOption.IsSet && kratosOAuth2LoginRequest.VarClient == null)
                throw new ArgumentNullException(nameof(kratosOAuth2LoginRequest.VarClient), "Property is required for class KratosOAuth2LoginRequest.");

            if (kratosOAuth2LoginRequest.ChallengeOption.IsSet)
                writer.WriteString("challenge", kratosOAuth2LoginRequest.Challenge);

            if (kratosOAuth2LoginRequest.OidcContextOption.IsSet)
            {
                writer.WritePropertyName("oidc_context");
                JsonSerializer.Serialize(writer, kratosOAuth2LoginRequest.OidcContext, jsonSerializerOptions);
            }
            if (kratosOAuth2LoginRequest.RequestUrlOption.IsSet)
                writer.WriteString("request_url", kratosOAuth2LoginRequest.RequestUrl);

            if (kratosOAuth2LoginRequest.RequestedAccessTokenAudienceOption.IsSet)
            {
                writer.WritePropertyName("requested_access_token_audience");
                JsonSerializer.Serialize(writer, kratosOAuth2LoginRequest.RequestedAccessTokenAudience, jsonSerializerOptions);
            }
            if (kratosOAuth2LoginRequest.RequestedScopeOption.IsSet)
            {
                writer.WritePropertyName("requested_scope");
                JsonSerializer.Serialize(writer, kratosOAuth2LoginRequest.RequestedScope, jsonSerializerOptions);
            }
            if (kratosOAuth2LoginRequest.SessionIdOption.IsSet)
                writer.WriteString("session_id", kratosOAuth2LoginRequest.SessionId);

            if (kratosOAuth2LoginRequest.SkipOption.IsSet)
                writer.WriteBoolean("skip", kratosOAuth2LoginRequest.SkipOption.Value!.Value);

            if (kratosOAuth2LoginRequest.SubjectOption.IsSet)
                writer.WriteString("subject", kratosOAuth2LoginRequest.Subject);

            if (kratosOAuth2LoginRequest.VarClientOption.IsSet)
            {
                writer.WritePropertyName("client");
                JsonSerializer.Serialize(writer, kratosOAuth2LoginRequest.VarClient, jsonSerializerOptions);
            }
        }
    }
}
