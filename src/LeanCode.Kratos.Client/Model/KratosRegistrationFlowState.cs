// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// choose_method: ask the user to choose a method (e.g. registration with email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the registration challenge was passed.
    /// </summary>
    /// <value>choose_method: ask the user to choose a method (e.g. registration with email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the registration challenge was passed.</value>
    public enum KratosRegistrationFlowState
    {
        /// <summary>
        /// Enum ChooseMethod for value: choose_method
        /// </summary>
        ChooseMethod,

        /// <summary>
        /// Enum SentEmail for value: sent_email
        /// </summary>
        SentEmail,

        /// <summary>
        /// Enum PassedChallenge for value: passed_challenge
        /// </summary>
        PassedChallenge
    }

    /// <summary>
    /// Converts <see cref="KratosRegistrationFlowState"/> to and from the JSON value
    /// </summary>
    public static class KratosRegistrationFlowStateValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="KratosRegistrationFlowState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosRegistrationFlowState FromString(string value)
        {
            if (value.Equals("choose_method"))
                return KratosRegistrationFlowState.ChooseMethod;

            if (value.Equals("sent_email"))
                return KratosRegistrationFlowState.SentEmail;

            if (value.Equals("passed_challenge"))
                return KratosRegistrationFlowState.PassedChallenge;

            throw new NotImplementedException($"Could not convert value to type KratosRegistrationFlowState: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="KratosRegistrationFlowState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosRegistrationFlowState? FromStringOrDefault(string value)
        {
            if (value.Equals("choose_method"))
                return KratosRegistrationFlowState.ChooseMethod;

            if (value.Equals("sent_email"))
                return KratosRegistrationFlowState.SentEmail;

            if (value.Equals("passed_challenge"))
                return KratosRegistrationFlowState.PassedChallenge;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="KratosRegistrationFlowState"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(KratosRegistrationFlowState value)
        {
            if (value == KratosRegistrationFlowState.ChooseMethod)
                return "choose_method";

            if (value == KratosRegistrationFlowState.SentEmail)
                return "sent_email";

            if (value == KratosRegistrationFlowState.PassedChallenge)
                return "passed_challenge";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosRegistrationFlowState"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class KratosRegistrationFlowStateJsonConverter : JsonConverter<KratosRegistrationFlowState>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosRegistrationFlowState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosRegistrationFlowState? result = rawValue == null
                ? null
                : KratosRegistrationFlowStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the KratosRegistrationFlowState to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosRegistrationFlowState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosRegistrationFlowState kratosRegistrationFlowState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosRegistrationFlowState.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosRegistrationFlowState"/>
    /// </summary>
    public class KratosRegistrationFlowStateNullableJsonConverter : JsonConverter<KratosRegistrationFlowState?>
    {
        /// <summary>
        /// Returns a KratosRegistrationFlowState from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosRegistrationFlowState? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosRegistrationFlowState? result = rawValue == null
                ? null
                : KratosRegistrationFlowStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosRegistrationFlowState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosRegistrationFlowState? kratosRegistrationFlowState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosRegistrationFlowState?.ToString() ?? "null");
        }
    }
}
