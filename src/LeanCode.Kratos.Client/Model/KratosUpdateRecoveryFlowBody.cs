// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Recovery Flow Request Body
    /// </summary>
    public partial class KratosUpdateRecoveryFlowBody
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateRecoveryFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateRecoveryFlowWithLinkMethod"></param>
        public KratosUpdateRecoveryFlowBody(KratosUpdateRecoveryFlowWithLinkMethod kratosUpdateRecoveryFlowWithLinkMethod)
        {
            KratosUpdateRecoveryFlowWithLinkMethod = kratosUpdateRecoveryFlowWithLinkMethod;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateRecoveryFlowBody" /> class.
        /// </summary>
        /// <param name="kratosUpdateRecoveryFlowWithCodeMethod"></param>
        public KratosUpdateRecoveryFlowBody(KratosUpdateRecoveryFlowWithCodeMethod kratosUpdateRecoveryFlowWithCodeMethod)
        {
            KratosUpdateRecoveryFlowWithCodeMethod = kratosUpdateRecoveryFlowWithCodeMethod;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link RecoveryStrategyLink code RecoveryStrategyCode
        /// </summary>
        /// <value>Method is the method that should be used for this recovery flow  Allowed values are &#x60;link&#x60; and &#x60;code&#x60;. link RecoveryStrategyLink code RecoveryStrategyCode</value>
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            Link,

            /// <summary>
            /// Enum Code for value: code
            /// </summary>
            Code
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static MethodEnum MethodEnumFromString(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            throw new NotImplementedException($"Could not convert value to type MethodEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="MethodEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static MethodEnum? MethodEnumFromStringOrDefault(string value)
        {
            if (value.Equals("link"))
                return MethodEnum.Link;

            if (value.Equals("code"))
                return MethodEnum.Code;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="MethodEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string MethodEnumToJsonValue(MethodEnum value)
        {
            if (value == MethodEnum.Link)
                return "link";

            if (value == MethodEnum.Code)
                return "code";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets KratosUpdateRecoveryFlowWithLinkMethod
        /// </summary>
        public KratosUpdateRecoveryFlowWithLinkMethod? KratosUpdateRecoveryFlowWithLinkMethod { get; set; }

        /// <summary>
        /// Gets or Sets KratosUpdateRecoveryFlowWithCodeMethod
        /// </summary>
        public KratosUpdateRecoveryFlowWithCodeMethod? KratosUpdateRecoveryFlowWithCodeMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateRecoveryFlowBody {\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateRecoveryFlowBody" />
    /// </summary>
    public class KratosUpdateRecoveryFlowBodyJsonConverter : JsonConverter<KratosUpdateRecoveryFlowBody>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateRecoveryFlowBody" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateRecoveryFlowBody Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<KratosUpdateRecoveryFlowBody.MethodEnum?> method = default;

            KratosUpdateRecoveryFlowWithLinkMethod? kratosUpdateRecoveryFlowWithLinkMethod = null;
            KratosUpdateRecoveryFlowWithCodeMethod? kratosUpdateRecoveryFlowWithCodeMethod = null;

            Utf8JsonReader utf8JsonReaderDiscriminator = utf8JsonReader;
            while (utf8JsonReaderDiscriminator.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderDiscriminator.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth)
                    break;

                if (utf8JsonReaderDiscriminator.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderDiscriminator.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReaderDiscriminator.GetString();
                    utf8JsonReaderDiscriminator.Read();
                    if (localVarJsonPropertyName?.Equals("method") ?? false)
                    {
                        string? discriminator = utf8JsonReaderDiscriminator.GetString();
                        if (discriminator?.Equals("code") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUpdateRecoveryFlowWithCodeMethod = utf8JsonReader;
                            kratosUpdateRecoveryFlowWithCodeMethod = JsonSerializer.Deserialize<KratosUpdateRecoveryFlowWithCodeMethod>(ref utf8JsonReaderKratosUpdateRecoveryFlowWithCodeMethod, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("link") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUpdateRecoveryFlowWithLinkMethod = utf8JsonReader;
                            kratosUpdateRecoveryFlowWithLinkMethod = JsonSerializer.Deserialize<KratosUpdateRecoveryFlowWithLinkMethod>(ref utf8JsonReaderKratosUpdateRecoveryFlowWithLinkMethod, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateRecoveryFlowWithCodeMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUpdateRecoveryFlowWithCodeMethod = utf8JsonReader;
                            kratosUpdateRecoveryFlowWithCodeMethod = JsonSerializer.Deserialize<KratosUpdateRecoveryFlowWithCodeMethod>(ref utf8JsonReaderKratosUpdateRecoveryFlowWithCodeMethod, jsonSerializerOptions);
                        }
                        if (discriminator?.Equals("updateRecoveryFlowWithLinkMethod") ?? false)
                        {
                            Utf8JsonReader utf8JsonReaderKratosUpdateRecoveryFlowWithLinkMethod = utf8JsonReader;
                            kratosUpdateRecoveryFlowWithLinkMethod = JsonSerializer.Deserialize<KratosUpdateRecoveryFlowWithLinkMethod>(ref utf8JsonReaderKratosUpdateRecoveryFlowWithLinkMethod, jsonSerializerOptions);
                        }
                    }
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            string? methodRawValue = utf8JsonReader.GetString();
                            if (methodRawValue != null)
                                method = new Option<KratosUpdateRecoveryFlowBody.MethodEnum?>(KratosUpdateRecoveryFlowBody.MethodEnumFromStringOrDefault(methodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateRecoveryFlowBody.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateRecoveryFlowBody.");

            if (kratosUpdateRecoveryFlowWithLinkMethod != null)
                return new KratosUpdateRecoveryFlowBody(kratosUpdateRecoveryFlowWithLinkMethod);

            if (kratosUpdateRecoveryFlowWithCodeMethod != null)
                return new KratosUpdateRecoveryFlowBody(kratosUpdateRecoveryFlowWithCodeMethod);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateRecoveryFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (kratosUpdateRecoveryFlowBody.KratosUpdateRecoveryFlowWithLinkMethod != null)
            {
                KratosUpdateRecoveryFlowWithLinkMethodJsonConverter kratosUpdateRecoveryFlowWithLinkMethodJsonConverter = (KratosUpdateRecoveryFlowWithLinkMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateRecoveryFlowBody.KratosUpdateRecoveryFlowWithLinkMethod.GetType()));
                kratosUpdateRecoveryFlowWithLinkMethodJsonConverter.WriteProperties(writer, kratosUpdateRecoveryFlowBody.KratosUpdateRecoveryFlowWithLinkMethod, jsonSerializerOptions);
            }

            if (kratosUpdateRecoveryFlowBody.KratosUpdateRecoveryFlowWithCodeMethod != null)
            {
                KratosUpdateRecoveryFlowWithCodeMethodJsonConverter kratosUpdateRecoveryFlowWithCodeMethodJsonConverter = (KratosUpdateRecoveryFlowWithCodeMethodJsonConverter) jsonSerializerOptions.Converters.First(c => c.CanConvert(kratosUpdateRecoveryFlowBody.KratosUpdateRecoveryFlowWithCodeMethod.GetType()));
                kratosUpdateRecoveryFlowWithCodeMethodJsonConverter.WriteProperties(writer, kratosUpdateRecoveryFlowBody.KratosUpdateRecoveryFlowWithCodeMethod, jsonSerializerOptions);
            }

            WriteProperties(writer, kratosUpdateRecoveryFlowBody, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateRecoveryFlowBody" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }
}
