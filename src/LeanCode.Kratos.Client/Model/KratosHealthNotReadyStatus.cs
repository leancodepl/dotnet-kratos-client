// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosHealthNotReadyStatus
    /// </summary>
    public partial class KratosHealthNotReadyStatus
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosHealthNotReadyStatus" /> class.
        /// </summary>
        /// <param name="errors">Errors contains a list of errors that caused the not ready status.</param>
        [JsonConstructor]
        public KratosHealthNotReadyStatus(Option<Dictionary<string, string>?> errors = default)
        {
            ErrorsOption = errors;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Errors
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> ErrorsOption { get; private set; }

        /// <summary>
        /// Errors contains a list of errors that caused the not ready status.
        /// </summary>
        /// <value>Errors contains a list of errors that caused the not ready status.</value>
        [JsonPropertyName("errors")]
        public Dictionary<string, string>? Errors { get { return this.ErrorsOption; } set { this.ErrorsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosHealthNotReadyStatus {\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosHealthNotReadyStatus" />
    /// </summary>
    public class KratosHealthNotReadyStatusJsonConverter : JsonConverter<KratosHealthNotReadyStatus>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosHealthNotReadyStatus" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosHealthNotReadyStatus Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, string>?> errors = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "errors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                errors = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (errors.IsSet && errors.Value == null)
                throw new ArgumentNullException(nameof(errors), "Property is not nullable for class KratosHealthNotReadyStatus.");

            return new KratosHealthNotReadyStatus(errors);
        }

        /// <summary>
        /// Serializes a <see cref="KratosHealthNotReadyStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosHealthNotReadyStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosHealthNotReadyStatus kratosHealthNotReadyStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosHealthNotReadyStatus, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosHealthNotReadyStatus" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosHealthNotReadyStatus"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosHealthNotReadyStatus kratosHealthNotReadyStatus, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosHealthNotReadyStatus.ErrorsOption.IsSet && kratosHealthNotReadyStatus.Errors == null)
                throw new ArgumentNullException(nameof(kratosHealthNotReadyStatus.Errors), "Property is required for class KratosHealthNotReadyStatus.");

            if (kratosHealthNotReadyStatus.ErrorsOption.IsSet)
            {
                writer.WritePropertyName("errors");
                JsonSerializer.Serialize(writer, kratosHealthNotReadyStatus.Errors, jsonSerializerOptions);
            }
        }
    }
}
