// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosGenericError
    /// </summary>
    public partial class KratosGenericError
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosGenericError" /> class.
        /// </summary>
        /// <param name="message">Error message  The error&#39;s message.</param>
        /// <param name="code">The status code</param>
        /// <param name="debug">Debug information  This field is often not exposed to protect against leaking sensitive information.</param>
        /// <param name="details">Further error details</param>
        /// <param name="id">The error ID  Useful when trying to identify various errors in application logic.</param>
        /// <param name="reason">A human-readable reason for the error</param>
        /// <param name="request">The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.</param>
        /// <param name="status">The status description</param>
        [JsonConstructor]
        public KratosGenericError(string message, Option<long?> code = default, Option<string?> debug = default, Option<Object?> details = default, Option<string?> id = default, Option<string?> reason = default, Option<string?> request = default, Option<string?> status = default)
        {
            Message = message;
            CodeOption = code;
            DebugOption = debug;
            DetailsOption = details;
            IdOption = id;
            ReasonOption = reason;
            RequestOption = request;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Error message  The error&#39;s message.
        /// </summary>
        /// <value>Error message  The error&#39;s message.</value>
        /// <example>The resource could not be found</example>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CodeOption { get; private set; }

        /// <summary>
        /// The status code
        /// </summary>
        /// <value>The status code</value>
        /// <example>404</example>
        [JsonPropertyName("code")]
        public long? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Debug
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DebugOption { get; private set; }

        /// <summary>
        /// Debug information  This field is often not exposed to protect against leaking sensitive information.
        /// </summary>
        /// <value>Debug information  This field is often not exposed to protect against leaking sensitive information.</value>
        /// <example>SQL field &quot;foo&quot; is not a bool.</example>
        [JsonPropertyName("debug")]
        public string? Debug { get { return this.DebugOption; } set { this.DebugOption = new(value); } }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DetailsOption { get; private set; }

        /// <summary>
        /// Further error details
        /// </summary>
        /// <value>Further error details</value>
        [JsonPropertyName("details")]
        public Object? Details { get { return this.DetailsOption; } set { this.DetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// The error ID  Useful when trying to identify various errors in application logic.
        /// </summary>
        /// <value>The error ID  Useful when trying to identify various errors in application logic.</value>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reason
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReasonOption { get; private set; }

        /// <summary>
        /// A human-readable reason for the error
        /// </summary>
        /// <value>A human-readable reason for the error</value>
        /// <example>User with ID 1234 does not exist.</example>
        [JsonPropertyName("reason")]
        public string? Reason { get { return this.ReasonOption; } set { this.ReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of Request
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RequestOption { get; private set; }

        /// <summary>
        /// The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.
        /// </summary>
        /// <value>The request ID  The request ID is often exposed internally in order to trace errors across service architectures. This is often a UUID.</value>
        /// <example>d7ef54b1-ec15-46e6-bccb-524b82c035e6</example>
        [JsonPropertyName("request")]
        public string? Request { get { return this.RequestOption; } set { this.RequestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// The status description
        /// </summary>
        /// <value>The status description</value>
        /// <example>Not Found</example>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosGenericError {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosGenericError" />
    /// </summary>
    public class KratosGenericErrorJsonConverter : JsonConverter<KratosGenericError>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosGenericError" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosGenericError Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> message = default;
            Option<long?> code = default;
            Option<string?> debug = default;
            Option<Object?> details = default;
            Option<string?> id = default;
            Option<string?> reason = default;
            Option<string?> request = default;
            Option<string?> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                code = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "debug":
                            debug = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "details":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                details = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "reason":
                            reason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "request":
                            request = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class KratosGenericError.", nameof(message));

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class KratosGenericError.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class KratosGenericError.");

            if (debug.IsSet && debug.Value == null)
                throw new ArgumentNullException(nameof(debug), "Property is not nullable for class KratosGenericError.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class KratosGenericError.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosGenericError.");

            if (reason.IsSet && reason.Value == null)
                throw new ArgumentNullException(nameof(reason), "Property is not nullable for class KratosGenericError.");

            if (request.IsSet && request.Value == null)
                throw new ArgumentNullException(nameof(request), "Property is not nullable for class KratosGenericError.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class KratosGenericError.");

            return new KratosGenericError(message.Value!, code, debug, details, id, reason, request, status);
        }

        /// <summary>
        /// Serializes a <see cref="KratosGenericError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosGenericError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosGenericError kratosGenericError, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosGenericError, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosGenericError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosGenericError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosGenericError kratosGenericError, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosGenericError.Message == null)
                throw new ArgumentNullException(nameof(kratosGenericError.Message), "Property is required for class KratosGenericError.");

            if (kratosGenericError.DebugOption.IsSet && kratosGenericError.Debug == null)
                throw new ArgumentNullException(nameof(kratosGenericError.Debug), "Property is required for class KratosGenericError.");

            if (kratosGenericError.DetailsOption.IsSet && kratosGenericError.Details == null)
                throw new ArgumentNullException(nameof(kratosGenericError.Details), "Property is required for class KratosGenericError.");

            if (kratosGenericError.IdOption.IsSet && kratosGenericError.Id == null)
                throw new ArgumentNullException(nameof(kratosGenericError.Id), "Property is required for class KratosGenericError.");

            if (kratosGenericError.ReasonOption.IsSet && kratosGenericError.Reason == null)
                throw new ArgumentNullException(nameof(kratosGenericError.Reason), "Property is required for class KratosGenericError.");

            if (kratosGenericError.RequestOption.IsSet && kratosGenericError.Request == null)
                throw new ArgumentNullException(nameof(kratosGenericError.Request), "Property is required for class KratosGenericError.");

            if (kratosGenericError.StatusOption.IsSet && kratosGenericError.Status == null)
                throw new ArgumentNullException(nameof(kratosGenericError.Status), "Property is required for class KratosGenericError.");

            writer.WriteString("message", kratosGenericError.Message);

            if (kratosGenericError.CodeOption.IsSet)
                writer.WriteNumber("code", kratosGenericError.CodeOption.Value!.Value);

            if (kratosGenericError.DebugOption.IsSet)
                writer.WriteString("debug", kratosGenericError.Debug);

            if (kratosGenericError.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, kratosGenericError.Details, jsonSerializerOptions);
            }
            if (kratosGenericError.IdOption.IsSet)
                writer.WriteString("id", kratosGenericError.Id);

            if (kratosGenericError.ReasonOption.IsSet)
                writer.WriteString("reason", kratosGenericError.Reason);

            if (kratosGenericError.RequestOption.IsSet)
                writer.WriteString("request", kratosGenericError.Request);

            if (kratosGenericError.StatusOption.IsSet)
                writer.WriteString("status", kratosGenericError.Status);
        }
    }
}
