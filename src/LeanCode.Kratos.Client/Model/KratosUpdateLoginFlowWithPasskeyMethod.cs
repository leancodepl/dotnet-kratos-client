// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// Update Login Flow with Passkey Method
    /// </summary>
    public partial class KratosUpdateLoginFlowWithPasskeyMethod
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosUpdateLoginFlowWithPasskeyMethod" /> class.
        /// </summary>
        /// <param name="method">Method should be set to \&quot;passkey\&quot; when logging in using the Passkey strategy.</param>
        /// <param name="csrfToken">Sending the anti-csrf token is only required for browser login flows.</param>
        /// <param name="passkeyLogin">Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.</param>
        [JsonConstructor]
        public KratosUpdateLoginFlowWithPasskeyMethod(string method, Option<string?> csrfToken = default, Option<string?> passkeyLogin = default)
        {
            Method = method;
            CsrfTokenOption = csrfToken;
            PasskeyLoginOption = passkeyLogin;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Method should be set to \&quot;passkey\&quot; when logging in using the Passkey strategy.
        /// </summary>
        /// <value>Method should be set to \&quot;passkey\&quot; when logging in using the Passkey strategy.</value>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// Used to track the state of CsrfToken
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CsrfTokenOption { get; private set; }

        /// <summary>
        /// Sending the anti-csrf token is only required for browser login flows.
        /// </summary>
        /// <value>Sending the anti-csrf token is only required for browser login flows.</value>
        [JsonPropertyName("csrf_token")]
        public string? CsrfToken { get { return this.CsrfTokenOption; } set { this.CsrfTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of PasskeyLogin
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PasskeyLoginOption { get; private set; }

        /// <summary>
        /// Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.
        /// </summary>
        /// <value>Login a WebAuthn Security Key  This must contain the ID of the WebAuthN connection.</value>
        [JsonPropertyName("passkey_login")]
        public string? PasskeyLogin { get { return this.PasskeyLoginOption; } set { this.PasskeyLoginOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosUpdateLoginFlowWithPasskeyMethod {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  CsrfToken: ").Append(CsrfToken).Append("\n");
            sb.Append("  PasskeyLogin: ").Append(PasskeyLogin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosUpdateLoginFlowWithPasskeyMethod" />
    /// </summary>
    public class KratosUpdateLoginFlowWithPasskeyMethodJsonConverter : JsonConverter<KratosUpdateLoginFlowWithPasskeyMethod>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosUpdateLoginFlowWithPasskeyMethod" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosUpdateLoginFlowWithPasskeyMethod Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> method = default;
            Option<string?> csrfToken = default;
            Option<string?> passkeyLogin = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "csrf_token":
                            csrfToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "passkey_login":
                            passkeyLogin = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class KratosUpdateLoginFlowWithPasskeyMethod.", nameof(method));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class KratosUpdateLoginFlowWithPasskeyMethod.");

            if (csrfToken.IsSet && csrfToken.Value == null)
                throw new ArgumentNullException(nameof(csrfToken), "Property is not nullable for class KratosUpdateLoginFlowWithPasskeyMethod.");

            if (passkeyLogin.IsSet && passkeyLogin.Value == null)
                throw new ArgumentNullException(nameof(passkeyLogin), "Property is not nullable for class KratosUpdateLoginFlowWithPasskeyMethod.");

            return new KratosUpdateLoginFlowWithPasskeyMethod(method.Value!, csrfToken, passkeyLogin);
        }

        /// <summary>
        /// Serializes a <see cref="KratosUpdateLoginFlowWithPasskeyMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowWithPasskeyMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosUpdateLoginFlowWithPasskeyMethod kratosUpdateLoginFlowWithPasskeyMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosUpdateLoginFlowWithPasskeyMethod, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosUpdateLoginFlowWithPasskeyMethod" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosUpdateLoginFlowWithPasskeyMethod"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosUpdateLoginFlowWithPasskeyMethod kratosUpdateLoginFlowWithPasskeyMethod, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosUpdateLoginFlowWithPasskeyMethod.Method == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithPasskeyMethod.Method), "Property is required for class KratosUpdateLoginFlowWithPasskeyMethod.");

            if (kratosUpdateLoginFlowWithPasskeyMethod.CsrfTokenOption.IsSet && kratosUpdateLoginFlowWithPasskeyMethod.CsrfToken == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithPasskeyMethod.CsrfToken), "Property is required for class KratosUpdateLoginFlowWithPasskeyMethod.");

            if (kratosUpdateLoginFlowWithPasskeyMethod.PasskeyLoginOption.IsSet && kratosUpdateLoginFlowWithPasskeyMethod.PasskeyLogin == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowWithPasskeyMethod.PasskeyLogin), "Property is required for class KratosUpdateLoginFlowWithPasskeyMethod.");

            writer.WriteString("method", kratosUpdateLoginFlowWithPasskeyMethod.Method);

            if (kratosUpdateLoginFlowWithPasskeyMethod.CsrfTokenOption.IsSet)
                writer.WriteString("csrf_token", kratosUpdateLoginFlowWithPasskeyMethod.CsrfToken);

            if (kratosUpdateLoginFlowWithPasskeyMethod.PasskeyLoginOption.IsSet)
                writer.WriteString("passkey_login", kratosUpdateLoginFlowWithPasskeyMethod.PasskeyLogin);
        }
    }
}
