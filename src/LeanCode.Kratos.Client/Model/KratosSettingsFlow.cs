// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)
    /// </summary>
    public partial class KratosSettingsFlow
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosSettingsFlow" /> class.
        /// </summary>
        /// <param name="expiresAt">ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.</param>
        /// <param name="id">ID represents the flow&#39;s unique ID. When performing the settings flow, this represents the id in the settings ui&#39;s query parameter: http://&lt;selfservice.flows.settings.ui_url&gt;?flow&#x3D;&lt;id&gt;</param>
        /// <param name="identity">identity</param>
        /// <param name="issuedAt">IssuedAt is the time (UTC) when the flow occurred.</param>
        /// <param name="requestUrl">RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.</param>
        /// <param name="type">The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.</param>
        /// <param name="ui">ui</param>
        /// <param name="active">Active, if set, contains the registration method that is being used. It is initially not set.</param>
        /// <param name="continueWith">Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user&#39;s registration.</param>
        /// <param name="returnTo">ReturnTo contains the requested return_to URL.</param>
        /// <param name="state">State represents the state of this flow. It knows two states:  show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \&quot;please use a valid phone number\&quot;) data was sent.</param>
        /// <param name="transientPayload">TransientPayload is used to pass data from the settings flow to hooks and email templates</param>
        [JsonConstructor]
        public KratosSettingsFlow(DateTime expiresAt, string id, KratosIdentity identity, DateTime issuedAt, string requestUrl, string type, KratosUiContainer ui, Option<string?> active = default, Option<List<KratosContinueWith>?> continueWith = default, Option<string?> returnTo = default, Object? state = default, Option<Object?> transientPayload = default)
        {
            ExpiresAt = expiresAt;
            Id = id;
            Identity = identity;
            IssuedAt = issuedAt;
            RequestUrl = requestUrl;
            Type = type;
            Ui = ui;
            ActiveOption = active;
            ContinueWithOption = continueWith;
            ReturnToOption = returnTo;
            State = state;
            TransientPayloadOption = transientPayload;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.
        /// </summary>
        /// <value>ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.</value>
        [JsonPropertyName("expires_at")]
        public DateTime ExpiresAt { get; set; }

        /// <summary>
        /// ID represents the flow&#39;s unique ID. When performing the settings flow, this represents the id in the settings ui&#39;s query parameter: http://&lt;selfservice.flows.settings.ui_url&gt;?flow&#x3D;&lt;id&gt;
        /// </summary>
        /// <value>ID represents the flow&#39;s unique ID. When performing the settings flow, this represents the id in the settings ui&#39;s query parameter: http://&lt;selfservice.flows.settings.ui_url&gt;?flow&#x3D;&lt;id&gt;</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Identity
        /// </summary>
        [JsonPropertyName("identity")]
        public KratosIdentity Identity { get; set; }

        /// <summary>
        /// IssuedAt is the time (UTC) when the flow occurred.
        /// </summary>
        /// <value>IssuedAt is the time (UTC) when the flow occurred.</value>
        [JsonPropertyName("issued_at")]
        public DateTime IssuedAt { get; set; }

        /// <summary>
        /// RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.
        /// </summary>
        /// <value>RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL&#39;s path or query for example.</value>
        [JsonPropertyName("request_url")]
        public string RequestUrl { get; set; }

        /// <summary>
        /// The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.
        /// </summary>
        /// <value>The flow type can either be &#x60;api&#x60; or &#x60;browser&#x60;.</value>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Ui
        /// </summary>
        [JsonPropertyName("ui")]
        public KratosUiContainer Ui { get; set; }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActiveOption { get; private set; }

        /// <summary>
        /// Active, if set, contains the registration method that is being used. It is initially not set.
        /// </summary>
        /// <value>Active, if set, contains the registration method that is being used. It is initially not set.</value>
        [JsonPropertyName("active")]
        public string? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContinueWith
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<KratosContinueWith>?> ContinueWithOption { get; private set; }

        /// <summary>
        /// Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user&#39;s registration.
        /// </summary>
        /// <value>Contains a list of actions, that could follow this flow  It can, for example, contain a reference to the verification flow, created as part of the user&#39;s registration.</value>
        [JsonPropertyName("continue_with")]
        public List<KratosContinueWith>? ContinueWith { get { return this.ContinueWithOption; } set { this.ContinueWithOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReturnTo
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReturnToOption { get; private set; }

        /// <summary>
        /// ReturnTo contains the requested return_to URL.
        /// </summary>
        /// <value>ReturnTo contains the requested return_to URL.</value>
        [JsonPropertyName("return_to")]
        public string? ReturnTo { get { return this.ReturnToOption; } set { this.ReturnToOption = new(value); } }

        /// <summary>
        /// State represents the state of this flow. It knows two states:  show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \&quot;please use a valid phone number\&quot;) data was sent.
        /// </summary>
        /// <value>State represents the state of this flow. It knows two states:  show_form: No user data has been collected, or it is invalid, and thus the form should be shown. success: Indicates that the settings flow has been updated successfully with the provided data. Done will stay true when repeatedly checking. If set to true, done will revert back to false only when a flow with invalid (e.g. \&quot;please use a valid phone number\&quot;) data was sent.</value>
        [JsonPropertyName("state")]
        public Object? State { get; set; }

        /// <summary>
        /// Used to track the state of TransientPayload
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TransientPayloadOption { get; private set; }

        /// <summary>
        /// TransientPayload is used to pass data from the settings flow to hooks and email templates
        /// </summary>
        /// <value>TransientPayload is used to pass data from the settings flow to hooks and email templates</value>
        [JsonPropertyName("transient_payload")]
        public Object? TransientPayload { get { return this.TransientPayloadOption; } set { this.TransientPayloadOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosSettingsFlow {\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("  RequestUrl: ").Append(RequestUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Ui: ").Append(Ui).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ContinueWith: ").Append(ContinueWith).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TransientPayload: ").Append(TransientPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosSettingsFlow" />
    /// </summary>
    public class KratosSettingsFlowJsonConverter : JsonConverter<KratosSettingsFlow>
    {
        /// <summary>
        /// The format to use to serialize ExpiresAt
        /// </summary>
        public static string ExpiresAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize IssuedAt
        /// </summary>
        public static string IssuedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="KratosSettingsFlow" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosSettingsFlow Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> expiresAt = default;
            Option<string?> id = default;
            Option<KratosIdentity?> identity = default;
            Option<DateTime?> issuedAt = default;
            Option<string?> requestUrl = default;
            Option<string?> type = default;
            Option<KratosUiContainer?> ui = default;
            Option<string?> active = default;
            Option<List<KratosContinueWith>?> continueWith = default;
            Option<string?> returnTo = default;
            Option<Object?> state = default;
            Option<Object?> transientPayload = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "expires_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "identity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                identity = new Option<KratosIdentity?>(JsonSerializer.Deserialize<KratosIdentity>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "issued_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "request_url":
                            requestUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ui":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ui = new Option<KratosUiContainer?>(JsonSerializer.Deserialize<KratosUiContainer>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "active":
                            active = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "continue_with":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                continueWith = new Option<List<KratosContinueWith>?>(JsonSerializer.Deserialize<List<KratosContinueWith>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "return_to":
                            returnTo = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                state = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transient_payload":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transientPayload = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(expiresAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(id));

            if (!identity.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(identity));

            if (!issuedAt.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(issuedAt));

            if (!requestUrl.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(requestUrl));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(type));

            if (!ui.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(ui));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class KratosSettingsFlow.", nameof(state));

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class KratosSettingsFlow.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosSettingsFlow.");

            if (identity.IsSet && identity.Value == null)
                throw new ArgumentNullException(nameof(identity), "Property is not nullable for class KratosSettingsFlow.");

            if (issuedAt.IsSet && issuedAt.Value == null)
                throw new ArgumentNullException(nameof(issuedAt), "Property is not nullable for class KratosSettingsFlow.");

            if (requestUrl.IsSet && requestUrl.Value == null)
                throw new ArgumentNullException(nameof(requestUrl), "Property is not nullable for class KratosSettingsFlow.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class KratosSettingsFlow.");

            if (ui.IsSet && ui.Value == null)
                throw new ArgumentNullException(nameof(ui), "Property is not nullable for class KratosSettingsFlow.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class KratosSettingsFlow.");

            if (continueWith.IsSet && continueWith.Value == null)
                throw new ArgumentNullException(nameof(continueWith), "Property is not nullable for class KratosSettingsFlow.");

            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo), "Property is not nullable for class KratosSettingsFlow.");

            if (transientPayload.IsSet && transientPayload.Value == null)
                throw new ArgumentNullException(nameof(transientPayload), "Property is not nullable for class KratosSettingsFlow.");

            return new KratosSettingsFlow(expiresAt.Value!.Value!, id.Value!, identity.Value!, issuedAt.Value!.Value!, requestUrl.Value!, type.Value!, ui.Value!, active, continueWith, returnTo, state.Value!, transientPayload);
        }

        /// <summary>
        /// Serializes a <see cref="KratosSettingsFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSettingsFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosSettingsFlow kratosSettingsFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosSettingsFlow, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosSettingsFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosSettingsFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosSettingsFlow kratosSettingsFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosSettingsFlow.Id == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.Id), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.Identity == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.Identity), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.RequestUrl == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.RequestUrl), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.Type == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.Type), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.Ui == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.Ui), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.ActiveOption.IsSet && kratosSettingsFlow.Active == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.Active), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.ContinueWithOption.IsSet && kratosSettingsFlow.ContinueWith == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.ContinueWith), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.ReturnToOption.IsSet && kratosSettingsFlow.ReturnTo == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.ReturnTo), "Property is required for class KratosSettingsFlow.");

            if (kratosSettingsFlow.TransientPayloadOption.IsSet && kratosSettingsFlow.TransientPayload == null)
                throw new ArgumentNullException(nameof(kratosSettingsFlow.TransientPayload), "Property is required for class KratosSettingsFlow.");

            writer.WriteString("expires_at", kratosSettingsFlow.ExpiresAt.ToString(ExpiresAtFormat));

            writer.WriteString("id", kratosSettingsFlow.Id);

            writer.WritePropertyName("identity");
            JsonSerializer.Serialize(writer, kratosSettingsFlow.Identity, jsonSerializerOptions);
            writer.WriteString("issued_at", kratosSettingsFlow.IssuedAt.ToString(IssuedAtFormat));

            writer.WriteString("request_url", kratosSettingsFlow.RequestUrl);

            writer.WriteString("type", kratosSettingsFlow.Type);

            writer.WritePropertyName("ui");
            JsonSerializer.Serialize(writer, kratosSettingsFlow.Ui, jsonSerializerOptions);
            if (kratosSettingsFlow.ActiveOption.IsSet)
                writer.WriteString("active", kratosSettingsFlow.Active);

            if (kratosSettingsFlow.ContinueWithOption.IsSet)
            {
                writer.WritePropertyName("continue_with");
                JsonSerializer.Serialize(writer, kratosSettingsFlow.ContinueWith, jsonSerializerOptions);
            }
            if (kratosSettingsFlow.ReturnToOption.IsSet)
                writer.WriteString("return_to", kratosSettingsFlow.ReturnTo);

            if (kratosSettingsFlow.State != null)
            {
                writer.WritePropertyName("state");
                JsonSerializer.Serialize(writer, kratosSettingsFlow.State, jsonSerializerOptions);
            }
            else
                writer.WriteNull("state");
            if (kratosSettingsFlow.TransientPayloadOption.IsSet)
            {
                writer.WritePropertyName("transient_payload");
                JsonSerializer.Serialize(writer, kratosSettingsFlow.TransientPayload, jsonSerializerOptions);
            }
        }
    }
}
