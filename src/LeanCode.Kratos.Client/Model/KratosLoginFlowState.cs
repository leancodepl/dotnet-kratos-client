// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// The state represents the state of the login flow.  choose_method: ask the user to choose a method (e.g. login account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the login challenge was passed.
    /// </summary>
    /// <value>The state represents the state of the login flow.  choose_method: ask the user to choose a method (e.g. login account via email) sent_email: the email has been sent to the user passed_challenge: the request was successful and the login challenge was passed.</value>
    public enum KratosLoginFlowState
    {
        /// <summary>
        /// Enum ChooseMethod for value: choose_method
        /// </summary>
        ChooseMethod,

        /// <summary>
        /// Enum SentEmail for value: sent_email
        /// </summary>
        SentEmail,

        /// <summary>
        /// Enum PassedChallenge for value: passed_challenge
        /// </summary>
        PassedChallenge
    }

    /// <summary>
    /// Converts <see cref="KratosLoginFlowState"/> to and from the JSON value
    /// </summary>
    public static class KratosLoginFlowStateValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="KratosLoginFlowState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosLoginFlowState FromString(string value)
        {
            if (value.Equals("choose_method"))
                return KratosLoginFlowState.ChooseMethod;

            if (value.Equals("sent_email"))
                return KratosLoginFlowState.SentEmail;

            if (value.Equals("passed_challenge"))
                return KratosLoginFlowState.PassedChallenge;

            throw new NotImplementedException($"Could not convert value to type KratosLoginFlowState: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="KratosLoginFlowState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KratosLoginFlowState? FromStringOrDefault(string value)
        {
            if (value.Equals("choose_method"))
                return KratosLoginFlowState.ChooseMethod;

            if (value.Equals("sent_email"))
                return KratosLoginFlowState.SentEmail;

            if (value.Equals("passed_challenge"))
                return KratosLoginFlowState.PassedChallenge;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="KratosLoginFlowState"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(KratosLoginFlowState value)
        {
            if (value == KratosLoginFlowState.ChooseMethod)
                return "choose_method";

            if (value == KratosLoginFlowState.SentEmail)
                return "sent_email";

            if (value == KratosLoginFlowState.PassedChallenge)
                return "passed_challenge";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosLoginFlowState"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class KratosLoginFlowStateJsonConverter : JsonConverter<KratosLoginFlowState>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosLoginFlowState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosLoginFlowState? result = rawValue == null
                ? null
                : KratosLoginFlowStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the KratosLoginFlowState to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosLoginFlowState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosLoginFlowState kratosLoginFlowState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosLoginFlowState.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosLoginFlowState"/>
    /// </summary>
    public class KratosLoginFlowStateNullableJsonConverter : JsonConverter<KratosLoginFlowState?>
    {
        /// <summary>
        /// Returns a KratosLoginFlowState from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KratosLoginFlowState? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            KratosLoginFlowState? result = rawValue == null
                ? null
                : KratosLoginFlowStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosLoginFlowState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KratosLoginFlowState? kratosLoginFlowState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kratosLoginFlowState?.ToString() ?? "null");
        }
    }
}
