// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using LeanCode.Kratos.Client.Client;

namespace LeanCode.Kratos.Client.Model
{
    /// <summary>
    /// KratosContinueWithVerificationUiFlow
    /// </summary>
    public partial class KratosContinueWithVerificationUiFlow
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KratosContinueWithVerificationUiFlow" /> class.
        /// </summary>
        /// <param name="id">The ID of the verification flow</param>
        /// <param name="verifiableAddress">The address that should be verified in this flow</param>
        /// <param name="url">The URL of the verification flow</param>
        [JsonConstructor]
        public KratosContinueWithVerificationUiFlow(string id, string verifiableAddress, Option<string?> url = default)
        {
            Id = id;
            VerifiableAddress = verifiableAddress;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The ID of the verification flow
        /// </summary>
        /// <value>The ID of the verification flow</value>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The address that should be verified in this flow
        /// </summary>
        /// <value>The address that should be verified in this flow</value>
        [JsonPropertyName("verifiable_address")]
        public string VerifiableAddress { get; set; }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// The URL of the verification flow
        /// </summary>
        /// <value>The URL of the verification flow</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class KratosContinueWithVerificationUiFlow {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VerifiableAddress: ").Append(VerifiableAddress).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="KratosContinueWithVerificationUiFlow" />
    /// </summary>
    public class KratosContinueWithVerificationUiFlowJsonConverter : JsonConverter<KratosContinueWithVerificationUiFlow>
    {
        /// <summary>
        /// Deserializes json to <see cref="KratosContinueWithVerificationUiFlow" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override KratosContinueWithVerificationUiFlow Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> verifiableAddress = default;
            Option<string?> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "verifiable_address":
                            verifiableAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithVerificationUiFlow.", nameof(id));

            if (!verifiableAddress.IsSet)
                throw new ArgumentException("Property is required for class KratosContinueWithVerificationUiFlow.", nameof(verifiableAddress));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class KratosContinueWithVerificationUiFlow.");

            if (verifiableAddress.IsSet && verifiableAddress.Value == null)
                throw new ArgumentNullException(nameof(verifiableAddress), "Property is not nullable for class KratosContinueWithVerificationUiFlow.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class KratosContinueWithVerificationUiFlow.");

            return new KratosContinueWithVerificationUiFlow(id.Value!, verifiableAddress.Value!, url);
        }

        /// <summary>
        /// Serializes a <see cref="KratosContinueWithVerificationUiFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithVerificationUiFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, KratosContinueWithVerificationUiFlow kratosContinueWithVerificationUiFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, kratosContinueWithVerificationUiFlow, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="KratosContinueWithVerificationUiFlow" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kratosContinueWithVerificationUiFlow"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, KratosContinueWithVerificationUiFlow kratosContinueWithVerificationUiFlow, JsonSerializerOptions jsonSerializerOptions)
        {
            if (kratosContinueWithVerificationUiFlow.Id == null)
                throw new ArgumentNullException(nameof(kratosContinueWithVerificationUiFlow.Id), "Property is required for class KratosContinueWithVerificationUiFlow.");

            if (kratosContinueWithVerificationUiFlow.VerifiableAddress == null)
                throw new ArgumentNullException(nameof(kratosContinueWithVerificationUiFlow.VerifiableAddress), "Property is required for class KratosContinueWithVerificationUiFlow.");

            if (kratosContinueWithVerificationUiFlow.UrlOption.IsSet && kratosContinueWithVerificationUiFlow.Url == null)
                throw new ArgumentNullException(nameof(kratosContinueWithVerificationUiFlow.Url), "Property is required for class KratosContinueWithVerificationUiFlow.");

            writer.WriteString("id", kratosContinueWithVerificationUiFlow.Id);

            writer.WriteString("verifiable_address", kratosContinueWithVerificationUiFlow.VerifiableAddress);

            if (kratosContinueWithVerificationUiFlow.UrlOption.IsSet)
                writer.WriteString("url", kratosContinueWithVerificationUiFlow.Url);
        }
    }
}
