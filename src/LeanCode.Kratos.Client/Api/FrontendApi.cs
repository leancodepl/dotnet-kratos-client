// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using LeanCode.Kratos.Client.Client;
using LeanCode.Kratos.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace LeanCode.Kratos.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFrontendApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FrontendApiEvents Events { get; }

        /// <summary>
        /// Create Login Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.login.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="loginChallenge">An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;). (optional)</param>
        /// <param name="organization">An optional organization ID that should be used for logging this user in. This parameter is only effective in the Ory Network. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLoginFlowApiResponse"/>&gt;</returns>
        Task<ICreateBrowserLoginFlowApiResponse> CreateBrowserLoginFlowAsync(Option<bool> refresh = default, Option<string> aal = default, Option<string> returnTo = default, Option<string> cookie = default, Option<string> loginChallenge = default, Option<string> organization = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Login Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.login.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="loginChallenge">An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;). (optional)</param>
        /// <param name="organization">An optional organization ID that should be used for logging this user in. This parameter is only effective in the Ory Network. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLoginFlowApiResponse"/>?&gt;</returns>
        Task<ICreateBrowserLoginFlowApiResponse?> CreateBrowserLoginFlowOrDefaultAsync(Option<bool> refresh = default, Option<string> aal = default, Option<string> returnTo = default, Option<string> cookie = default, Option<string> loginChallenge = default, Option<string> organization = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Logout URL for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request. (optional)</param>
        /// <param name="returnTo">Return to URL  The URL to which the browser should be redirected to after the logout has been performed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLogoutFlowApiResponse"/>&gt;</returns>
        Task<ICreateBrowserLogoutFlowApiResponse> CreateBrowserLogoutFlowAsync(Option<string> cookie = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Logout URL for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
        /// </remarks>
        /// <param name="cookie">HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request. (optional)</param>
        /// <param name="returnTo">Return to URL  The URL to which the browser should be redirected to after the logout has been performed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLogoutFlowApiResponse"/>?&gt;</returns>
        Task<ICreateBrowserLogoutFlowApiResponse?> CreateBrowserLogoutFlowOrDefaultAsync(Option<string> cookie = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Recovery Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.recovery.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRecoveryFlowApiResponse"/>&gt;</returns>
        Task<ICreateBrowserRecoveryFlowApiResponse> CreateBrowserRecoveryFlowAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Recovery Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.recovery.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRecoveryFlowApiResponse"/>?&gt;</returns>
        Task<ICreateBrowserRecoveryFlowApiResponse?> CreateBrowserRecoveryFlowOrDefaultAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Registration Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.registration.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60;.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="loginChallenge">Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network. (optional)</param>
        /// <param name="afterVerificationReturnTo">The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value. (optional)</param>
        /// <param name="organization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRegistrationFlowApiResponse"/>&gt;</returns>
        Task<ICreateBrowserRegistrationFlowApiResponse> CreateBrowserRegistrationFlowAsync(Option<string> returnTo = default, Option<string> loginChallenge = default, Option<string> afterVerificationReturnTo = default, Option<string> organization = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Registration Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.registration.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60;.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="loginChallenge">Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network. (optional)</param>
        /// <param name="afterVerificationReturnTo">The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value. (optional)</param>
        /// <param name="organization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRegistrationFlowApiResponse"/>?&gt;</returns>
        Task<ICreateBrowserRegistrationFlowApiResponse?> CreateBrowserRegistrationFlowOrDefaultAsync(Option<string> returnTo = default, Option<string> loginChallenge = default, Option<string> afterVerificationReturnTo = default, Option<string> organization = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Settings Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserSettingsFlowApiResponse"/>&gt;</returns>
        Task<ICreateBrowserSettingsFlowApiResponse> CreateBrowserSettingsFlowAsync(Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Settings Flow for Browsers
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserSettingsFlowApiResponse"/>?&gt;</returns>
        Task<ICreateBrowserSettingsFlowApiResponse?> CreateBrowserSettingsFlowOrDefaultAsync(Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Verification Flow for Browser Clients
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.verification.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserVerificationFlowApiResponse"/>&gt;</returns>
        Task<ICreateBrowserVerificationFlowApiResponse> CreateBrowserVerificationFlowAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Verification Flow for Browser Clients
        /// </summary>
        /// <remarks>
        /// This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.verification.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserVerificationFlowApiResponse"/>?&gt;</returns>
        Task<ICreateBrowserVerificationFlowApiResponse?> CreateBrowserVerificationFlowOrDefaultAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Login Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing login flow call &#x60;/self-service/login/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeLoginFlowApiResponse"/>&gt;</returns>
        Task<ICreateNativeLoginFlowApiResponse> CreateNativeLoginFlowAsync(Option<bool> refresh = default, Option<bool> returnSessionTokenExchangeCode = default, Option<string> aal = default, Option<string> xSessionToken = default, Option<string> returnTo = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Login Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing login flow call &#x60;/self-service/login/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeLoginFlowApiResponse"/>?&gt;</returns>
        Task<ICreateNativeLoginFlowApiResponse?> CreateNativeLoginFlowOrDefaultAsync(Option<bool> refresh = default, Option<bool> returnSessionTokenExchangeCode = default, Option<string> aal = default, Option<string> xSessionToken = default, Option<string> returnTo = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Recovery Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  On an existing recovery flow, use the &#x60;getRecoveryFlow&#x60; API endpoint.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRecoveryFlowApiResponse"/>&gt;</returns>
        Task<ICreateNativeRecoveryFlowApiResponse> CreateNativeRecoveryFlowAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Recovery Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  On an existing recovery flow, use the &#x60;getRecoveryFlow&#x60; API endpoint.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRecoveryFlowApiResponse"/>?&gt;</returns>
        Task<ICreateNativeRecoveryFlowApiResponse?> CreateNativeRecoveryFlowOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Registration Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing registration flow call &#x60;/self-service/registration/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRegistrationFlowApiResponse"/>&gt;</returns>
        Task<ICreateNativeRegistrationFlowApiResponse> CreateNativeRegistrationFlowAsync(Option<bool> returnSessionTokenExchangeCode = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Registration Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing registration flow call &#x60;/self-service/registration/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRegistrationFlowApiResponse"/>?&gt;</returns>
        Task<ICreateNativeRegistrationFlowApiResponse?> CreateNativeRegistrationFlowOrDefaultAsync(Option<bool> returnSessionTokenExchangeCode = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Settings Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call &#x60;/self-service/settings/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeSettingsFlowApiResponse"/>&gt;</returns>
        Task<ICreateNativeSettingsFlowApiResponse> CreateNativeSettingsFlowAsync(Option<string> xSessionToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Settings Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call &#x60;/self-service/settings/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeSettingsFlowApiResponse"/>?&gt;</returns>
        Task<ICreateNativeSettingsFlowApiResponse?> CreateNativeSettingsFlowOrDefaultAsync(Option<string> xSessionToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Verification Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call &#x60;/self-service/verification/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeVerificationFlowApiResponse"/>&gt;</returns>
        Task<ICreateNativeVerificationFlowApiResponse> CreateNativeVerificationFlowAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Verification Flow for Native Apps
        /// </summary>
        /// <remarks>
        /// This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call &#x60;/self-service/verification/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeVerificationFlowApiResponse"/>?&gt;</returns>
        Task<ICreateNativeVerificationFlowApiResponse?> CreateNativeVerificationFlowOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Disable my other sessions
        /// </summary>
        /// <remarks>
        /// Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMyOtherSessionsApiResponse"/>&gt;</returns>
        Task<IDisableMyOtherSessionsApiResponse> DisableMyOtherSessionsAsync(Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Disable my other sessions
        /// </summary>
        /// <remarks>
        /// Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
        /// </remarks>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMyOtherSessionsApiResponse"/>?&gt;</returns>
        Task<IDisableMyOtherSessionsApiResponse?> DisableMyOtherSessionsOrDefaultAsync(Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Disable one of my sessions
        /// </summary>
        /// <remarks>
        /// Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID is the session&#39;s ID.</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMySessionApiResponse"/>&gt;</returns>
        Task<IDisableMySessionApiResponse> DisableMySessionAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Disable one of my sessions
        /// </summary>
        /// <remarks>
        /// Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
        /// </remarks>
        /// <param name="id">ID is the session&#39;s ID.</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMySessionApiResponse"/>?&gt;</returns>
        Task<IDisableMySessionApiResponse?> DisableMySessionOrDefaultAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Exchange Session Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="initCode">The part of the code return when initializing the flow.</param>
        /// <param name="returnToCode">The part of the code returned by the return_to URL.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeSessionTokenApiResponse"/>&gt;</returns>
        Task<IExchangeSessionTokenApiResponse> ExchangeSessionTokenAsync(string initCode, string returnToCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Exchange Session Token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="initCode">The part of the code return when initializing the flow.</param>
        /// <param name="returnToCode">The part of the code returned by the return_to URL.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeSessionTokenApiResponse"/>?&gt;</returns>
        Task<IExchangeSessionTokenApiResponse?> ExchangeSessionTokenOrDefaultAsync(string initCode, string returnToCode, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User-Flow Errors
        /// </summary>
        /// <remarks>
        /// This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?id&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Error is the error&#39;s ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFlowErrorApiResponse"/>&gt;</returns>
        Task<IGetFlowErrorApiResponse> GetFlowErrorAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get User-Flow Errors
        /// </summary>
        /// <remarks>
        /// This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?id&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
        /// </remarks>
        /// <param name="id">Error is the error&#39;s ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFlowErrorApiResponse"/>?&gt;</returns>
        Task<IGetFlowErrorApiResponse?> GetFlowErrorOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Login Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a login flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/login&#39;, async function (req, res) { const flow &#x3D; await client.getLoginFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;login&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLoginFlowApiResponse"/>&gt;</returns>
        Task<IGetLoginFlowApiResponse> GetLoginFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Login Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a login flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/login&#39;, async function (req, res) { const flow &#x3D; await client.getLoginFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;login&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="id">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLoginFlowApiResponse"/>?&gt;</returns>
        Task<IGetLoginFlowApiResponse?> GetLoginFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Recovery Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getRecoveryFlow(req.header(&#39;Cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;recovery&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecoveryFlowApiResponse"/>&gt;</returns>
        Task<IGetRecoveryFlowApiResponse> GetRecoveryFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Recovery Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getRecoveryFlow(req.header(&#39;Cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;recovery&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecoveryFlowApiResponse"/>?&gt;</returns>
        Task<IGetRecoveryFlowApiResponse?> GetRecoveryFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Registration Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/registration&#39;, async function (req, res) { const flow &#x3D; await client.getRegistrationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;registration&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRegistrationFlowApiResponse"/>&gt;</returns>
        Task<IGetRegistrationFlowApiResponse> GetRegistrationFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Registration Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/registration&#39;, async function (req, res) { const flow &#x3D; await client.getRegistrationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;registration&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="id">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRegistrationFlowApiResponse"/>?&gt;</returns>
        Task<IGetRegistrationFlowApiResponse?> GetRegistrationFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Settings Flow
        /// </summary>
        /// <remarks>
        /// When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token  When using the SDK in an app without a browser, please include the session token here. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSettingsFlowApiResponse"/>&gt;</returns>
        Task<IGetSettingsFlowApiResponse> GetSettingsFlowAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Settings Flow
        /// </summary>
        /// <remarks>
        /// When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <param name="id">ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token  When using the SDK in an app without a browser, please include the session token here. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSettingsFlowApiResponse"/>?&gt;</returns>
        Task<IGetSettingsFlowApiResponse?> GetSettingsFlowOrDefaultAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Verification Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getVerificationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;verification&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVerificationFlowApiResponse"/>&gt;</returns>
        Task<IGetVerificationFlowApiResponse> GetVerificationFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Verification Flow
        /// </summary>
        /// <remarks>
        /// This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getVerificationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;verification&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVerificationFlowApiResponse"/>?&gt;</returns>
        Task<IGetVerificationFlowApiResponse?> GetVerificationFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get WebAuthn JavaScript
        /// </summary>
        /// <remarks>
        /// This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  &#x60;&#x60;&#x60;html &lt;script src&#x3D;\&quot;https://public-kratos.example.org/.well-known/ory/webauthn.js\&quot; type&#x3D;\&quot;script\&quot; async /&gt; &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebAuthnJavaScriptApiResponse"/>&gt;</returns>
        Task<IGetWebAuthnJavaScriptApiResponse> GetWebAuthnJavaScriptAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get WebAuthn JavaScript
        /// </summary>
        /// <remarks>
        /// This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  &#x60;&#x60;&#x60;html &lt;script src&#x3D;\&quot;https://public-kratos.example.org/.well-known/ory/webauthn.js\&quot; type&#x3D;\&quot;script\&quot; async /&gt; &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebAuthnJavaScriptApiResponse"/>?&gt;</returns>
        Task<IGetWebAuthnJavaScriptApiResponse?> GetWebAuthnJavaScriptOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get My Active Sessions
        /// </summary>
        /// <remarks>
        /// This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the &#x60;/sessions/whoami&#x60; endpoint.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Deprecated Pagination Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the &#x60;Link&#x60; header. (optional)</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="perPage">Deprecated Items per Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This is the number of items per page. (optional, default to 250)</param>
        /// <param name="pageSize">Page Size  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMySessionsApiResponse"/>&gt;</returns>
        Task<IListMySessionsApiResponse> ListMySessionsAsync(Option<long> page = default, Option<string> xSessionToken = default, Option<string> cookie = default, Option<long> perPage = default, Option<long> pageSize = default, Option<string> pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get My Active Sessions
        /// </summary>
        /// <remarks>
        /// This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the &#x60;/sessions/whoami&#x60; endpoint.
        /// </remarks>
        /// <param name="page">Deprecated Pagination Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the &#x60;Link&#x60; header. (optional)</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="perPage">Deprecated Items per Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This is the number of items per page. (optional, default to 250)</param>
        /// <param name="pageSize">Page Size  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMySessionsApiResponse"/>?&gt;</returns>
        Task<IListMySessionsApiResponse?> ListMySessionsOrDefaultAsync(Option<long> page = default, Option<string> xSessionToken = default, Option<string> cookie = default, Option<long> perPage = default, Option<long> pageSize = default, Option<string> pageToken = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Perform Logout for Native Apps
        /// </summary>
        /// <remarks>
        /// Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPerformNativeLogoutApiResponse"/>&gt;</returns>
        Task<IPerformNativeLogoutApiResponse> PerformNativeLogoutAsync(KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Perform Logout for Native Apps
        /// </summary>
        /// <remarks>
        /// Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
        /// </remarks>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPerformNativeLogoutApiResponse"/>?&gt;</returns>
        Task<IPerformNativeLogoutApiResponse?> PerformNativeLogoutOrDefaultAsync(KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Check Who the Current HTTP Session Belongs To
        /// </summary>
        /// <remarks>
        /// Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the &#39;X-Kratos-Authenticated-Identity-Id&#39; header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/protected-endpoint&#39;, async function (req, res) { const session &#x3D; await client.toSession(undefined, req.header(&#39;cookie&#39;))  console.log(session) }) &#x60;&#x60;&#x60;  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;)  console.log(session) &#x60;&#x60;&#x60;  When using a token template, the token is included in the &#x60;tokenized&#x60; field of the session.  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;, { tokenize_as: \&quot;example-jwt-template\&quot; })  console.log(session.tokenized) // The JWT &#x60;&#x60;&#x60;  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the &#x60;X-Session-Token&#x60; header!  This endpoint authenticates users by checking:  if the &#x60;Cookie&#x60; HTTP header was set containing an Ory Kratos Session Cookie; if the &#x60;Authorization: bearer &lt;ory-session-token&gt;&#x60; HTTP header was set with a valid Ory Kratos Session Token; if the &#x60;X-Session-Token&#x60; HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cookie or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_inactive&#x60;: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). &#x60;session_aal2_required&#x60;: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="tokenizeAs">Returns the session additionally as a token (such as a JWT)  The value of this parameter has to be a valid, configured Ory Session token template. For more information head over to [the documentation](http://ory.sh/docs/identities/session-to-jwt-cors). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToSessionApiResponse"/>&gt;</returns>
        Task<IToSessionApiResponse> ToSessionAsync(Option<string> xSessionToken = default, Option<string> cookie = default, Option<string> tokenizeAs = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Check Who the Current HTTP Session Belongs To
        /// </summary>
        /// <remarks>
        /// Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the &#39;X-Kratos-Authenticated-Identity-Id&#39; header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/protected-endpoint&#39;, async function (req, res) { const session &#x3D; await client.toSession(undefined, req.header(&#39;cookie&#39;))  console.log(session) }) &#x60;&#x60;&#x60;  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;)  console.log(session) &#x60;&#x60;&#x60;  When using a token template, the token is included in the &#x60;tokenized&#x60; field of the session.  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;, { tokenize_as: \&quot;example-jwt-template\&quot; })  console.log(session.tokenized) // The JWT &#x60;&#x60;&#x60;  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the &#x60;X-Session-Token&#x60; header!  This endpoint authenticates users by checking:  if the &#x60;Cookie&#x60; HTTP header was set containing an Ory Kratos Session Cookie; if the &#x60;Authorization: bearer &lt;ory-session-token&gt;&#x60; HTTP header was set with a valid Ory Kratos Session Token; if the &#x60;X-Session-Token&#x60; HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cookie or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_inactive&#x60;: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). &#x60;session_aal2_required&#x60;: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
        /// </remarks>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="tokenizeAs">Returns the session additionally as a token (such as a JWT)  The value of this parameter has to be a valid, configured Ory Session token template. For more information head over to [the documentation](http://ory.sh/docs/identities/session-to-jwt-cors). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToSessionApiResponse"/>?&gt;</returns>
        Task<IToSessionApiResponse?> ToSessionOrDefaultAsync(Option<string> xSessionToken = default, Option<string> cookie = default, Option<string> tokenizeAs = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Submit a Login Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the &#x60;return_to&#x60; value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLoginFlowApiResponse"/>&gt;</returns>
        Task<IUpdateLoginFlowApiResponse> UpdateLoginFlowAsync(KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Submit a Login Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the &#x60;return_to&#x60; value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLoginFlowApiResponse"/>?&gt;</returns>
        Task<IUpdateLoginFlowApiResponse?> UpdateLoginFlowOrDefaultAsync(KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Logout Flow
        /// </summary>
        /// <remarks>
        /// This endpoint logs out an identity in a self-service manner.  If the &#x60;Accept&#x60; HTTP header is not set to &#x60;application/json&#x60;, the browser will be redirected (HTTP 303 See Other) to the &#x60;return_to&#x60; parameter of the initial request or fall back to &#x60;urls.default_return_to&#x60;.  If the &#x60;Accept&#x60; HTTP header is set to &#x60;application/json&#x60;, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint. (optional)</param>
        /// <param name="returnTo">The URL to return to after the logout was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoutFlowApiResponse"/>&gt;</returns>
        Task<IUpdateLogoutFlowApiResponse> UpdateLogoutFlowAsync(Option<string> token = default, Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Logout Flow
        /// </summary>
        /// <remarks>
        /// This endpoint logs out an identity in a self-service manner.  If the &#x60;Accept&#x60; HTTP header is not set to &#x60;application/json&#x60;, the browser will be redirected (HTTP 303 See Other) to the &#x60;return_to&#x60; parameter of the initial request or fall back to &#x60;urls.default_return_to&#x60;.  If the &#x60;Accept&#x60; HTTP header is set to &#x60;application/json&#x60;, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
        /// </remarks>
        /// <param name="token">A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint. (optional)</param>
        /// <param name="returnTo">The URL to return to after the logout was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoutFlowApiResponse"/>?&gt;</returns>
        Task<IUpdateLogoutFlowApiResponse?> UpdateLogoutFlowOrDefaultAsync(Option<string> token = default, Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Recovery Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; for the &#x60;link&#x60; method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow">The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRecoveryFlowApiResponse"/>&gt;</returns>
        Task<IUpdateRecoveryFlowApiResponse> UpdateRecoveryFlowAsync(KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Recovery Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to update a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; for the &#x60;link&#x60; method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </remarks>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow">The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRecoveryFlowApiResponse"/>?&gt;</returns>
        Task<IUpdateRecoveryFlowApiResponse?> UpdateRecoveryFlowOrDefaultAsync(KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Registration Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a registration flow by sending an identity&#39;s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the &#x60;session&#x60; and &#x60;session_token&#x60; will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the &#x60;return_to&#x60; value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRegistrationFlowApiResponse"/>&gt;</returns>
        Task<IUpdateRegistrationFlowApiResponse> UpdateRegistrationFlowAsync(KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update Registration Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a registration flow by sending an identity&#39;s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the &#x60;session&#x60; and &#x60;session_token&#x60; will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the &#x60;return_to&#x60; value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </remarks>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRegistrationFlowApiResponse"/>?&gt;</returns>
        Task<IUpdateRegistrationFlowApiResponse?> UpdateRegistrationFlowOrDefaultAsync(KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete Settings Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a settings flow by sending an identity&#39;s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; respond with a HTTP 303 redirect to the post/after settings URL or the &#x60;return_to&#x60; value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low.  Browser flows with HTTP Header &#x60;Accept: application/json&#x60; respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session&#39;s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a &#x60;Accept: application/json&#x60; HTTP header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_refresh_required&#x60;: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters &#x60;?refresh&#x3D;true&amp;return_to&#x3D;&lt;the-current-browser-url&gt;&#x60;, or initiate a refresh login flow otherwise. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow">The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSettingsFlowApiResponse"/>&gt;</returns>
        Task<IUpdateSettingsFlowApiResponse> UpdateSettingsFlowAsync(KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete Settings Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a settings flow by sending an identity&#39;s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; respond with a HTTP 303 redirect to the post/after settings URL or the &#x60;return_to&#x60; value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low.  Browser flows with HTTP Header &#x60;Accept: application/json&#x60; respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session&#39;s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a &#x60;Accept: application/json&#x60; HTTP header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_refresh_required&#x60;: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters &#x60;?refresh&#x3D;true&amp;return_to&#x3D;&lt;the-current-browser-url&gt;&#x60;, or initiate a refresh login flow otherwise. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </remarks>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow">The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSettingsFlowApiResponse"/>?&gt;</returns>
        Task<IUpdateSettingsFlowApiResponse?> UpdateSettingsFlowOrDefaultAsync(KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete Verification Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; when using the &#x60;link&#x60; method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a verification link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow">The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVerificationFlowApiResponse"/>&gt;</returns>
        Task<IUpdateVerificationFlowApiResponse> UpdateVerificationFlowAsync(KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Complete Verification Flow
        /// </summary>
        /// <remarks>
        /// Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; when using the &#x60;link&#x60; method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a verification link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </remarks>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow">The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVerificationFlowApiResponse"/>?&gt;</returns>
        Task<IUpdateVerificationFlowApiResponse?> UpdateVerificationFlowOrDefaultAsync(KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateBrowserLoginFlowApiResponse"/>
    /// </summary>
    public interface ICreateBrowserLoginFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosLoginFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateBrowserLogoutFlowApiResponse"/>
    /// </summary>
    public interface ICreateBrowserLogoutFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosLogoutFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IInternalServerError<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ICreateBrowserRecoveryFlowApiResponse"/>
    /// </summary>
    public interface ICreateBrowserRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosRecoveryFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateBrowserRegistrationFlowApiResponse"/>
    /// </summary>
    public interface ICreateBrowserRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosRegistrationFlow?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateBrowserSettingsFlowApiResponse"/>
    /// </summary>
    public interface ICreateBrowserSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSettingsFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateBrowserVerificationFlowApiResponse"/>
    /// </summary>
    public interface ICreateBrowserVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosVerificationFlow?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNativeLoginFlowApiResponse"/>
    /// </summary>
    public interface ICreateNativeLoginFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosLoginFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNativeRecoveryFlowApiResponse"/>
    /// </summary>
    public interface ICreateNativeRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosRecoveryFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNativeRegistrationFlowApiResponse"/>
    /// </summary>
    public interface ICreateNativeRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosRegistrationFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNativeSettingsFlowApiResponse"/>
    /// </summary>
    public interface ICreateNativeSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSettingsFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="ICreateNativeVerificationFlowApiResponse"/>
    /// </summary>
    public interface ICreateNativeVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosVerificationFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDisableMyOtherSessionsApiResponse"/>
    /// </summary>
    public interface IDisableMyOtherSessionsApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosDeleteMySessionsCount?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IDisableMySessionApiResponse"/>
    /// </summary>
    public interface IDisableMySessionApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IExchangeSessionTokenApiResponse"/>
    /// </summary>
    public interface IExchangeSessionTokenApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, INotFound<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetFlowErrorApiResponse"/>
    /// </summary>
    public interface IGetFlowErrorApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosFlowError?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, INotFound<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IInternalServerError<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetLoginFlowApiResponse"/>
    /// </summary>
    public interface IGetLoginFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosLoginFlow?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, INotFound<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetRecoveryFlowApiResponse"/>
    /// </summary>
    public interface IGetRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosRecoveryFlow?>, INotFound<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetRegistrationFlowApiResponse"/>
    /// </summary>
    public interface IGetRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosRegistrationFlow?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, INotFound<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetSettingsFlowApiResponse"/>
    /// </summary>
    public interface IGetSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSettingsFlow?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, INotFound<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetVerificationFlowApiResponse"/>
    /// </summary>
    public interface IGetVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosVerificationFlow?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, INotFound<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IGetWebAuthnJavaScriptApiResponse"/>
    /// </summary>
    public interface IGetWebAuthnJavaScriptApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListMySessionsApiResponse"/>
    /// </summary>
    public interface IListMySessionsApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<List<KratosSession>?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IPerformNativeLogoutApiResponse"/>
    /// </summary>
    public interface IPerformNativeLogoutApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IToSessionApiResponse"/>
    /// </summary>
    public interface IToSessionApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSession?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateLoginFlowApiResponse"/>
    /// </summary>
    public interface IUpdateLoginFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosLoginFlow?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnprocessableContent<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateLogoutFlowApiResponse"/>
    /// </summary>
    public interface IUpdateLogoutFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateRecoveryFlowApiResponse"/>
    /// </summary>
    public interface IUpdateRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosRecoveryFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosRecoveryFlow?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnprocessableContent<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateRegistrationFlowApiResponse"/>
    /// </summary>
    public interface IUpdateRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSuccessfulNativeRegistration?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosRegistrationFlow?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnprocessableContent<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateSettingsFlowApiResponse"/>
    /// </summary>
    public interface IUpdateSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosSettingsFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosSettingsFlow?>, IUnauthorized<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IForbidden<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IUnprocessableContent<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateVerificationFlowApiResponse"/>
    /// </summary>
    public interface IUpdateVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosVerificationFlow?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosVerificationFlow?>, IGone<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 303 SeeOther
        /// </summary>
        /// <returns></returns>
        bool IsSeeOther { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 410 Gone
        /// </summary>
        /// <returns></returns>
        bool IsGone { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FrontendApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBrowserLoginFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBrowserLoginFlow;

        internal void ExecuteOnCreateBrowserLoginFlow(FrontendApi.CreateBrowserLoginFlowApiResponse apiResponse)
        {
            OnCreateBrowserLoginFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBrowserLoginFlow(Exception exception)
        {
            OnErrorCreateBrowserLoginFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBrowserLogoutFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBrowserLogoutFlow;

        internal void ExecuteOnCreateBrowserLogoutFlow(FrontendApi.CreateBrowserLogoutFlowApiResponse apiResponse)
        {
            OnCreateBrowserLogoutFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBrowserLogoutFlow(Exception exception)
        {
            OnErrorCreateBrowserLogoutFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBrowserRecoveryFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBrowserRecoveryFlow;

        internal void ExecuteOnCreateBrowserRecoveryFlow(FrontendApi.CreateBrowserRecoveryFlowApiResponse apiResponse)
        {
            OnCreateBrowserRecoveryFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBrowserRecoveryFlow(Exception exception)
        {
            OnErrorCreateBrowserRecoveryFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBrowserRegistrationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBrowserRegistrationFlow;

        internal void ExecuteOnCreateBrowserRegistrationFlow(FrontendApi.CreateBrowserRegistrationFlowApiResponse apiResponse)
        {
            OnCreateBrowserRegistrationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBrowserRegistrationFlow(Exception exception)
        {
            OnErrorCreateBrowserRegistrationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBrowserSettingsFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBrowserSettingsFlow;

        internal void ExecuteOnCreateBrowserSettingsFlow(FrontendApi.CreateBrowserSettingsFlowApiResponse apiResponse)
        {
            OnCreateBrowserSettingsFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBrowserSettingsFlow(Exception exception)
        {
            OnErrorCreateBrowserSettingsFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBrowserVerificationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBrowserVerificationFlow;

        internal void ExecuteOnCreateBrowserVerificationFlow(FrontendApi.CreateBrowserVerificationFlowApiResponse apiResponse)
        {
            OnCreateBrowserVerificationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBrowserVerificationFlow(Exception exception)
        {
            OnErrorCreateBrowserVerificationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNativeLoginFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNativeLoginFlow;

        internal void ExecuteOnCreateNativeLoginFlow(FrontendApi.CreateNativeLoginFlowApiResponse apiResponse)
        {
            OnCreateNativeLoginFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNativeLoginFlow(Exception exception)
        {
            OnErrorCreateNativeLoginFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNativeRecoveryFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNativeRecoveryFlow;

        internal void ExecuteOnCreateNativeRecoveryFlow(FrontendApi.CreateNativeRecoveryFlowApiResponse apiResponse)
        {
            OnCreateNativeRecoveryFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNativeRecoveryFlow(Exception exception)
        {
            OnErrorCreateNativeRecoveryFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNativeRegistrationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNativeRegistrationFlow;

        internal void ExecuteOnCreateNativeRegistrationFlow(FrontendApi.CreateNativeRegistrationFlowApiResponse apiResponse)
        {
            OnCreateNativeRegistrationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNativeRegistrationFlow(Exception exception)
        {
            OnErrorCreateNativeRegistrationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNativeSettingsFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNativeSettingsFlow;

        internal void ExecuteOnCreateNativeSettingsFlow(FrontendApi.CreateNativeSettingsFlowApiResponse apiResponse)
        {
            OnCreateNativeSettingsFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNativeSettingsFlow(Exception exception)
        {
            OnErrorCreateNativeSettingsFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateNativeVerificationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateNativeVerificationFlow;

        internal void ExecuteOnCreateNativeVerificationFlow(FrontendApi.CreateNativeVerificationFlowApiResponse apiResponse)
        {
            OnCreateNativeVerificationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateNativeVerificationFlow(Exception exception)
        {
            OnErrorCreateNativeVerificationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDisableMyOtherSessions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDisableMyOtherSessions;

        internal void ExecuteOnDisableMyOtherSessions(FrontendApi.DisableMyOtherSessionsApiResponse apiResponse)
        {
            OnDisableMyOtherSessions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDisableMyOtherSessions(Exception exception)
        {
            OnErrorDisableMyOtherSessions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDisableMySession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDisableMySession;

        internal void ExecuteOnDisableMySession(FrontendApi.DisableMySessionApiResponse apiResponse)
        {
            OnDisableMySession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDisableMySession(Exception exception)
        {
            OnErrorDisableMySession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnExchangeSessionToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorExchangeSessionToken;

        internal void ExecuteOnExchangeSessionToken(FrontendApi.ExchangeSessionTokenApiResponse apiResponse)
        {
            OnExchangeSessionToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorExchangeSessionToken(Exception exception)
        {
            OnErrorExchangeSessionToken?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFlowError;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFlowError;

        internal void ExecuteOnGetFlowError(FrontendApi.GetFlowErrorApiResponse apiResponse)
        {
            OnGetFlowError?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFlowError(Exception exception)
        {
            OnErrorGetFlowError?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLoginFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLoginFlow;

        internal void ExecuteOnGetLoginFlow(FrontendApi.GetLoginFlowApiResponse apiResponse)
        {
            OnGetLoginFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLoginFlow(Exception exception)
        {
            OnErrorGetLoginFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRecoveryFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRecoveryFlow;

        internal void ExecuteOnGetRecoveryFlow(FrontendApi.GetRecoveryFlowApiResponse apiResponse)
        {
            OnGetRecoveryFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRecoveryFlow(Exception exception)
        {
            OnErrorGetRecoveryFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRegistrationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRegistrationFlow;

        internal void ExecuteOnGetRegistrationFlow(FrontendApi.GetRegistrationFlowApiResponse apiResponse)
        {
            OnGetRegistrationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRegistrationFlow(Exception exception)
        {
            OnErrorGetRegistrationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSettingsFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSettingsFlow;

        internal void ExecuteOnGetSettingsFlow(FrontendApi.GetSettingsFlowApiResponse apiResponse)
        {
            OnGetSettingsFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSettingsFlow(Exception exception)
        {
            OnErrorGetSettingsFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetVerificationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetVerificationFlow;

        internal void ExecuteOnGetVerificationFlow(FrontendApi.GetVerificationFlowApiResponse apiResponse)
        {
            OnGetVerificationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetVerificationFlow(Exception exception)
        {
            OnErrorGetVerificationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWebAuthnJavaScript;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWebAuthnJavaScript;

        internal void ExecuteOnGetWebAuthnJavaScript(FrontendApi.GetWebAuthnJavaScriptApiResponse apiResponse)
        {
            OnGetWebAuthnJavaScript?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebAuthnJavaScript(Exception exception)
        {
            OnErrorGetWebAuthnJavaScript?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListMySessions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListMySessions;

        internal void ExecuteOnListMySessions(FrontendApi.ListMySessionsApiResponse apiResponse)
        {
            OnListMySessions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListMySessions(Exception exception)
        {
            OnErrorListMySessions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPerformNativeLogout;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPerformNativeLogout;

        internal void ExecuteOnPerformNativeLogout(FrontendApi.PerformNativeLogoutApiResponse apiResponse)
        {
            OnPerformNativeLogout?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPerformNativeLogout(Exception exception)
        {
            OnErrorPerformNativeLogout?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnToSession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorToSession;

        internal void ExecuteOnToSession(FrontendApi.ToSessionApiResponse apiResponse)
        {
            OnToSession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorToSession(Exception exception)
        {
            OnErrorToSession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateLoginFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateLoginFlow;

        internal void ExecuteOnUpdateLoginFlow(FrontendApi.UpdateLoginFlowApiResponse apiResponse)
        {
            OnUpdateLoginFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateLoginFlow(Exception exception)
        {
            OnErrorUpdateLoginFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateLogoutFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateLogoutFlow;

        internal void ExecuteOnUpdateLogoutFlow(FrontendApi.UpdateLogoutFlowApiResponse apiResponse)
        {
            OnUpdateLogoutFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateLogoutFlow(Exception exception)
        {
            OnErrorUpdateLogoutFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateRecoveryFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateRecoveryFlow;

        internal void ExecuteOnUpdateRecoveryFlow(FrontendApi.UpdateRecoveryFlowApiResponse apiResponse)
        {
            OnUpdateRecoveryFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateRecoveryFlow(Exception exception)
        {
            OnErrorUpdateRecoveryFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateRegistrationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateRegistrationFlow;

        internal void ExecuteOnUpdateRegistrationFlow(FrontendApi.UpdateRegistrationFlowApiResponse apiResponse)
        {
            OnUpdateRegistrationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateRegistrationFlow(Exception exception)
        {
            OnErrorUpdateRegistrationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateSettingsFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateSettingsFlow;

        internal void ExecuteOnUpdateSettingsFlow(FrontendApi.UpdateSettingsFlowApiResponse apiResponse)
        {
            OnUpdateSettingsFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateSettingsFlow(Exception exception)
        {
            OnErrorUpdateSettingsFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateVerificationFlow;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateVerificationFlow;

        internal void ExecuteOnUpdateVerificationFlow(FrontendApi.UpdateVerificationFlowApiResponse apiResponse)
        {
            OnUpdateVerificationFlow?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateVerificationFlow(Exception exception)
        {
            OnErrorUpdateVerificationFlow?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FrontendApi : IFrontendApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FrontendApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FrontendApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FrontendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FrontendApi(ILogger<FrontendApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FrontendApiEvents frontendApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FrontendApi>();
            HttpClient = httpClient;
            Events = frontendApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateBrowserLoginFlow(ref Option<bool> refresh, ref Option<string> aal, ref Option<string> returnTo, ref Option<string> cookie, ref Option<string> loginChallenge, ref Option<string> organization, ref Option<string> via);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aal"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="organization"></param>
        /// <param name="via"></param>
        /// <returns></returns>
        private void ValidateCreateBrowserLoginFlow(Option<string> aal, Option<string> returnTo, Option<string> cookie, Option<string> loginChallenge, Option<string> organization, Option<string> via)
        {
            if (aal.IsSet && aal.Value == null)
                throw new ArgumentNullException(nameof(aal));

            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));

            if (loginChallenge.IsSet && loginChallenge.Value == null)
                throw new ArgumentNullException(nameof(loginChallenge));

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization));

            if (via.IsSet && via.Value == null)
                throw new ArgumentNullException(nameof(via));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="refresh"></param>
        /// <param name="aal"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="organization"></param>
        /// <param name="via"></param>
        private void AfterCreateBrowserLoginFlowDefaultImplementation(ICreateBrowserLoginFlowApiResponse apiResponseLocalVar, Option<bool> refresh, Option<string> aal, Option<string> returnTo, Option<string> cookie, Option<string> loginChallenge, Option<string> organization, Option<string> via)
        {
            bool suppressDefaultLog = false;
            AfterCreateBrowserLoginFlow(ref suppressDefaultLog, apiResponseLocalVar, refresh, aal, returnTo, cookie, loginChallenge, organization, via);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="refresh"></param>
        /// <param name="aal"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="organization"></param>
        /// <param name="via"></param>
        partial void AfterCreateBrowserLoginFlow(ref bool suppressDefaultLog, ICreateBrowserLoginFlowApiResponse apiResponseLocalVar, Option<bool> refresh, Option<string> aal, Option<string> returnTo, Option<string> cookie, Option<string> loginChallenge, Option<string> organization, Option<string> via);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="refresh"></param>
        /// <param name="aal"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="organization"></param>
        /// <param name="via"></param>
        private void OnErrorCreateBrowserLoginFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<bool> refresh, Option<string> aal, Option<string> returnTo, Option<string> cookie, Option<string> loginChallenge, Option<string> organization, Option<string> via)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateBrowserLoginFlow(ref suppressDefaultLog, exception, pathFormat, path, refresh, aal, returnTo, cookie, loginChallenge, organization, via);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="refresh"></param>
        /// <param name="aal"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="organization"></param>
        /// <param name="via"></param>
        partial void OnErrorCreateBrowserLoginFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<bool> refresh, Option<string> aal, Option<string> returnTo, Option<string> cookie, Option<string> loginChallenge, Option<string> organization, Option<string> via);

        /// <summary>
        /// Create Login Flow for Browsers This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.login.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="loginChallenge">An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;). (optional)</param>
        /// <param name="organization">An optional organization ID that should be used for logging this user in. This parameter is only effective in the Ory Network. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLoginFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserLoginFlowApiResponse?> CreateBrowserLoginFlowOrDefaultAsync(Option<bool> refresh = default, Option<string> aal = default, Option<string> returnTo = default, Option<string> cookie = default, Option<string> loginChallenge = default, Option<string> organization = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBrowserLoginFlowAsync(refresh, aal, returnTo, cookie, loginChallenge, organization, via, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Login Flow for Browsers This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.login.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60; unless the query parameter &#x60;?refresh&#x3D;true&#x60; was set.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  The optional query parameter login_challenge is set when using Kratos with Hydra in an OAuth2 flow. See the oauth2_provider.url configuration option.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="loginChallenge">An optional Hydra login challenge. If present, Kratos will cooperate with Ory Hydra to act as an OAuth2 identity provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?login_challenge&#x3D;abcde&#x60;). (optional)</param>
        /// <param name="organization">An optional organization ID that should be used for logging this user in. This parameter is only effective in the Ory Network. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLoginFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserLoginFlowApiResponse> CreateBrowserLoginFlowAsync(Option<bool> refresh = default, Option<string> aal = default, Option<string> returnTo = default, Option<string> cookie = default, Option<string> loginChallenge = default, Option<string> organization = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBrowserLoginFlow(aal, returnTo, cookie, loginChallenge, organization, via);

                FormatCreateBrowserLoginFlow(ref refresh, ref aal, ref returnTo, ref cookie, ref loginChallenge, ref organization, ref via);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/login/browser";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (refresh.IsSet)
                        // here too
                        parseQueryStringLocalVar["refresh"] = ClientUtils.ParameterToString(refresh.Value);

                    if (aal.IsSet)
                        // here too
                        parseQueryStringLocalVar["aal"] = ClientUtils.ParameterToString(aal.Value);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    if (loginChallenge.IsSet)
                        // here too
                        parseQueryStringLocalVar["login_challenge"] = ClientUtils.ParameterToString(loginChallenge.Value);

                    if (organization.IsSet)
                        // here too
                        parseQueryStringLocalVar["organization"] = ClientUtils.ParameterToString(organization.Value);

                    if (via.IsSet)
                        // here too
                        parseQueryStringLocalVar["via"] = ClientUtils.ParameterToString(via.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBrowserLoginFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBrowserLoginFlowApiResponse>();

                        CreateBrowserLoginFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/login/browser", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBrowserLoginFlowDefaultImplementation(apiResponseLocalVar, refresh, aal, returnTo, cookie, loginChallenge, organization, via);

                        Events.ExecuteOnCreateBrowserLoginFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBrowserLoginFlowDefaultImplementation(e, "/self-service/login/browser", uriBuilderLocalVar.Path, refresh, aal, returnTo, cookie, loginChallenge, organization, via);
                Events.ExecuteOnErrorCreateBrowserLoginFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBrowserLoginFlowApiResponse"/>
        /// </summary>
        public partial class CreateBrowserLoginFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateBrowserLoginFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBrowserLoginFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBrowserLoginFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBrowserLoginFlowApiResponse(ILogger<CreateBrowserLoginFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosLoginFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosLoginFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosLoginFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateBrowserLogoutFlow(ref Option<string> cookie, ref Option<string> returnTo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cookie"></param>
        /// <param name="returnTo"></param>
        /// <returns></returns>
        private void ValidateCreateBrowserLogoutFlow(Option<string> cookie, Option<string> returnTo)
        {
            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));

            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cookie"></param>
        /// <param name="returnTo"></param>
        private void AfterCreateBrowserLogoutFlowDefaultImplementation(ICreateBrowserLogoutFlowApiResponse apiResponseLocalVar, Option<string> cookie, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            AfterCreateBrowserLogoutFlow(ref suppressDefaultLog, apiResponseLocalVar, cookie, returnTo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cookie"></param>
        /// <param name="returnTo"></param>
        partial void AfterCreateBrowserLogoutFlow(ref bool suppressDefaultLog, ICreateBrowserLogoutFlowApiResponse apiResponseLocalVar, Option<string> cookie, Option<string> returnTo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cookie"></param>
        /// <param name="returnTo"></param>
        private void OnErrorCreateBrowserLogoutFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> cookie, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateBrowserLogoutFlow(ref suppressDefaultLog, exception, pathFormat, path, cookie, returnTo);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cookie"></param>
        /// <param name="returnTo"></param>
        partial void OnErrorCreateBrowserLogoutFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> cookie, Option<string> returnTo);

        /// <summary>
        /// Create a Logout URL for Browsers This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
        /// </summary>
        /// <param name="cookie">HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request. (optional)</param>
        /// <param name="returnTo">Return to URL  The URL to which the browser should be redirected to after the logout has been performed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLogoutFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserLogoutFlowApiResponse?> CreateBrowserLogoutFlowOrDefaultAsync(Option<string> cookie = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBrowserLogoutFlowAsync(cookie, returnTo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a Logout URL for Browsers This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  The URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns a 401 error.  When calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cookie">HTTP Cookies  If you call this endpoint from a backend, please include the original Cookie header in the request. (optional)</param>
        /// <param name="returnTo">Return to URL  The URL to which the browser should be redirected to after the logout has been performed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserLogoutFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserLogoutFlowApiResponse> CreateBrowserLogoutFlowAsync(Option<string> cookie = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBrowserLogoutFlow(cookie, returnTo);

                FormatCreateBrowserLogoutFlow(ref cookie, ref returnTo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/logout/browser";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBrowserLogoutFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBrowserLogoutFlowApiResponse>();

                        CreateBrowserLogoutFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/logout/browser", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBrowserLogoutFlowDefaultImplementation(apiResponseLocalVar, cookie, returnTo);

                        Events.ExecuteOnCreateBrowserLogoutFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBrowserLogoutFlowDefaultImplementation(e, "/self-service/logout/browser", uriBuilderLocalVar.Path, cookie, returnTo);
                Events.ExecuteOnErrorCreateBrowserLogoutFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBrowserLogoutFlowApiResponse"/>
        /// </summary>
        public partial class CreateBrowserLogoutFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateBrowserLogoutFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBrowserLogoutFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBrowserLogoutFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBrowserLogoutFlowApiResponse(ILogger<CreateBrowserLogoutFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosLogoutFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosLogoutFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosLogoutFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateBrowserRecoveryFlow(ref Option<string> returnTo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="returnTo"></param>
        /// <returns></returns>
        private void ValidateCreateBrowserRecoveryFlow(Option<string> returnTo)
        {
            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        private void AfterCreateBrowserRecoveryFlowDefaultImplementation(ICreateBrowserRecoveryFlowApiResponse apiResponseLocalVar, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            AfterCreateBrowserRecoveryFlow(ref suppressDefaultLog, apiResponseLocalVar, returnTo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        partial void AfterCreateBrowserRecoveryFlow(ref bool suppressDefaultLog, ICreateBrowserRecoveryFlowApiResponse apiResponseLocalVar, Option<string> returnTo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        private void OnErrorCreateBrowserRecoveryFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateBrowserRecoveryFlow(ref suppressDefaultLog, exception, pathFormat, path, returnTo);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        partial void OnErrorCreateBrowserRecoveryFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> returnTo);

        /// <summary>
        /// Create Recovery Flow for Browsers This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.recovery.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserRecoveryFlowApiResponse?> CreateBrowserRecoveryFlowOrDefaultAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBrowserRecoveryFlowAsync(returnTo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Recovery Flow for Browsers This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.recovery.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists, the browser is returned to the configured return URL.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects or a 400 bad request error if the user is already authenticated.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserRecoveryFlowApiResponse> CreateBrowserRecoveryFlowAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBrowserRecoveryFlow(returnTo);

                FormatCreateBrowserRecoveryFlow(ref returnTo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/recovery/browser";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBrowserRecoveryFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBrowserRecoveryFlowApiResponse>();

                        CreateBrowserRecoveryFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/recovery/browser", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBrowserRecoveryFlowDefaultImplementation(apiResponseLocalVar, returnTo);

                        Events.ExecuteOnCreateBrowserRecoveryFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBrowserRecoveryFlowDefaultImplementation(e, "/self-service/recovery/browser", uriBuilderLocalVar.Path, returnTo);
                Events.ExecuteOnErrorCreateBrowserRecoveryFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBrowserRecoveryFlowApiResponse"/>
        /// </summary>
        public partial class CreateBrowserRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateBrowserRecoveryFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBrowserRecoveryFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBrowserRecoveryFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBrowserRecoveryFlowApiResponse(ILogger<CreateBrowserRecoveryFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRecoveryFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRecoveryFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRecoveryFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateBrowserRegistrationFlow(ref Option<string> returnTo, ref Option<string> loginChallenge, ref Option<string> afterVerificationReturnTo, ref Option<string> organization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="returnTo"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="afterVerificationReturnTo"></param>
        /// <param name="organization"></param>
        /// <returns></returns>
        private void ValidateCreateBrowserRegistrationFlow(Option<string> returnTo, Option<string> loginChallenge, Option<string> afterVerificationReturnTo, Option<string> organization)
        {
            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));

            if (loginChallenge.IsSet && loginChallenge.Value == null)
                throw new ArgumentNullException(nameof(loginChallenge));

            if (afterVerificationReturnTo.IsSet && afterVerificationReturnTo.Value == null)
                throw new ArgumentNullException(nameof(afterVerificationReturnTo));

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="afterVerificationReturnTo"></param>
        /// <param name="organization"></param>
        private void AfterCreateBrowserRegistrationFlowDefaultImplementation(ICreateBrowserRegistrationFlowApiResponse apiResponseLocalVar, Option<string> returnTo, Option<string> loginChallenge, Option<string> afterVerificationReturnTo, Option<string> organization)
        {
            bool suppressDefaultLog = false;
            AfterCreateBrowserRegistrationFlow(ref suppressDefaultLog, apiResponseLocalVar, returnTo, loginChallenge, afterVerificationReturnTo, organization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="afterVerificationReturnTo"></param>
        /// <param name="organization"></param>
        partial void AfterCreateBrowserRegistrationFlow(ref bool suppressDefaultLog, ICreateBrowserRegistrationFlowApiResponse apiResponseLocalVar, Option<string> returnTo, Option<string> loginChallenge, Option<string> afterVerificationReturnTo, Option<string> organization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="afterVerificationReturnTo"></param>
        /// <param name="organization"></param>
        private void OnErrorCreateBrowserRegistrationFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> returnTo, Option<string> loginChallenge, Option<string> afterVerificationReturnTo, Option<string> organization)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateBrowserRegistrationFlow(ref suppressDefaultLog, exception, pathFormat, path, returnTo, loginChallenge, afterVerificationReturnTo, organization);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        /// <param name="loginChallenge"></param>
        /// <param name="afterVerificationReturnTo"></param>
        /// <param name="organization"></param>
        partial void OnErrorCreateBrowserRegistrationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> returnTo, Option<string> loginChallenge, Option<string> afterVerificationReturnTo, Option<string> organization);

        /// <summary>
        /// Create Registration Flow for Browsers This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.registration.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60;.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="loginChallenge">Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network. (optional)</param>
        /// <param name="afterVerificationReturnTo">The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value. (optional)</param>
        /// <param name="organization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserRegistrationFlowApiResponse?> CreateBrowserRegistrationFlowOrDefaultAsync(Option<string> returnTo = default, Option<string> loginChallenge = default, Option<string> afterVerificationReturnTo = default, Option<string> organization = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBrowserRegistrationFlowAsync(returnTo, loginChallenge, afterVerificationReturnTo, organization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Registration Flow for Browsers This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate cookies and anti-CSRF measures required for browser-based flows.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.registration.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If a valid user session exists already, the browser will be redirected to &#x60;urls.default_redirect_url&#x60;.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  If this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="loginChallenge">Ory OAuth 2.0 Login Challenge.  If set will cooperate with Ory OAuth2 and OpenID to act as an OAuth2 server / OpenID Provider.  The value for this parameter comes from &#x60;login_challenge&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?login_challenge&#x3D;abcde&#x60;).  This feature is compatible with Ory Hydra when not running on the Ory Network. (optional)</param>
        /// <param name="afterVerificationReturnTo">The URL to return the browser to after the verification flow was completed.  After the registration flow is completed, the user will be sent a verification email. Upon completing the verification flow, this URL will be used to override the default &#x60;selfservice.flows.verification.after.default_redirect_to&#x60; value. (optional)</param>
        /// <param name="organization"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserRegistrationFlowApiResponse> CreateBrowserRegistrationFlowAsync(Option<string> returnTo = default, Option<string> loginChallenge = default, Option<string> afterVerificationReturnTo = default, Option<string> organization = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBrowserRegistrationFlow(returnTo, loginChallenge, afterVerificationReturnTo, organization);

                FormatCreateBrowserRegistrationFlow(ref returnTo, ref loginChallenge, ref afterVerificationReturnTo, ref organization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/registration/browser";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    if (loginChallenge.IsSet)
                        // here too
                        parseQueryStringLocalVar["login_challenge"] = ClientUtils.ParameterToString(loginChallenge.Value);

                    if (afterVerificationReturnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["after_verification_return_to"] = ClientUtils.ParameterToString(afterVerificationReturnTo.Value);

                    if (organization.IsSet)
                        // here too
                        parseQueryStringLocalVar["organization"] = ClientUtils.ParameterToString(organization.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBrowserRegistrationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBrowserRegistrationFlowApiResponse>();

                        CreateBrowserRegistrationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/registration/browser", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBrowserRegistrationFlowDefaultImplementation(apiResponseLocalVar, returnTo, loginChallenge, afterVerificationReturnTo, organization);

                        Events.ExecuteOnCreateBrowserRegistrationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBrowserRegistrationFlowDefaultImplementation(e, "/self-service/registration/browser", uriBuilderLocalVar.Path, returnTo, loginChallenge, afterVerificationReturnTo, organization);
                Events.ExecuteOnErrorCreateBrowserRegistrationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBrowserRegistrationFlowApiResponse"/>
        /// </summary>
        public partial class CreateBrowserRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateBrowserRegistrationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBrowserRegistrationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBrowserRegistrationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBrowserRegistrationFlowApiResponse(ILogger<CreateBrowserRegistrationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRegistrationFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRegistrationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRegistrationFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateBrowserSettingsFlow(ref Option<string> returnTo, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateCreateBrowserSettingsFlow(Option<string> returnTo, Option<string> cookie)
        {
            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        private void AfterCreateBrowserSettingsFlowDefaultImplementation(ICreateBrowserSettingsFlowApiResponse apiResponseLocalVar, Option<string> returnTo, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterCreateBrowserSettingsFlow(ref suppressDefaultLog, apiResponseLocalVar, returnTo, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        partial void AfterCreateBrowserSettingsFlow(ref bool suppressDefaultLog, ICreateBrowserSettingsFlowApiResponse apiResponseLocalVar, Option<string> returnTo, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        private void OnErrorCreateBrowserSettingsFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> returnTo, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateBrowserSettingsFlow(ref suppressDefaultLog, exception, pathFormat, path, returnTo, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        partial void OnErrorCreateBrowserSettingsFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> returnTo, Option<string> cookie);

        /// <summary>
        /// Create Settings Flow for Browsers This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserSettingsFlowApiResponse?> CreateBrowserSettingsFlowOrDefaultAsync(Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBrowserSettingsFlowAsync(returnTo, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Settings Flow for Browsers This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid Ory Kratos Session Cookie is included in the request, a login flow will be initialized.  If this endpoint is opened as a link in the browser, it will be redirected to &#x60;selfservice.flows.settings.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;. If no valid user session was set, the browser will be redirected to the login endpoint.  If this endpoint is called via an AJAX request, the response contains the settings flow without any redirects or a 401 forbidden error if no valid session was set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration!  This endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserSettingsFlowApiResponse> CreateBrowserSettingsFlowAsync(Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBrowserSettingsFlow(returnTo, cookie);

                FormatCreateBrowserSettingsFlow(ref returnTo, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/settings/browser";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBrowserSettingsFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBrowserSettingsFlowApiResponse>();

                        CreateBrowserSettingsFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/settings/browser", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBrowserSettingsFlowDefaultImplementation(apiResponseLocalVar, returnTo, cookie);

                        Events.ExecuteOnCreateBrowserSettingsFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBrowserSettingsFlowDefaultImplementation(e, "/self-service/settings/browser", uriBuilderLocalVar.Path, returnTo, cookie);
                Events.ExecuteOnErrorCreateBrowserSettingsFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBrowserSettingsFlowApiResponse"/>
        /// </summary>
        public partial class CreateBrowserSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateBrowserSettingsFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBrowserSettingsFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBrowserSettingsFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBrowserSettingsFlowApiResponse(ILogger<CreateBrowserSettingsFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSettingsFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSettingsFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSettingsFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest && !IsUnauthorized && !IsForbidden;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateBrowserVerificationFlow(ref Option<string> returnTo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="returnTo"></param>
        /// <returns></returns>
        private void ValidateCreateBrowserVerificationFlow(Option<string> returnTo)
        {
            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        private void AfterCreateBrowserVerificationFlowDefaultImplementation(ICreateBrowserVerificationFlowApiResponse apiResponseLocalVar, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            AfterCreateBrowserVerificationFlow(ref suppressDefaultLog, apiResponseLocalVar, returnTo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnTo"></param>
        partial void AfterCreateBrowserVerificationFlow(ref bool suppressDefaultLog, ICreateBrowserVerificationFlowApiResponse apiResponseLocalVar, Option<string> returnTo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        private void OnErrorCreateBrowserVerificationFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateBrowserVerificationFlow(ref suppressDefaultLog, exception, pathFormat, path, returnTo);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnTo"></param>
        partial void OnErrorCreateBrowserVerificationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> returnTo);

        /// <summary>
        /// Create Verification Flow for Browser Clients This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.verification.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserVerificationFlowApiResponse?> CreateBrowserVerificationFlowOrDefaultAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBrowserVerificationFlowAsync(returnTo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Verification Flow for Browser Clients This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to &#x60;selfservice.flows.verification.ui_url&#x60; with the flow ID set as the query parameter &#x60;?flow&#x3D;&#x60;.  If this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBrowserVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateBrowserVerificationFlowApiResponse> CreateBrowserVerificationFlowAsync(Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBrowserVerificationFlow(returnTo);

                FormatCreateBrowserVerificationFlow(ref returnTo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/verification/browser";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBrowserVerificationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBrowserVerificationFlowApiResponse>();

                        CreateBrowserVerificationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/verification/browser", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBrowserVerificationFlowDefaultImplementation(apiResponseLocalVar, returnTo);

                        Events.ExecuteOnCreateBrowserVerificationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBrowserVerificationFlowDefaultImplementation(e, "/self-service/verification/browser", uriBuilderLocalVar.Path, returnTo);
                Events.ExecuteOnErrorCreateBrowserVerificationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBrowserVerificationFlowApiResponse"/>
        /// </summary>
        public partial class CreateBrowserVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateBrowserVerificationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBrowserVerificationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBrowserVerificationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBrowserVerificationFlowApiResponse(ILogger<CreateBrowserVerificationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosVerificationFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosVerificationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosVerificationFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateNativeLoginFlow(ref Option<bool> refresh, ref Option<bool> returnSessionTokenExchangeCode, ref Option<string> aal, ref Option<string> xSessionToken, ref Option<string> returnTo, ref Option<string> via);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="aal"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="returnTo"></param>
        /// <param name="via"></param>
        /// <returns></returns>
        private void ValidateCreateNativeLoginFlow(Option<string> aal, Option<string> xSessionToken, Option<string> returnTo, Option<string> via)
        {
            if (aal.IsSet && aal.Value == null)
                throw new ArgumentNullException(nameof(aal));

            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));

            if (via.IsSet && via.Value == null)
                throw new ArgumentNullException(nameof(via));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="refresh"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="aal"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="returnTo"></param>
        /// <param name="via"></param>
        private void AfterCreateNativeLoginFlowDefaultImplementation(ICreateNativeLoginFlowApiResponse apiResponseLocalVar, Option<bool> refresh, Option<bool> returnSessionTokenExchangeCode, Option<string> aal, Option<string> xSessionToken, Option<string> returnTo, Option<string> via)
        {
            bool suppressDefaultLog = false;
            AfterCreateNativeLoginFlow(ref suppressDefaultLog, apiResponseLocalVar, refresh, returnSessionTokenExchangeCode, aal, xSessionToken, returnTo, via);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="refresh"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="aal"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="returnTo"></param>
        /// <param name="via"></param>
        partial void AfterCreateNativeLoginFlow(ref bool suppressDefaultLog, ICreateNativeLoginFlowApiResponse apiResponseLocalVar, Option<bool> refresh, Option<bool> returnSessionTokenExchangeCode, Option<string> aal, Option<string> xSessionToken, Option<string> returnTo, Option<string> via);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="refresh"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="aal"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="returnTo"></param>
        /// <param name="via"></param>
        private void OnErrorCreateNativeLoginFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<bool> refresh, Option<bool> returnSessionTokenExchangeCode, Option<string> aal, Option<string> xSessionToken, Option<string> returnTo, Option<string> via)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateNativeLoginFlow(ref suppressDefaultLog, exception, pathFormat, path, refresh, returnSessionTokenExchangeCode, aal, xSessionToken, returnTo, via);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="refresh"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="aal"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="returnTo"></param>
        /// <param name="via"></param>
        partial void OnErrorCreateNativeLoginFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<bool> refresh, Option<bool> returnSessionTokenExchangeCode, Option<string> aal, Option<string> xSessionToken, Option<string> returnTo, Option<string> via);

        /// <summary>
        /// Create Login Flow for Native Apps This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing login flow call &#x60;/self-service/login/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeLoginFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeLoginFlowApiResponse?> CreateNativeLoginFlowOrDefaultAsync(Option<bool> refresh = default, Option<bool> returnSessionTokenExchangeCode = default, Option<string> aal = default, Option<string> xSessionToken = default, Option<string> returnTo = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNativeLoginFlowAsync(refresh, returnSessionTokenExchangeCode, aal, xSessionToken, returnTo, via, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Login Flow for Native Apps This endpoint initiates a login flow for native apps that do not use a browser, such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing login flow call &#x60;/self-service/login/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks, including CSRF login attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;session_aal1_required&#x60;: Multi-factor auth (e.g. 2fa) was requested but the user has no session yet. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="refresh">Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session. (optional)</param>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="aal">Request a Specific AuthenticationMethod Assurance Level  Use this parameter to upgrade an existing session&#39;s authenticator assurance level (AAL). This allows you to ask for multi-factor authentication. When an identity sign in using e.g. username+password, the AAL is 1. If you wish to \&quot;upgrade\&quot; the session&#39;s security by asking the user to perform TOTP / WebAuth/ ... you would set this to \&quot;aal2\&quot;. (optional)</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="via">Via should contain the identity&#39;s credential the code should be sent to. Only relevant in aal2 flows. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeLoginFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeLoginFlowApiResponse> CreateNativeLoginFlowAsync(Option<bool> refresh = default, Option<bool> returnSessionTokenExchangeCode = default, Option<string> aal = default, Option<string> xSessionToken = default, Option<string> returnTo = default, Option<string> via = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNativeLoginFlow(aal, xSessionToken, returnTo, via);

                FormatCreateNativeLoginFlow(ref refresh, ref returnSessionTokenExchangeCode, ref aal, ref xSessionToken, ref returnTo, ref via);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/login/api";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (refresh.IsSet)
                        // here too
                        parseQueryStringLocalVar["refresh"] = ClientUtils.ParameterToString(refresh.Value);

                    if (returnSessionTokenExchangeCode.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_session_token_exchange_code"] = ClientUtils.ParameterToString(returnSessionTokenExchangeCode.Value);

                    if (aal.IsSet)
                        // here too
                        parseQueryStringLocalVar["aal"] = ClientUtils.ParameterToString(aal.Value);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    if (via.IsSet)
                        // here too
                        parseQueryStringLocalVar["via"] = ClientUtils.ParameterToString(via.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNativeLoginFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNativeLoginFlowApiResponse>();

                        CreateNativeLoginFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/login/api", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNativeLoginFlowDefaultImplementation(apiResponseLocalVar, refresh, returnSessionTokenExchangeCode, aal, xSessionToken, returnTo, via);

                        Events.ExecuteOnCreateNativeLoginFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNativeLoginFlowDefaultImplementation(e, "/self-service/login/api", uriBuilderLocalVar.Path, refresh, returnSessionTokenExchangeCode, aal, xSessionToken, returnTo, via);
                Events.ExecuteOnErrorCreateNativeLoginFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNativeLoginFlowApiResponse"/>
        /// </summary>
        public partial class CreateNativeLoginFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateNativeLoginFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNativeLoginFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNativeLoginFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNativeLoginFlowApiResponse(ILogger<CreateNativeLoginFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosLoginFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosLoginFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosLoginFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterCreateNativeRecoveryFlowDefaultImplementation(ICreateNativeRecoveryFlowApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterCreateNativeRecoveryFlow(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterCreateNativeRecoveryFlow(ref bool suppressDefaultLog, ICreateNativeRecoveryFlowApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorCreateNativeRecoveryFlowDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateNativeRecoveryFlow(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorCreateNativeRecoveryFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Create Recovery Flow for Native Apps This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  On an existing recovery flow, use the &#x60;getRecoveryFlow&#x60; API endpoint.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeRecoveryFlowApiResponse?> CreateNativeRecoveryFlowOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNativeRecoveryFlowAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Recovery Flow for Native Apps This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error.  On an existing recovery flow, use the &#x60;getRecoveryFlow&#x60; API endpoint.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeRecoveryFlowApiResponse> CreateNativeRecoveryFlowAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/recovery/api";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNativeRecoveryFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNativeRecoveryFlowApiResponse>();

                        CreateNativeRecoveryFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/recovery/api", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNativeRecoveryFlowDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnCreateNativeRecoveryFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNativeRecoveryFlowDefaultImplementation(e, "/self-service/recovery/api", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorCreateNativeRecoveryFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNativeRecoveryFlowApiResponse"/>
        /// </summary>
        public partial class CreateNativeRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateNativeRecoveryFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNativeRecoveryFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNativeRecoveryFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNativeRecoveryFlowApiResponse(ILogger<CreateNativeRecoveryFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRecoveryFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRecoveryFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRecoveryFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateNativeRegistrationFlow(ref Option<bool> returnSessionTokenExchangeCode, ref Option<string> returnTo);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="returnTo"></param>
        /// <returns></returns>
        private void ValidateCreateNativeRegistrationFlow(Option<string> returnTo)
        {
            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="returnTo"></param>
        private void AfterCreateNativeRegistrationFlowDefaultImplementation(ICreateNativeRegistrationFlowApiResponse apiResponseLocalVar, Option<bool> returnSessionTokenExchangeCode, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            AfterCreateNativeRegistrationFlow(ref suppressDefaultLog, apiResponseLocalVar, returnSessionTokenExchangeCode, returnTo);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="returnTo"></param>
        partial void AfterCreateNativeRegistrationFlow(ref bool suppressDefaultLog, ICreateNativeRegistrationFlowApiResponse apiResponseLocalVar, Option<bool> returnSessionTokenExchangeCode, Option<string> returnTo);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="returnTo"></param>
        private void OnErrorCreateNativeRegistrationFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<bool> returnSessionTokenExchangeCode, Option<string> returnTo)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateNativeRegistrationFlow(ref suppressDefaultLog, exception, pathFormat, path, returnSessionTokenExchangeCode, returnTo);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="returnSessionTokenExchangeCode"></param>
        /// <param name="returnTo"></param>
        partial void OnErrorCreateNativeRegistrationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<bool> returnSessionTokenExchangeCode, Option<string> returnTo);

        /// <summary>
        /// Create Registration Flow for Native Apps This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing registration flow call &#x60;/self-service/registration/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeRegistrationFlowApiResponse?> CreateNativeRegistrationFlowOrDefaultAsync(Option<bool> returnSessionTokenExchangeCode = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNativeRegistrationFlowAsync(returnSessionTokenExchangeCode, returnTo, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Registration Flow for Native Apps This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.  If a valid provided session cookie or session token is provided, a 400 Bad Request error will be returned unless the URL query parameter &#x60;?refresh&#x3D;true&#x60; is set.  To fetch an existing registration flow call &#x60;/self-service/registration/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="returnSessionTokenExchangeCode">EnableSessionTokenExchangeCode requests the login flow to include a code that can be used to retrieve the session token after the login flow has been completed. (optional)</param>
        /// <param name="returnTo">The URL to return the browser to after the flow was completed. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeRegistrationFlowApiResponse> CreateNativeRegistrationFlowAsync(Option<bool> returnSessionTokenExchangeCode = default, Option<string> returnTo = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNativeRegistrationFlow(returnTo);

                FormatCreateNativeRegistrationFlow(ref returnSessionTokenExchangeCode, ref returnTo);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/registration/api";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (returnSessionTokenExchangeCode.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_session_token_exchange_code"] = ClientUtils.ParameterToString(returnSessionTokenExchangeCode.Value);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNativeRegistrationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNativeRegistrationFlowApiResponse>();

                        CreateNativeRegistrationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/registration/api", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNativeRegistrationFlowDefaultImplementation(apiResponseLocalVar, returnSessionTokenExchangeCode, returnTo);

                        Events.ExecuteOnCreateNativeRegistrationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNativeRegistrationFlowDefaultImplementation(e, "/self-service/registration/api", uriBuilderLocalVar.Path, returnSessionTokenExchangeCode, returnTo);
                Events.ExecuteOnErrorCreateNativeRegistrationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNativeRegistrationFlowApiResponse"/>
        /// </summary>
        public partial class CreateNativeRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateNativeRegistrationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNativeRegistrationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNativeRegistrationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNativeRegistrationFlowApiResponse(ILogger<CreateNativeRegistrationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRegistrationFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRegistrationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRegistrationFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateNativeSettingsFlow(ref Option<string> xSessionToken);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xSessionToken"></param>
        /// <returns></returns>
        private void ValidateCreateNativeSettingsFlow(Option<string> xSessionToken)
        {
            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xSessionToken"></param>
        private void AfterCreateNativeSettingsFlowDefaultImplementation(ICreateNativeSettingsFlowApiResponse apiResponseLocalVar, Option<string> xSessionToken)
        {
            bool suppressDefaultLog = false;
            AfterCreateNativeSettingsFlow(ref suppressDefaultLog, apiResponseLocalVar, xSessionToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xSessionToken"></param>
        partial void AfterCreateNativeSettingsFlow(ref bool suppressDefaultLog, ICreateNativeSettingsFlowApiResponse apiResponseLocalVar, Option<string> xSessionToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="xSessionToken"></param>
        private void OnErrorCreateNativeSettingsFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> xSessionToken)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateNativeSettingsFlow(ref suppressDefaultLog, exception, pathFormat, path, xSessionToken);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="xSessionToken"></param>
        partial void OnErrorCreateNativeSettingsFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> xSessionToken);

        /// <summary>
        /// Create Settings Flow for Native Apps This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call &#x60;/self-service/settings/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeSettingsFlowApiResponse?> CreateNativeSettingsFlowOrDefaultAsync(Option<string> xSessionToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNativeSettingsFlowAsync(xSessionToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Settings Flow for Native Apps This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on. You must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.  To fetch an existing settings flow call &#x60;/self-service/settings/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeSettingsFlowApiResponse> CreateNativeSettingsFlowAsync(Option<string> xSessionToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateNativeSettingsFlow(xSessionToken);

                FormatCreateNativeSettingsFlow(ref xSessionToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/settings/api";

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNativeSettingsFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNativeSettingsFlowApiResponse>();

                        CreateNativeSettingsFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/settings/api", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNativeSettingsFlowDefaultImplementation(apiResponseLocalVar, xSessionToken);

                        Events.ExecuteOnCreateNativeSettingsFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNativeSettingsFlowDefaultImplementation(e, "/self-service/settings/api", uriBuilderLocalVar.Path, xSessionToken);
                Events.ExecuteOnErrorCreateNativeSettingsFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNativeSettingsFlowApiResponse"/>
        /// </summary>
        public partial class CreateNativeSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateNativeSettingsFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNativeSettingsFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNativeSettingsFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNativeSettingsFlowApiResponse(ILogger<CreateNativeSettingsFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSettingsFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSettingsFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSettingsFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterCreateNativeVerificationFlowDefaultImplementation(ICreateNativeVerificationFlowApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterCreateNativeVerificationFlow(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterCreateNativeVerificationFlow(ref bool suppressDefaultLog, ICreateNativeVerificationFlowApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorCreateNativeVerificationFlowDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateNativeVerificationFlow(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorCreateNativeVerificationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Create Verification Flow for Native Apps This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call &#x60;/self-service/verification/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeVerificationFlowApiResponse?> CreateNativeVerificationFlowOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateNativeVerificationFlowAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create Verification Flow for Native Apps This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.  To fetch an existing verification flow call &#x60;/self-service/verification/flows?flow&#x3D;&lt;flow_id&gt;&#x60;.  You MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server Pages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make you vulnerable to a variety of CSRF attacks.  This endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).  More information can be found at [Ory Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateNativeVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<ICreateNativeVerificationFlowApiResponse> CreateNativeVerificationFlowAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/verification/api";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateNativeVerificationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateNativeVerificationFlowApiResponse>();

                        CreateNativeVerificationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/verification/api", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateNativeVerificationFlowDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnCreateNativeVerificationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateNativeVerificationFlowDefaultImplementation(e, "/self-service/verification/api", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorCreateNativeVerificationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateNativeVerificationFlowApiResponse"/>
        /// </summary>
        public partial class CreateNativeVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, ICreateNativeVerificationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateNativeVerificationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateNativeVerificationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateNativeVerificationFlowApiResponse(ILogger<CreateNativeVerificationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosVerificationFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosVerificationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosVerificationFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDisableMyOtherSessions(ref Option<string> xSessionToken, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateDisableMyOtherSessions(Option<string> xSessionToken, Option<string> cookie)
        {
            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void AfterDisableMyOtherSessionsDefaultImplementation(IDisableMyOtherSessionsApiResponse apiResponseLocalVar, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterDisableMyOtherSessions(ref suppressDefaultLog, apiResponseLocalVar, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void AfterDisableMyOtherSessions(ref bool suppressDefaultLog, IDisableMyOtherSessionsApiResponse apiResponseLocalVar, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void OnErrorDisableMyOtherSessionsDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorDisableMyOtherSessions(ref suppressDefaultLog, exception, pathFormat, path, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void OnErrorDisableMyOtherSessions(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Disable my other sessions Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
        /// </summary>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMyOtherSessionsApiResponse"/>&gt;</returns>
        public async Task<IDisableMyOtherSessionsApiResponse?> DisableMyOtherSessionsOrDefaultAsync(Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DisableMyOtherSessionsAsync(xSessionToken, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Disable my other sessions Calling this endpoint invalidates all except the current session that belong to the logged-in user. Session data are not deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMyOtherSessionsApiResponse"/>&gt;</returns>
        public async Task<IDisableMyOtherSessionsApiResponse> DisableMyOtherSessionsAsync(Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDisableMyOtherSessions(xSessionToken, cookie);

                FormatDisableMyOtherSessions(ref xSessionToken, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/sessions";

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DisableMyOtherSessionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DisableMyOtherSessionsApiResponse>();

                        DisableMyOtherSessionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sessions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDisableMyOtherSessionsDefaultImplementation(apiResponseLocalVar, xSessionToken, cookie);

                        Events.ExecuteOnDisableMyOtherSessions(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDisableMyOtherSessionsDefaultImplementation(e, "/sessions", uriBuilderLocalVar.Path, xSessionToken, cookie);
                Events.ExecuteOnErrorDisableMyOtherSessions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DisableMyOtherSessionsApiResponse"/>
        /// </summary>
        public partial class DisableMyOtherSessionsApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IDisableMyOtherSessionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DisableMyOtherSessionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DisableMyOtherSessionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DisableMyOtherSessionsApiResponse(ILogger<DisableMyOtherSessionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosDeleteMySessionsCount? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosDeleteMySessionsCount>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosDeleteMySessionsCount? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsUnauthorized;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDisableMySession(ref string id, ref Option<string> xSessionToken, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateDisableMySession(string id, Option<string> xSessionToken, Option<string> cookie)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void AfterDisableMySessionDefaultImplementation(IDisableMySessionApiResponse apiResponseLocalVar, string id, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterDisableMySession(ref suppressDefaultLog, apiResponseLocalVar, id, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void AfterDisableMySession(ref bool suppressDefaultLog, IDisableMySessionApiResponse apiResponseLocalVar, string id, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void OnErrorDisableMySessionDefaultImplementation(Exception exception, string pathFormat, string path, string id, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorDisableMySession(ref suppressDefaultLog, exception, pathFormat, path, id, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void OnErrorDisableMySession(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Disable one of my sessions Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
        /// </summary>
        /// <param name="id">ID is the session&#39;s ID.</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMySessionApiResponse"/>&gt;</returns>
        public async Task<IDisableMySessionApiResponse?> DisableMySessionOrDefaultAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DisableMySessionAsync(id, xSessionToken, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Disable one of my sessions Calling this endpoint invalidates the specified session. The current session cannot be revoked. Session data are not deleted.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID is the session&#39;s ID.</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDisableMySessionApiResponse"/>&gt;</returns>
        public async Task<IDisableMySessionApiResponse> DisableMySessionAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDisableMySession(id, xSessionToken, cookie);

                FormatDisableMySession(ref id, ref xSessionToken, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/sessions/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DisableMySessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DisableMySessionApiResponse>();

                        DisableMySessionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sessions/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDisableMySessionDefaultImplementation(apiResponseLocalVar, id, xSessionToken, cookie);

                        Events.ExecuteOnDisableMySession(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDisableMySessionDefaultImplementation(e, "/sessions/{id}", uriBuilderLocalVar.Path, id, xSessionToken, cookie);
                Events.ExecuteOnErrorDisableMySession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DisableMySessionApiResponse"/>
        /// </summary>
        public partial class DisableMySessionApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IDisableMySessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DisableMySessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DisableMySessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DisableMySessionApiResponse(ILogger<DisableMySessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsNoContent && !IsBadRequest && !IsUnauthorized;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatExchangeSessionToken(ref string initCode, ref string returnToCode);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="initCode"></param>
        /// <param name="returnToCode"></param>
        /// <returns></returns>
        private void ValidateExchangeSessionToken(string initCode, string returnToCode)
        {
            if (initCode == null)
                throw new ArgumentNullException(nameof(initCode));

            if (returnToCode == null)
                throw new ArgumentNullException(nameof(returnToCode));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="initCode"></param>
        /// <param name="returnToCode"></param>
        private void AfterExchangeSessionTokenDefaultImplementation(IExchangeSessionTokenApiResponse apiResponseLocalVar, string initCode, string returnToCode)
        {
            bool suppressDefaultLog = false;
            AfterExchangeSessionToken(ref suppressDefaultLog, apiResponseLocalVar, initCode, returnToCode);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="initCode"></param>
        /// <param name="returnToCode"></param>
        partial void AfterExchangeSessionToken(ref bool suppressDefaultLog, IExchangeSessionTokenApiResponse apiResponseLocalVar, string initCode, string returnToCode);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="initCode"></param>
        /// <param name="returnToCode"></param>
        private void OnErrorExchangeSessionTokenDefaultImplementation(Exception exception, string pathFormat, string path, string initCode, string returnToCode)
        {
            bool suppressDefaultLog = false;
            OnErrorExchangeSessionToken(ref suppressDefaultLog, exception, pathFormat, path, initCode, returnToCode);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="initCode"></param>
        /// <param name="returnToCode"></param>
        partial void OnErrorExchangeSessionToken(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string initCode, string returnToCode);

        /// <summary>
        /// Exchange Session Token 
        /// </summary>
        /// <param name="initCode">The part of the code return when initializing the flow.</param>
        /// <param name="returnToCode">The part of the code returned by the return_to URL.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeSessionTokenApiResponse"/>&gt;</returns>
        public async Task<IExchangeSessionTokenApiResponse?> ExchangeSessionTokenOrDefaultAsync(string initCode, string returnToCode, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ExchangeSessionTokenAsync(initCode, returnToCode, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Exchange Session Token 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="initCode">The part of the code return when initializing the flow.</param>
        /// <param name="returnToCode">The part of the code returned by the return_to URL.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IExchangeSessionTokenApiResponse"/>&gt;</returns>
        public async Task<IExchangeSessionTokenApiResponse> ExchangeSessionTokenAsync(string initCode, string returnToCode, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateExchangeSessionToken(initCode, returnToCode);

                FormatExchangeSessionToken(ref initCode, ref returnToCode);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/sessions/token-exchange";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["init_code"] = ClientUtils.ParameterToString(initCode);
                    parseQueryStringLocalVar["return_to_code"] = ClientUtils.ParameterToString(returnToCode);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ExchangeSessionTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ExchangeSessionTokenApiResponse>();

                        ExchangeSessionTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sessions/token-exchange", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterExchangeSessionTokenDefaultImplementation(apiResponseLocalVar, initCode, returnToCode);

                        Events.ExecuteOnExchangeSessionToken(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExchangeSessionTokenDefaultImplementation(e, "/sessions/token-exchange", uriBuilderLocalVar.Path, initCode, returnToCode);
                Events.ExecuteOnErrorExchangeSessionToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ExchangeSessionTokenApiResponse"/>
        /// </summary>
        public partial class ExchangeSessionTokenApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IExchangeSessionTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ExchangeSessionTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ExchangeSessionTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ExchangeSessionTokenApiResponse(ILogger<ExchangeSessionTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsForbidden && !IsNotFound && !IsGone;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFlowError(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetFlowError(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetFlowErrorDefaultImplementation(IGetFlowErrorApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetFlowError(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetFlowError(ref bool suppressDefaultLog, IGetFlowErrorApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorGetFlowErrorDefaultImplementation(Exception exception, string pathFormat, string path, string id)
        {
            bool suppressDefaultLog = false;
            OnErrorGetFlowError(ref suppressDefaultLog, exception, pathFormat, path, id);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorGetFlowError(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id);

        /// <summary>
        /// Get User-Flow Errors This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?id&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
        /// </summary>
        /// <param name="id">Error is the error&#39;s ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFlowErrorApiResponse"/>&gt;</returns>
        public async Task<IGetFlowErrorApiResponse?> GetFlowErrorOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFlowErrorAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get User-Flow Errors This endpoint returns the error associated with a user-facing self service errors.  This endpoint supports stub values to help you implement the error UI:  &#x60;?id&#x3D;stub:500&#x60; - returns a stub 500 (Internal Server Error) error.  More information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Error is the error&#39;s ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFlowErrorApiResponse"/>&gt;</returns>
        public async Task<IGetFlowErrorApiResponse> GetFlowErrorAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFlowError(id);

                FormatGetFlowError(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/errors";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFlowErrorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFlowErrorApiResponse>();

                        GetFlowErrorApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/errors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFlowErrorDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetFlowError(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFlowErrorDefaultImplementation(e, "/self-service/errors", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetFlowError(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFlowErrorApiResponse"/>
        /// </summary>
        public partial class GetFlowErrorApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetFlowErrorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFlowErrorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFlowErrorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFlowErrorApiResponse(ILogger<GetFlowErrorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosFlowError? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosFlowError>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosFlowError? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLoginFlow(ref string id, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateGetLoginFlow(string id, Option<string> cookie)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void AfterGetLoginFlowDefaultImplementation(IGetLoginFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterGetLoginFlow(ref suppressDefaultLog, apiResponseLocalVar, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void AfterGetLoginFlow(ref bool suppressDefaultLog, IGetLoginFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void OnErrorGetLoginFlowDefaultImplementation(Exception exception, string pathFormat, string path, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorGetLoginFlow(ref suppressDefaultLog, exception, pathFormat, path, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void OnErrorGetLoginFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id, Option<string> cookie);

        /// <summary>
        /// Get Login Flow This endpoint returns a login flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/login&#39;, async function (req, res) { const flow &#x3D; await client.getLoginFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;login&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="id">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLoginFlowApiResponse"/>&gt;</returns>
        public async Task<IGetLoginFlowApiResponse?> GetLoginFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLoginFlowAsync(id, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Login Flow This endpoint returns a login flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/login&#39;, async function (req, res) { const flow &#x3D; await client.getLoginFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;login&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLoginFlowApiResponse"/>&gt;</returns>
        public async Task<IGetLoginFlowApiResponse> GetLoginFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLoginFlow(id, cookie);

                FormatGetLoginFlow(ref id, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/login/flows";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLoginFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLoginFlowApiResponse>();

                        GetLoginFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/login/flows", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLoginFlowDefaultImplementation(apiResponseLocalVar, id, cookie);

                        Events.ExecuteOnGetLoginFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLoginFlowDefaultImplementation(e, "/self-service/login/flows", uriBuilderLocalVar.Path, id, cookie);
                Events.ExecuteOnErrorGetLoginFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLoginFlowApiResponse"/>
        /// </summary>
        public partial class GetLoginFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetLoginFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLoginFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLoginFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLoginFlowApiResponse(ILogger<GetLoginFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosLoginFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosLoginFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosLoginFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsForbidden && !IsNotFound && !IsGone;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRecoveryFlow(ref string id, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateGetRecoveryFlow(string id, Option<string> cookie)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void AfterGetRecoveryFlowDefaultImplementation(IGetRecoveryFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterGetRecoveryFlow(ref suppressDefaultLog, apiResponseLocalVar, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void AfterGetRecoveryFlow(ref bool suppressDefaultLog, IGetRecoveryFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void OnErrorGetRecoveryFlowDefaultImplementation(Exception exception, string pathFormat, string path, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorGetRecoveryFlow(ref suppressDefaultLog, exception, pathFormat, path, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void OnErrorGetRecoveryFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id, Option<string> cookie);

        /// <summary>
        /// Get Recovery Flow This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getRecoveryFlow(req.header(&#39;Cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;recovery&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<IGetRecoveryFlowApiResponse?> GetRecoveryFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRecoveryFlowAsync(id, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Recovery Flow This endpoint returns a recovery flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getRecoveryFlow(req.header(&#39;Cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;recovery&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<IGetRecoveryFlowApiResponse> GetRecoveryFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRecoveryFlow(id, cookie);

                FormatGetRecoveryFlow(ref id, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/recovery/flows";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRecoveryFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRecoveryFlowApiResponse>();

                        GetRecoveryFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/recovery/flows", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRecoveryFlowDefaultImplementation(apiResponseLocalVar, id, cookie);

                        Events.ExecuteOnGetRecoveryFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRecoveryFlowDefaultImplementation(e, "/self-service/recovery/flows", uriBuilderLocalVar.Path, id, cookie);
                Events.ExecuteOnErrorGetRecoveryFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRecoveryFlowApiResponse"/>
        /// </summary>
        public partial class GetRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetRecoveryFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRecoveryFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRecoveryFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRecoveryFlowApiResponse(ILogger<GetRecoveryFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRecoveryFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRecoveryFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRecoveryFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsNotFound && !IsGone;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRegistrationFlow(ref string id, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateGetRegistrationFlow(string id, Option<string> cookie)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void AfterGetRegistrationFlowDefaultImplementation(IGetRegistrationFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterGetRegistrationFlow(ref suppressDefaultLog, apiResponseLocalVar, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void AfterGetRegistrationFlow(ref bool suppressDefaultLog, IGetRegistrationFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void OnErrorGetRegistrationFlowDefaultImplementation(Exception exception, string pathFormat, string path, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorGetRegistrationFlow(ref suppressDefaultLog, exception, pathFormat, path, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void OnErrorGetRegistrationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id, Option<string> cookie);

        /// <summary>
        /// Get Registration Flow This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/registration&#39;, async function (req, res) { const flow &#x3D; await client.getRegistrationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;registration&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="id">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<IGetRegistrationFlowApiResponse?> GetRegistrationFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRegistrationFlowAsync(id, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Registration Flow This endpoint returns a registration flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/registration&#39;, async function (req, res) { const flow &#x3D; await client.getRegistrationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;registration&#39;, flow) }) &#x60;&#x60;&#x60;  This request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;self_service_flow_expired&#x60;: The flow is expired and you should request a new one.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<IGetRegistrationFlowApiResponse> GetRegistrationFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetRegistrationFlow(id, cookie);

                FormatGetRegistrationFlow(ref id, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/registration/flows";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRegistrationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRegistrationFlowApiResponse>();

                        GetRegistrationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/registration/flows", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRegistrationFlowDefaultImplementation(apiResponseLocalVar, id, cookie);

                        Events.ExecuteOnGetRegistrationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRegistrationFlowDefaultImplementation(e, "/self-service/registration/flows", uriBuilderLocalVar.Path, id, cookie);
                Events.ExecuteOnErrorGetRegistrationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRegistrationFlowApiResponse"/>
        /// </summary>
        public partial class GetRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetRegistrationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRegistrationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRegistrationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRegistrationFlowApiResponse(ILogger<GetRegistrationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRegistrationFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRegistrationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRegistrationFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsForbidden && !IsNotFound && !IsGone;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSettingsFlow(ref string id, ref Option<string> xSessionToken, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateGetSettingsFlow(string id, Option<string> xSessionToken, Option<string> cookie)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void AfterGetSettingsFlowDefaultImplementation(IGetSettingsFlowApiResponse apiResponseLocalVar, string id, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterGetSettingsFlow(ref suppressDefaultLog, apiResponseLocalVar, id, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void AfterGetSettingsFlow(ref bool suppressDefaultLog, IGetSettingsFlowApiResponse apiResponseLocalVar, string id, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void OnErrorGetSettingsFlowDefaultImplementation(Exception exception, string pathFormat, string path, string id, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorGetSettingsFlow(ref suppressDefaultLog, exception, pathFormat, path, id, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void OnErrorGetSettingsFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Get Settings Flow When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <param name="id">ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token  When using the SDK in an app without a browser, please include the session token here. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<IGetSettingsFlowApiResponse?> GetSettingsFlowOrDefaultAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSettingsFlowAsync(id, xSessionToken, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Settings Flow When accessing this endpoint through Ory Kratos&#39; Public API you must ensure that either the Ory Kratos Session Cookie or the Ory Kratos Session Token are set.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  You can access this endpoint without credentials when using Ory Kratos&#39; Admin API.  If this endpoint is called via an AJAX request, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID is the Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token  When using the SDK in an app without a browser, please include the session token here. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<IGetSettingsFlowApiResponse> GetSettingsFlowAsync(string id, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSettingsFlow(id, xSessionToken, cookie);

                FormatGetSettingsFlow(ref id, ref xSessionToken, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/settings/flows";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSettingsFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSettingsFlowApiResponse>();

                        GetSettingsFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/settings/flows", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSettingsFlowDefaultImplementation(apiResponseLocalVar, id, xSessionToken, cookie);

                        Events.ExecuteOnGetSettingsFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSettingsFlowDefaultImplementation(e, "/self-service/settings/flows", uriBuilderLocalVar.Path, id, xSessionToken, cookie);
                Events.ExecuteOnErrorGetSettingsFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSettingsFlowApiResponse"/>
        /// </summary>
        public partial class GetSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetSettingsFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSettingsFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSettingsFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSettingsFlowApiResponse(ILogger<GetSettingsFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSettingsFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSettingsFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSettingsFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsUnauthorized && !IsForbidden && !IsNotFound && !IsGone;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetVerificationFlow(ref string id, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateGetVerificationFlow(string id, Option<string> cookie)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void AfterGetVerificationFlowDefaultImplementation(IGetVerificationFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterGetVerificationFlow(ref suppressDefaultLog, apiResponseLocalVar, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void AfterGetVerificationFlow(ref bool suppressDefaultLog, IGetVerificationFlowApiResponse apiResponseLocalVar, string id, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        private void OnErrorGetVerificationFlowDefaultImplementation(Exception exception, string pathFormat, string path, string id, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorGetVerificationFlow(ref suppressDefaultLog, exception, pathFormat, path, id, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="cookie"></param>
        partial void OnErrorGetVerificationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id, Option<string> cookie);

        /// <summary>
        /// Get Verification Flow This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getVerificationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;verification&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<IGetVerificationFlowApiResponse?> GetVerificationFlowOrDefaultAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetVerificationFlowAsync(id, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Verification Flow This endpoint returns a verification flow&#39;s context with, for example, error details and other information.  Browser flows expect the anti-CSRF cookie to be included in the request&#39;s HTTP Cookie Header. For AJAX requests you must ensure that cookies are included in the request or requests will fail.  If you use the browser-flow for server-side apps, the services need to run on a common top-level-domain and you need to forward the incoming HTTP Cookie header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/recovery&#39;, async function (req, res) { const flow &#x3D; await client.getVerificationFlow(req.header(&#39;cookie&#39;), req.query[&#39;flow&#39;])  res.render(&#39;verification&#39;, flow) }) &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Flow ID  The value for this parameter comes from &#x60;request&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK on the server side you must include the HTTP Cookie Header originally sent to your HTTP handler here. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<IGetVerificationFlowApiResponse> GetVerificationFlowAsync(string id, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetVerificationFlow(id, cookie);

                FormatGetVerificationFlow(ref id, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/verification/flows";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetVerificationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetVerificationFlowApiResponse>();

                        GetVerificationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/verification/flows", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetVerificationFlowDefaultImplementation(apiResponseLocalVar, id, cookie);

                        Events.ExecuteOnGetVerificationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetVerificationFlowDefaultImplementation(e, "/self-service/verification/flows", uriBuilderLocalVar.Path, id, cookie);
                Events.ExecuteOnErrorGetVerificationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetVerificationFlowApiResponse"/>
        /// </summary>
        public partial class GetVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetVerificationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetVerificationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetVerificationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetVerificationFlowApiResponse(ILogger<GetVerificationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosVerificationFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosVerificationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosVerificationFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsForbidden && !IsNotFound;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetWebAuthnJavaScriptDefaultImplementation(IGetWebAuthnJavaScriptApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetWebAuthnJavaScript(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetWebAuthnJavaScript(ref bool suppressDefaultLog, IGetWebAuthnJavaScriptApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetWebAuthnJavaScriptDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetWebAuthnJavaScript(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetWebAuthnJavaScript(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get WebAuthn JavaScript This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  &#x60;&#x60;&#x60;html &lt;script src&#x3D;\&quot;https://public-kratos.example.org/.well-known/ory/webauthn.js\&quot; type&#x3D;\&quot;script\&quot; async /&gt; &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebAuthnJavaScriptApiResponse"/>&gt;</returns>
        public async Task<IGetWebAuthnJavaScriptApiResponse?> GetWebAuthnJavaScriptOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebAuthnJavaScriptAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get WebAuthn JavaScript This endpoint provides JavaScript which is needed in order to perform WebAuthn login and registration.  If you are building a JavaScript Browser App (e.g. in ReactJS or AngularJS) you will need to load this file:  &#x60;&#x60;&#x60;html &lt;script src&#x3D;\&quot;https://public-kratos.example.org/.well-known/ory/webauthn.js\&quot; type&#x3D;\&quot;script\&quot; async /&gt; &#x60;&#x60;&#x60;  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebAuthnJavaScriptApiResponse"/>&gt;</returns>
        public async Task<IGetWebAuthnJavaScriptApiResponse> GetWebAuthnJavaScriptAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/.well-known/ory/webauthn.js";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWebAuthnJavaScriptApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebAuthnJavaScriptApiResponse>();

                        GetWebAuthnJavaScriptApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/.well-known/ory/webauthn.js", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebAuthnJavaScriptDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetWebAuthnJavaScript(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebAuthnJavaScriptDefaultImplementation(e, "/.well-known/ory/webauthn.js", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetWebAuthnJavaScript(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebAuthnJavaScriptApiResponse"/>
        /// </summary>
        public partial class GetWebAuthnJavaScriptApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetWebAuthnJavaScriptApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebAuthnJavaScriptApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebAuthnJavaScriptApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebAuthnJavaScriptApiResponse(ILogger<GetWebAuthnJavaScriptApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListMySessions(ref Option<long> page, ref Option<string> xSessionToken, ref Option<string> cookie, ref Option<long> perPage, ref Option<long> pageSize, ref Option<string> pageToken);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="pageToken"></param>
        /// <returns></returns>
        private void ValidateListMySessions(Option<string> xSessionToken, Option<string> cookie, Option<string> pageToken)
        {
            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));

            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="perPage"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageToken"></param>
        private void AfterListMySessionsDefaultImplementation(IListMySessionsApiResponse apiResponseLocalVar, Option<long> page, Option<string> xSessionToken, Option<string> cookie, Option<long> perPage, Option<long> pageSize, Option<string> pageToken)
        {
            bool suppressDefaultLog = false;
            AfterListMySessions(ref suppressDefaultLog, apiResponseLocalVar, page, xSessionToken, cookie, perPage, pageSize, pageToken);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="perPage"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageToken"></param>
        partial void AfterListMySessions(ref bool suppressDefaultLog, IListMySessionsApiResponse apiResponseLocalVar, Option<long> page, Option<string> xSessionToken, Option<string> cookie, Option<long> perPage, Option<long> pageSize, Option<string> pageToken);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="page"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="perPage"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageToken"></param>
        private void OnErrorListMySessionsDefaultImplementation(Exception exception, string pathFormat, string path, Option<long> page, Option<string> xSessionToken, Option<string> cookie, Option<long> perPage, Option<long> pageSize, Option<string> pageToken)
        {
            bool suppressDefaultLog = false;
            OnErrorListMySessions(ref suppressDefaultLog, exception, pathFormat, path, page, xSessionToken, cookie, perPage, pageSize, pageToken);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="page"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="perPage"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageToken"></param>
        partial void OnErrorListMySessions(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<long> page, Option<string> xSessionToken, Option<string> cookie, Option<long> perPage, Option<long> pageSize, Option<string> pageToken);

        /// <summary>
        /// Get My Active Sessions This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the &#x60;/sessions/whoami&#x60; endpoint.
        /// </summary>
        /// <param name="page">Deprecated Pagination Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the &#x60;Link&#x60; header. (optional)</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="perPage">Deprecated Items per Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This is the number of items per page. (optional, default to 250)</param>
        /// <param name="pageSize">Page Size  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMySessionsApiResponse"/>&gt;</returns>
        public async Task<IListMySessionsApiResponse?> ListMySessionsOrDefaultAsync(Option<long> page = default, Option<string> xSessionToken = default, Option<string> cookie = default, Option<long> perPage = default, Option<long> pageSize = default, Option<string> pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListMySessionsAsync(page, xSessionToken, cookie, perPage, pageSize, pageToken, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get My Active Sessions This endpoints returns all other active sessions that belong to the logged-in user. The current session can be retrieved by calling the &#x60;/sessions/whoami&#x60; endpoint.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Deprecated Pagination Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This value is currently an integer, but it is not sequential. The value is not the page number, but a reference. The next page can be any number and some numbers might return an empty list.  For example, page 2 might not follow after page 1. And even if page 3 and 5 exist, but page 4 might not exist. The first page can be retrieved by omitting this parameter. Following page pointers will be returned in the &#x60;Link&#x60; header. (optional)</param>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="perPage">Deprecated Items per Page  DEPRECATED: Please use &#x60;page_token&#x60; instead. This parameter will be removed in the future.  This is the number of items per page. (optional, default to 250)</param>
        /// <param name="pageSize">Page Size  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to &quot;1&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListMySessionsApiResponse"/>&gt;</returns>
        public async Task<IListMySessionsApiResponse> ListMySessionsAsync(Option<long> page = default, Option<string> xSessionToken = default, Option<string> cookie = default, Option<long> perPage = default, Option<long> pageSize = default, Option<string> pageToken = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListMySessions(xSessionToken, cookie, pageToken);

                FormatListMySessions(ref page, ref xSessionToken, ref cookie, ref perPage, ref pageSize, ref pageToken);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/sessions";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        // here too
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (perPage.IsSet)
                        // here too
                        parseQueryStringLocalVar["per_page"] = ClientUtils.ParameterToString(perPage.Value);

                    if (pageSize.IsSet)
                        // here too
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (pageToken.IsSet)
                        // here too
                        parseQueryStringLocalVar["page_token"] = ClientUtils.ParameterToString(pageToken.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListMySessionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListMySessionsApiResponse>();

                        ListMySessionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sessions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListMySessionsDefaultImplementation(apiResponseLocalVar, page, xSessionToken, cookie, perPage, pageSize, pageToken);

                        Events.ExecuteOnListMySessions(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListMySessionsDefaultImplementation(e, "/sessions", uriBuilderLocalVar.Path, page, xSessionToken, cookie, perPage, pageSize, pageToken);
                Events.ExecuteOnErrorListMySessions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListMySessionsApiResponse"/>
        /// </summary>
        public partial class ListMySessionsApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IListMySessionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListMySessionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListMySessionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListMySessionsApiResponse(ILogger<ListMySessionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<KratosSession>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<KratosSession>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<KratosSession>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest && !IsUnauthorized;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPerformNativeLogout(KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        /// <returns></returns>
        private void ValidatePerformNativeLogout(KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody)
        {
            if (kratosPerformNativeLogoutBody == null)
                throw new ArgumentNullException(nameof(kratosPerformNativeLogoutBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        private void AfterPerformNativeLogoutDefaultImplementation(IPerformNativeLogoutApiResponse apiResponseLocalVar, KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody)
        {
            bool suppressDefaultLog = false;
            AfterPerformNativeLogout(ref suppressDefaultLog, apiResponseLocalVar, kratosPerformNativeLogoutBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        partial void AfterPerformNativeLogout(ref bool suppressDefaultLog, IPerformNativeLogoutApiResponse apiResponseLocalVar, KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        private void OnErrorPerformNativeLogoutDefaultImplementation(Exception exception, string pathFormat, string path, KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody)
        {
            bool suppressDefaultLog = false;
            OnErrorPerformNativeLogout(ref suppressDefaultLog, exception, pathFormat, path, kratosPerformNativeLogoutBody);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        partial void OnErrorPerformNativeLogout(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody);

        /// <summary>
        /// Perform Logout for Native Apps Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
        /// </summary>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPerformNativeLogoutApiResponse"/>&gt;</returns>
        public async Task<IPerformNativeLogoutApiResponse?> PerformNativeLogoutOrDefaultAsync(KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PerformNativeLogoutAsync(kratosPerformNativeLogoutBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Perform Logout for Native Apps Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully revoked, the server returns a 204 No Content response. A 204 No Content response is also sent when the Ory Session Token has been revoked already before.  If the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.  This endpoint does not remove any HTTP Cookies - use the Browser-Based Self-Service Logout Flow instead.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosPerformNativeLogoutBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPerformNativeLogoutApiResponse"/>&gt;</returns>
        public async Task<IPerformNativeLogoutApiResponse> PerformNativeLogoutAsync(KratosPerformNativeLogoutBody kratosPerformNativeLogoutBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePerformNativeLogout(kratosPerformNativeLogoutBody);

                FormatPerformNativeLogout(kratosPerformNativeLogoutBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/logout/api";

                    httpRequestMessageLocalVar.Content = (kratosPerformNativeLogoutBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(kratosPerformNativeLogoutBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PerformNativeLogoutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PerformNativeLogoutApiResponse>();

                        PerformNativeLogoutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/logout/api", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPerformNativeLogoutDefaultImplementation(apiResponseLocalVar, kratosPerformNativeLogoutBody);

                        Events.ExecuteOnPerformNativeLogout(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPerformNativeLogoutDefaultImplementation(e, "/self-service/logout/api", uriBuilderLocalVar.Path, kratosPerformNativeLogoutBody);
                Events.ExecuteOnErrorPerformNativeLogout(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PerformNativeLogoutApiResponse"/>
        /// </summary>
        public partial class PerformNativeLogoutApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IPerformNativeLogoutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PerformNativeLogoutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PerformNativeLogoutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PerformNativeLogoutApiResponse(ILogger<PerformNativeLogoutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsNoContent && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatToSession(ref Option<string> xSessionToken, ref Option<string> cookie, ref Option<string> tokenizeAs);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="tokenizeAs"></param>
        /// <returns></returns>
        private void ValidateToSession(Option<string> xSessionToken, Option<string> cookie, Option<string> tokenizeAs)
        {
            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));

            if (tokenizeAs.IsSet && tokenizeAs.Value == null)
                throw new ArgumentNullException(nameof(tokenizeAs));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="tokenizeAs"></param>
        private void AfterToSessionDefaultImplementation(IToSessionApiResponse apiResponseLocalVar, Option<string> xSessionToken, Option<string> cookie, Option<string> tokenizeAs)
        {
            bool suppressDefaultLog = false;
            AfterToSession(ref suppressDefaultLog, apiResponseLocalVar, xSessionToken, cookie, tokenizeAs);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="tokenizeAs"></param>
        partial void AfterToSession(ref bool suppressDefaultLog, IToSessionApiResponse apiResponseLocalVar, Option<string> xSessionToken, Option<string> cookie, Option<string> tokenizeAs);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="tokenizeAs"></param>
        private void OnErrorToSessionDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> xSessionToken, Option<string> cookie, Option<string> tokenizeAs)
        {
            bool suppressDefaultLog = false;
            OnErrorToSession(ref suppressDefaultLog, exception, pathFormat, path, xSessionToken, cookie, tokenizeAs);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <param name="tokenizeAs"></param>
        partial void OnErrorToSession(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> xSessionToken, Option<string> cookie, Option<string> tokenizeAs);

        /// <summary>
        /// Check Who the Current HTTP Session Belongs To Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the &#39;X-Kratos-Authenticated-Identity-Id&#39; header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/protected-endpoint&#39;, async function (req, res) { const session &#x3D; await client.toSession(undefined, req.header(&#39;cookie&#39;))  console.log(session) }) &#x60;&#x60;&#x60;  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;)  console.log(session) &#x60;&#x60;&#x60;  When using a token template, the token is included in the &#x60;tokenized&#x60; field of the session.  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;, { tokenize_as: \&quot;example-jwt-template\&quot; })  console.log(session.tokenized) // The JWT &#x60;&#x60;&#x60;  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the &#x60;X-Session-Token&#x60; header!  This endpoint authenticates users by checking:  if the &#x60;Cookie&#x60; HTTP header was set containing an Ory Kratos Session Cookie; if the &#x60;Authorization: bearer &lt;ory-session-token&gt;&#x60; HTTP header was set with a valid Ory Kratos Session Token; if the &#x60;X-Session-Token&#x60; HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cookie or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_inactive&#x60;: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). &#x60;session_aal2_required&#x60;: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
        /// </summary>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="tokenizeAs">Returns the session additionally as a token (such as a JWT)  The value of this parameter has to be a valid, configured Ory Session token template. For more information head over to [the documentation](http://ory.sh/docs/identities/session-to-jwt-cors). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToSessionApiResponse"/>&gt;</returns>
        public async Task<IToSessionApiResponse?> ToSessionOrDefaultAsync(Option<string> xSessionToken = default, Option<string> cookie = default, Option<string> tokenizeAs = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ToSessionAsync(xSessionToken, cookie, tokenizeAs, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Check Who the Current HTTP Session Belongs To Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated. Returns a session object in the body or 401 if the credentials are invalid or no credentials were sent. When the request it successful it adds the user ID to the &#39;X-Kratos-Authenticated-Identity-Id&#39; header in the response.  If you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:  &#x60;&#x60;&#x60;js pseudo-code example router.get(&#39;/protected-endpoint&#39;, async function (req, res) { const session &#x3D; await client.toSession(undefined, req.header(&#39;cookie&#39;))  console.log(session) }) &#x60;&#x60;&#x60;  When calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;)  console.log(session) &#x60;&#x60;&#x60;  When using a token template, the token is included in the &#x60;tokenized&#x60; field of the session.  &#x60;&#x60;&#x60;js pseudo-code example ... const session &#x3D; await client.toSession(\&quot;the-session-token\&quot;, { tokenize_as: \&quot;example-jwt-template\&quot; })  console.log(session.tokenized) // The JWT &#x60;&#x60;&#x60;  Depending on your configuration this endpoint might return a 403 status code if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor or change the configuration.  This endpoint is useful for:  AJAX calls. Remember to send credentials and set up CORS correctly! Reverse proxies and API Gateways Server-side calls - use the &#x60;X-Session-Token&#x60; header!  This endpoint authenticates users by checking:  if the &#x60;Cookie&#x60; HTTP header was set containing an Ory Kratos Session Cookie; if the &#x60;Authorization: bearer &lt;ory-session-token&gt;&#x60; HTTP header was set with a valid Ory Kratos Session Token; if the &#x60;X-Session-Token&#x60; HTTP header was set with a valid Ory Kratos Session Token.  If none of these headers are set or the cookie or token are invalid, the endpoint returns a HTTP 401 status code.  As explained above, this request may fail due to several reasons. The &#x60;error.id&#x60; can be one of:  &#x60;session_inactive&#x60;: No active session was found in the request (e.g. no Ory Session Cookie / Ory Session Token). &#x60;session_aal2_required&#x60;: An active session was found but it does not fulfil the Authenticator Assurance Level, implying that the session must (e.g.) authenticate the second factor.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSessionToken">Set the Session Token when calling from non-browser clients. A session token has a format of &#x60;MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj&#x60;. (optional)</param>
        /// <param name="cookie">Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that scenario you must include the HTTP Cookie Header which originally was included in the request to your server. An example of a session in the HTTP Cookie Header is: &#x60;ory_kratos_session&#x3D;a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f&#x3D;&#x3D;&#x60;.  It is ok if more than one cookie are included here as all other cookies will be ignored. (optional)</param>
        /// <param name="tokenizeAs">Returns the session additionally as a token (such as a JWT)  The value of this parameter has to be a valid, configured Ory Session token template. For more information head over to [the documentation](http://ory.sh/docs/identities/session-to-jwt-cors). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IToSessionApiResponse"/>&gt;</returns>
        public async Task<IToSessionApiResponse> ToSessionAsync(Option<string> xSessionToken = default, Option<string> cookie = default, Option<string> tokenizeAs = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateToSession(xSessionToken, cookie, tokenizeAs);

                FormatToSession(ref xSessionToken, ref cookie, ref tokenizeAs);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/sessions/whoami";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (tokenizeAs.IsSet)
                        // here too
                        parseQueryStringLocalVar["tokenize_as"] = ClientUtils.ParameterToString(tokenizeAs.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ToSessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ToSessionApiResponse>();

                        ToSessionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/sessions/whoami", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterToSessionDefaultImplementation(apiResponseLocalVar, xSessionToken, cookie, tokenizeAs);

                        Events.ExecuteOnToSession(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorToSessionDefaultImplementation(e, "/sessions/whoami", uriBuilderLocalVar.Path, xSessionToken, cookie, tokenizeAs);
                Events.ExecuteOnErrorToSession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ToSessionApiResponse"/>
        /// </summary>
        public partial class ToSessionApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IToSessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ToSessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ToSessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ToSessionApiResponse(ILogger<ToSessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSession? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSession>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSession? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsUnauthorized && !IsForbidden;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateLoginFlow(KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, ref string flow, ref Option<string> xSessionToken, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateUpdateLoginFlow(KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie)
        {
            if (kratosUpdateLoginFlowBody == null)
                throw new ArgumentNullException(nameof(kratosUpdateLoginFlowBody));

            if (flow == null)
                throw new ArgumentNullException(nameof(flow));

            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void AfterUpdateLoginFlowDefaultImplementation(IUpdateLoginFlowApiResponse apiResponseLocalVar, KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterUpdateLoginFlow(ref suppressDefaultLog, apiResponseLocalVar, kratosUpdateLoginFlowBody, flow, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void AfterUpdateLoginFlow(ref bool suppressDefaultLog, IUpdateLoginFlowApiResponse apiResponseLocalVar, KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void OnErrorUpdateLoginFlowDefaultImplementation(Exception exception, string pathFormat, string path, KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateLoginFlow(ref suppressDefaultLog, exception, pathFormat, path, kratosUpdateLoginFlowBody, flow, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void OnErrorUpdateLoginFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Submit a Login Flow Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the &#x60;return_to&#x60; value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLoginFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateLoginFlowApiResponse?> UpdateLoginFlowOrDefaultAsync(KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateLoginFlowAsync(kratosUpdateLoginFlowBody, flow, xSessionToken, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Submit a Login Flow Use this endpoint to complete a login flow. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and responds with HTTP 200 and a application/json body with the session token on success; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after login URL or the &#x60;return_to&#x60; value if it was set and if the login succeeded; a HTTP 303 redirect to the login UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateLoginFlowBody"></param>
        /// <param name="flow">The Login Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/login?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLoginFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateLoginFlowApiResponse> UpdateLoginFlowAsync(KratosUpdateLoginFlowBody kratosUpdateLoginFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateLoginFlow(kratosUpdateLoginFlowBody, flow, xSessionToken, cookie);

                FormatUpdateLoginFlow(kratosUpdateLoginFlowBody, ref flow, ref xSessionToken, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/login";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["flow"] = ClientUtils.ParameterToString(flow);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.Content = (kratosUpdateLoginFlowBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(kratosUpdateLoginFlowBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateLoginFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateLoginFlowApiResponse>();

                        UpdateLoginFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/login", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateLoginFlowDefaultImplementation(apiResponseLocalVar, kratosUpdateLoginFlowBody, flow, xSessionToken, cookie);

                        Events.ExecuteOnUpdateLoginFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateLoginFlowDefaultImplementation(e, "/self-service/login", uriBuilderLocalVar.Path, kratosUpdateLoginFlowBody, flow, xSessionToken, cookie);
                Events.ExecuteOnErrorUpdateLoginFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateLoginFlowApiResponse"/>
        /// </summary>
        public partial class UpdateLoginFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IUpdateLoginFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateLoginFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateLoginFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateLoginFlowApiResponse(ILogger<UpdateLoginFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSuccessfulNativeLogin? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosLoginFlow? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosLoginFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosLoginFlow? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest && !IsGone && !IsUnprocessableContent;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateLogoutFlow(ref Option<string> token, ref Option<string> returnTo, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="token"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateUpdateLogoutFlow(Option<string> token, Option<string> returnTo, Option<string> cookie)
        {
            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token));

            if (returnTo.IsSet && returnTo.Value == null)
                throw new ArgumentNullException(nameof(returnTo));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        private void AfterUpdateLogoutFlowDefaultImplementation(IUpdateLogoutFlowApiResponse apiResponseLocalVar, Option<string> token, Option<string> returnTo, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterUpdateLogoutFlow(ref suppressDefaultLog, apiResponseLocalVar, token, returnTo, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        partial void AfterUpdateLogoutFlow(ref bool suppressDefaultLog, IUpdateLogoutFlowApiResponse apiResponseLocalVar, Option<string> token, Option<string> returnTo, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        private void OnErrorUpdateLogoutFlowDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> token, Option<string> returnTo, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateLogoutFlow(ref suppressDefaultLog, exception, pathFormat, path, token, returnTo, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        /// <param name="returnTo"></param>
        /// <param name="cookie"></param>
        partial void OnErrorUpdateLogoutFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> token, Option<string> returnTo, Option<string> cookie);

        /// <summary>
        /// Update Logout Flow This endpoint logs out an identity in a self-service manner.  If the &#x60;Accept&#x60; HTTP header is not set to &#x60;application/json&#x60;, the browser will be redirected (HTTP 303 See Other) to the &#x60;return_to&#x60; parameter of the initial request or fall back to &#x60;urls.default_return_to&#x60;.  If the &#x60;Accept&#x60; HTTP header is set to &#x60;application/json&#x60;, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
        /// </summary>
        /// <param name="token">A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint. (optional)</param>
        /// <param name="returnTo">The URL to return to after the logout was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoutFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateLogoutFlowApiResponse?> UpdateLogoutFlowOrDefaultAsync(Option<string> token = default, Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateLogoutFlowAsync(token, returnTo, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Logout Flow This endpoint logs out an identity in a self-service manner.  If the &#x60;Accept&#x60; HTTP header is not set to &#x60;application/json&#x60;, the browser will be redirected (HTTP 303 See Other) to the &#x60;return_to&#x60; parameter of the initial request or fall back to &#x60;urls.default_return_to&#x60;.  If the &#x60;Accept&#x60; HTTP header is set to &#x60;application/json&#x60;, a 204 No Content response will be sent on successful logout instead.  This endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...). For API clients you can call the &#x60;/self-service/logout/api&#x60; URL directly with the Ory Session Token.  More information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">A Valid Logout Token  If you do not have a logout token because you only have a session cookie, call &#x60;/self-service/logout/browser&#x60; to generate a URL for this endpoint. (optional)</param>
        /// <param name="returnTo">The URL to return to after the logout was completed. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateLogoutFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateLogoutFlowApiResponse> UpdateLogoutFlowAsync(Option<string> token = default, Option<string> returnTo = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateLogoutFlow(token, returnTo, cookie);

                FormatUpdateLogoutFlow(ref token, ref returnTo, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/logout";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (token.IsSet)
                        // here too
                        parseQueryStringLocalVar["token"] = ClientUtils.ParameterToString(token.Value);

                    if (returnTo.IsSet)
                        // here too
                        parseQueryStringLocalVar["return_to"] = ClientUtils.ParameterToString(returnTo.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateLogoutFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateLogoutFlowApiResponse>();

                        UpdateLogoutFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/logout", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateLogoutFlowDefaultImplementation(apiResponseLocalVar, token, returnTo, cookie);

                        Events.ExecuteOnUpdateLogoutFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateLogoutFlowDefaultImplementation(e, "/self-service/logout", uriBuilderLocalVar.Path, token, returnTo, cookie);
                Events.ExecuteOnErrorUpdateLogoutFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateLogoutFlowApiResponse"/>
        /// </summary>
        public partial class UpdateLogoutFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IUpdateLogoutFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateLogoutFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateLogoutFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateLogoutFlowApiResponse(ILogger<UpdateLogoutFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsNoContent && !IsSeeOther;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateRecoveryFlow(KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, ref string flow, ref Option<string> token, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateUpdateRecoveryFlow(KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token, Option<string> cookie)
        {
            if (kratosUpdateRecoveryFlowBody == null)
                throw new ArgumentNullException(nameof(kratosUpdateRecoveryFlowBody));

            if (flow == null)
                throw new ArgumentNullException(nameof(flow));

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        private void AfterUpdateRecoveryFlowDefaultImplementation(IUpdateRecoveryFlowApiResponse apiResponseLocalVar, KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterUpdateRecoveryFlow(ref suppressDefaultLog, apiResponseLocalVar, kratosUpdateRecoveryFlowBody, flow, token, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        partial void AfterUpdateRecoveryFlow(ref bool suppressDefaultLog, IUpdateRecoveryFlowApiResponse apiResponseLocalVar, KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        private void OnErrorUpdateRecoveryFlowDefaultImplementation(Exception exception, string pathFormat, string path, KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateRecoveryFlow(ref suppressDefaultLog, exception, pathFormat, path, kratosUpdateRecoveryFlowBody, flow, token, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        partial void OnErrorUpdateRecoveryFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token, Option<string> cookie);

        /// <summary>
        /// Update Recovery Flow Use this endpoint to update a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; for the &#x60;link&#x60; method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow">The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateRecoveryFlowApiResponse?> UpdateRecoveryFlowOrDefaultAsync(KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateRecoveryFlowAsync(kratosUpdateRecoveryFlowBody, flow, token, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Recovery Flow Use this endpoint to update a recovery flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid. and a HTTP 303 See Other redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Recovery UI URL with the Recovery Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; for the &#x60;link&#x60; method and allows the user to request another recovery email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a recovery link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with a new Recovery Flow ID which contains an error message that the recovery link was invalid.  More information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateRecoveryFlowBody"></param>
        /// <param name="flow">The Recovery Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/recovery?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Recovery Token  The recovery token which completes the recovery request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRecoveryFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateRecoveryFlowApiResponse> UpdateRecoveryFlowAsync(KratosUpdateRecoveryFlowBody kratosUpdateRecoveryFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateRecoveryFlow(kratosUpdateRecoveryFlowBody, flow, token, cookie);

                FormatUpdateRecoveryFlow(kratosUpdateRecoveryFlowBody, ref flow, ref token, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/recovery";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["flow"] = ClientUtils.ParameterToString(flow);

                    if (token.IsSet)
                        // here too
                        parseQueryStringLocalVar["token"] = ClientUtils.ParameterToString(token.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.Content = (kratosUpdateRecoveryFlowBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(kratosUpdateRecoveryFlowBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateRecoveryFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateRecoveryFlowApiResponse>();

                        UpdateRecoveryFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/recovery", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateRecoveryFlowDefaultImplementation(apiResponseLocalVar, kratosUpdateRecoveryFlowBody, flow, token, cookie);

                        Events.ExecuteOnUpdateRecoveryFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateRecoveryFlowDefaultImplementation(e, "/self-service/recovery", uriBuilderLocalVar.Path, kratosUpdateRecoveryFlowBody, flow, token, cookie);
                Events.ExecuteOnErrorUpdateRecoveryFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateRecoveryFlowApiResponse"/>
        /// </summary>
        public partial class UpdateRecoveryFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IUpdateRecoveryFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateRecoveryFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateRecoveryFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateRecoveryFlowApiResponse(ILogger<UpdateRecoveryFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRecoveryFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRecoveryFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRecoveryFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRecoveryFlow? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRecoveryFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRecoveryFlow? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest && !IsGone && !IsUnprocessableContent;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateRegistrationFlow(KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, ref string flow, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateUpdateRegistrationFlow(KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie)
        {
            if (kratosUpdateRegistrationFlowBody == null)
                throw new ArgumentNullException(nameof(kratosUpdateRegistrationFlowBody));

            if (flow == null)
                throw new ArgumentNullException(nameof(flow));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="cookie"></param>
        private void AfterUpdateRegistrationFlowDefaultImplementation(IUpdateRegistrationFlowApiResponse apiResponseLocalVar, KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterUpdateRegistrationFlow(ref suppressDefaultLog, apiResponseLocalVar, kratosUpdateRegistrationFlowBody, flow, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="cookie"></param>
        partial void AfterUpdateRegistrationFlow(ref bool suppressDefaultLog, IUpdateRegistrationFlowApiResponse apiResponseLocalVar, KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="cookie"></param>
        private void OnErrorUpdateRegistrationFlowDefaultImplementation(Exception exception, string pathFormat, string path, KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateRegistrationFlow(ref suppressDefaultLog, exception, pathFormat, path, kratosUpdateRegistrationFlowBody, flow, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="cookie"></param>
        partial void OnErrorUpdateRegistrationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie);

        /// <summary>
        /// Update Registration Flow Use this endpoint to complete a registration flow by sending an identity&#39;s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the &#x60;session&#x60; and &#x60;session_token&#x60; will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the &#x60;return_to&#x60; value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateRegistrationFlowApiResponse?> UpdateRegistrationFlowOrDefaultAsync(KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateRegistrationFlowAsync(kratosUpdateRegistrationFlowBody, flow, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update Registration Flow Use this endpoint to complete a registration flow by sending an identity&#39;s traits and password. This endpoint behaves differently for API and browser flows.  API flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and a application/json body with the created identity success - if the session hook is configured the &#x60;session&#x60; and &#x60;session_token&#x60; will also be included; HTTP 410 if the original flow expired with the appropriate error messages set and optionally a &#x60;use_flow_id&#x60; parameter in the body; HTTP 400 on form validation errors.  Browser flows expect a Content-Type of &#x60;application/x-www-form-urlencoded&#x60; or &#x60;application/json&#x60; to be sent in the body and respond with a HTTP 303 redirect to the post/after registration URL or the &#x60;return_to&#x60; value if it was set and if the registration succeeded; a HTTP 303 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.  Browser flows with an accept header of &#x60;application/json&#x60; will not redirect but instead respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors.  If this endpoint is called with &#x60;Accept: application/json&#x60; in the header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_already_available&#x60;: The user is already signed in. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Login](https://www.ory.sh/docs/kratos/self-service/flows/user-login) and [User Registration Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-registration).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateRegistrationFlowBody"></param>
        /// <param name="flow">The Registration Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/registration?flow&#x3D;abcde&#x60;).</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRegistrationFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateRegistrationFlowApiResponse> UpdateRegistrationFlowAsync(KratosUpdateRegistrationFlowBody kratosUpdateRegistrationFlowBody, string flow, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateRegistrationFlow(kratosUpdateRegistrationFlowBody, flow, cookie);

                FormatUpdateRegistrationFlow(kratosUpdateRegistrationFlowBody, ref flow, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/registration";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["flow"] = ClientUtils.ParameterToString(flow);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.Content = (kratosUpdateRegistrationFlowBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(kratosUpdateRegistrationFlowBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateRegistrationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateRegistrationFlowApiResponse>();

                        UpdateRegistrationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/registration", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateRegistrationFlowDefaultImplementation(apiResponseLocalVar, kratosUpdateRegistrationFlowBody, flow, cookie);

                        Events.ExecuteOnUpdateRegistrationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateRegistrationFlowDefaultImplementation(e, "/self-service/registration", uriBuilderLocalVar.Path, kratosUpdateRegistrationFlowBody, flow, cookie);
                Events.ExecuteOnErrorUpdateRegistrationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateRegistrationFlowApiResponse"/>
        /// </summary>
        public partial class UpdateRegistrationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IUpdateRegistrationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateRegistrationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateRegistrationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateRegistrationFlowApiResponse(ILogger<UpdateRegistrationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSuccessfulNativeRegistration? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSuccessfulNativeRegistration>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSuccessfulNativeRegistration? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosRegistrationFlow? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosRegistrationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosRegistrationFlow? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest && !IsGone && !IsUnprocessableContent;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateSettingsFlow(KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, ref string flow, ref Option<string> xSessionToken, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateUpdateSettingsFlow(KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie)
        {
            if (kratosUpdateSettingsFlowBody == null)
                throw new ArgumentNullException(nameof(kratosUpdateSettingsFlowBody));

            if (flow == null)
                throw new ArgumentNullException(nameof(flow));

            if (xSessionToken.IsSet && xSessionToken.Value == null)
                throw new ArgumentNullException(nameof(xSessionToken));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void AfterUpdateSettingsFlowDefaultImplementation(IUpdateSettingsFlowApiResponse apiResponseLocalVar, KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterUpdateSettingsFlow(ref suppressDefaultLog, apiResponseLocalVar, kratosUpdateSettingsFlowBody, flow, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void AfterUpdateSettingsFlow(ref bool suppressDefaultLog, IUpdateSettingsFlowApiResponse apiResponseLocalVar, KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        private void OnErrorUpdateSettingsFlowDefaultImplementation(Exception exception, string pathFormat, string path, KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateSettingsFlow(ref suppressDefaultLog, exception, pathFormat, path, kratosUpdateSettingsFlowBody, flow, xSessionToken, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="xSessionToken"></param>
        /// <param name="cookie"></param>
        partial void OnErrorUpdateSettingsFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken, Option<string> cookie);

        /// <summary>
        /// Complete Settings Flow Use this endpoint to complete a settings flow by sending an identity&#39;s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; respond with a HTTP 303 redirect to the post/after settings URL or the &#x60;return_to&#x60; value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low.  Browser flows with HTTP Header &#x60;Accept: application/json&#x60; respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session&#39;s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a &#x60;Accept: application/json&#x60; HTTP header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_refresh_required&#x60;: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters &#x60;?refresh&#x3D;true&amp;return_to&#x3D;&lt;the-current-browser-url&gt;&#x60;, or initiate a refresh login flow otherwise. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow">The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateSettingsFlowApiResponse?> UpdateSettingsFlowOrDefaultAsync(KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateSettingsFlowAsync(kratosUpdateSettingsFlowBody, flow, xSessionToken, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Complete Settings Flow Use this endpoint to complete a settings flow by sending an identity&#39;s updated password. This endpoint behaves differently for API and browser flows.  API-initiated flows expect &#x60;application/json&#x60; to be sent in the body and respond with HTTP 200 and an application/json body with the session token on success; HTTP 303 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set; HTTP 400 on form validation errors. HTTP 401 when the endpoint is called without a valid session token. HTTP 403 when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low. Implies that the user needs to re-authenticate.  Browser flows without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; respond with a HTTP 303 redirect to the post/after settings URL or the &#x60;return_to&#x60; value if it was set and if the flow succeeded; a HTTP 303 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise. a HTTP 303 redirect to the login endpoint when &#x60;selfservice.flows.settings.privileged_session_max_age&#x60; was reached or the session&#39;s AAL is too low.  Browser flows with HTTP Header &#x60;Accept: application/json&#x60; respond with HTTP 200 and a application/json body with the signed in identity and a &#x60;Set-Cookie&#x60; header on success; HTTP 303 redirect to a fresh login flow if the original flow expired with the appropriate error messages set; HTTP 401 when the endpoint is called without a valid session cookie. HTTP 403 when the page is accessed without a session cookie or the session&#39;s AAL is too low. HTTP 400 on form validation errors.  Depending on your configuration this endpoint might return a 403 error if the session has a lower Authenticator Assurance Level (AAL) than is possible for the identity. This can happen if the identity has password + webauthn credentials (which would result in AAL2) but the session has only AAL1. If this error occurs, ask the user to sign in with the second factor (happens automatically for server-side browser flows) or change the configuration.  If this endpoint is called with a &#x60;Accept: application/json&#x60; HTTP header, the response contains the flow without a redirect. In the case of an error, the &#x60;error.id&#x60; of the JSON response body can be one of:  &#x60;session_refresh_required&#x60;: The identity requested to change something that needs a privileged session. Redirect the identity to the login init endpoint with query parameters &#x60;?refresh&#x3D;true&amp;return_to&#x3D;&lt;the-current-browser-url&gt;&#x60;, or initiate a refresh login flow otherwise. &#x60;security_csrf_violation&#x60;: Unable to fetch the flow because a CSRF violation occurred. &#x60;session_inactive&#x60;: No Ory Session was found - sign in a user first. &#x60;security_identity_mismatch&#x60;: The flow was interrupted with &#x60;session_refresh_required&#x60; but apparently some other identity logged in instead. &#x60;security_identity_mismatch&#x60;: The requested &#x60;?return_to&#x60; address is not allowed to be used. Adjust this in the configuration! &#x60;browser_location_change_required&#x60;: Usually sent when an AJAX request indicates that the browser needs to open a specific URL. Most likely used in Social Sign In flows.  More information can be found at [Ory Kratos User Settings &amp; Profile Management Documentation](../self-service/flows/user-settings).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateSettingsFlowBody"></param>
        /// <param name="flow">The Settings Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/settings?flow&#x3D;abcde&#x60;).</param>
        /// <param name="xSessionToken">The Session Token of the Identity performing the settings flow. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateSettingsFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateSettingsFlowApiResponse> UpdateSettingsFlowAsync(KratosUpdateSettingsFlowBody kratosUpdateSettingsFlowBody, string flow, Option<string> xSessionToken = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateSettingsFlow(kratosUpdateSettingsFlowBody, flow, xSessionToken, cookie);

                FormatUpdateSettingsFlow(kratosUpdateSettingsFlowBody, ref flow, ref xSessionToken, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/settings";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["flow"] = ClientUtils.ParameterToString(flow);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (xSessionToken.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("X-Session-Token", ClientUtils.ParameterToString(xSessionToken.Value));

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.Content = (kratosUpdateSettingsFlowBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(kratosUpdateSettingsFlowBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateSettingsFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateSettingsFlowApiResponse>();

                        UpdateSettingsFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateSettingsFlowDefaultImplementation(apiResponseLocalVar, kratosUpdateSettingsFlowBody, flow, xSessionToken, cookie);

                        Events.ExecuteOnUpdateSettingsFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateSettingsFlowDefaultImplementation(e, "/self-service/settings", uriBuilderLocalVar.Path, kratosUpdateSettingsFlowBody, flow, xSessionToken, cookie);
                Events.ExecuteOnErrorUpdateSettingsFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateSettingsFlowApiResponse"/>
        /// </summary>
        public partial class UpdateSettingsFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IUpdateSettingsFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateSettingsFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateSettingsFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateSettingsFlowApiResponse(ILogger<UpdateSettingsFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSettingsFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSettingsFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSettingsFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosSettingsFlow? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosSettingsFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosSettingsFlow? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Forbidden()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsForbidden
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryForbidden([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Forbidden();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)403);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorBrowserLocationChangeRequired? result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest && !IsUnauthorized && !IsForbidden && !IsGone && !IsUnprocessableContent;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateVerificationFlow(KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, ref string flow, ref Option<string> token, ref Option<string> cookie);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        /// <returns></returns>
        private void ValidateUpdateVerificationFlow(KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token, Option<string> cookie)
        {
            if (kratosUpdateVerificationFlowBody == null)
                throw new ArgumentNullException(nameof(kratosUpdateVerificationFlowBody));

            if (flow == null)
                throw new ArgumentNullException(nameof(flow));

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token));

            if (cookie.IsSet && cookie.Value == null)
                throw new ArgumentNullException(nameof(cookie));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        private void AfterUpdateVerificationFlowDefaultImplementation(IUpdateVerificationFlowApiResponse apiResponseLocalVar, KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            AfterUpdateVerificationFlow(ref suppressDefaultLog, apiResponseLocalVar, kratosUpdateVerificationFlowBody, flow, token, cookie);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        partial void AfterUpdateVerificationFlow(ref bool suppressDefaultLog, IUpdateVerificationFlowApiResponse apiResponseLocalVar, KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token, Option<string> cookie);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        private void OnErrorUpdateVerificationFlowDefaultImplementation(Exception exception, string pathFormat, string path, KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token, Option<string> cookie)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateVerificationFlow(ref suppressDefaultLog, exception, pathFormat, path, kratosUpdateVerificationFlowBody, flow, token, cookie);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow"></param>
        /// <param name="token"></param>
        /// <param name="cookie"></param>
        partial void OnErrorUpdateVerificationFlow(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token, Option<string> cookie);

        /// <summary>
        /// Complete Verification Flow Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; when using the &#x60;link&#x60; method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a verification link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow">The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateVerificationFlowApiResponse?> UpdateVerificationFlowOrDefaultAsync(KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateVerificationFlowAsync(kratosUpdateVerificationFlowBody, flow, token, cookie, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Complete Verification Flow Use this endpoint to complete a verification flow. This endpoint behaves differently for API and browser flows and has several states:  &#x60;choose_method&#x60; expects &#x60;flow&#x60; (in the URL query) and &#x60;email&#x60; (in the body) to be sent and works with API- and Browser-initiated flows. For API clients and Browser clients with HTTP Header &#x60;Accept: application/json&#x60; it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid and a HTTP 303 See Other redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired). For Browser clients without HTTP Header &#x60;Accept&#x60; or with &#x60;Accept: text/_*&#x60; it returns a HTTP 303 See Other redirect to the Verification UI URL with the Verification Flow ID appended. &#x60;sent_email&#x60; is the success state after &#x60;choose_method&#x60; when using the &#x60;link&#x60; method and allows the user to request another verification email. It works for both API and Browser-initiated flows and returns the same responses as the flow in &#x60;choose_method&#x60; state. &#x60;passed_challenge&#x60; expects a &#x60;token&#x60; to be sent in the URL query and given the nature of the flow (\&quot;sending a verification link\&quot;) does not have any API capabilities. The server responds with a HTTP 303 See Other redirect either to the Settings UI URL (if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with a new Verification Flow ID which contains an error message that the verification link was invalid.  More information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="kratosUpdateVerificationFlowBody"></param>
        /// <param name="flow">The Verification Flow ID  The value for this parameter comes from &#x60;flow&#x60; URL Query parameter sent to your application (e.g. &#x60;/verification?flow&#x3D;abcde&#x60;).</param>
        /// <param name="token">Verification Token  The verification token which completes the verification request. If the token is invalid (e.g. expired) an error will be shown to the end-user.  This parameter is usually set in a link and not used by any direct API call. (optional)</param>
        /// <param name="cookie">HTTP Cookies  When using the SDK in a browser app, on the server side you must include the HTTP Cookie Header sent by the client to your server here. This ensures that CSRF and session cookies are respected. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateVerificationFlowApiResponse"/>&gt;</returns>
        public async Task<IUpdateVerificationFlowApiResponse> UpdateVerificationFlowAsync(KratosUpdateVerificationFlowBody kratosUpdateVerificationFlowBody, string flow, Option<string> token = default, Option<string> cookie = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateVerificationFlow(kratosUpdateVerificationFlowBody, flow, token, cookie);

                FormatUpdateVerificationFlow(kratosUpdateVerificationFlowBody, ref flow, ref token, ref cookie);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/self-service/verification";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["flow"] = ClientUtils.ParameterToString(flow);

                    if (token.IsSet)
                        // here too
                        parseQueryStringLocalVar["token"] = ClientUtils.ParameterToString(token.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (cookie.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Cookie", ClientUtils.ParameterToString(cookie.Value));

                    httpRequestMessageLocalVar.Content = (kratosUpdateVerificationFlowBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(kratosUpdateVerificationFlowBody, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateVerificationFlowApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateVerificationFlowApiResponse>();

                        UpdateVerificationFlowApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/self-service/verification", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateVerificationFlowDefaultImplementation(apiResponseLocalVar, kratosUpdateVerificationFlowBody, flow, token, cookie);

                        Events.ExecuteOnUpdateVerificationFlow(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateVerificationFlowDefaultImplementation(e, "/self-service/verification", uriBuilderLocalVar.Path, kratosUpdateVerificationFlowBody, flow, token, cookie);
                Events.ExecuteOnErrorUpdateVerificationFlow(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateVerificationFlowApiResponse"/>
        /// </summary>
        public partial class UpdateVerificationFlowApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IUpdateVerificationFlowApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateVerificationFlowApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateVerificationFlowApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateVerificationFlowApiResponse(ILogger<UpdateVerificationFlowApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosVerificationFlow? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosVerificationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosVerificationFlow? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 303 SeeOther
            /// </summary>
            /// <returns></returns>
            public bool IsSeeOther => 303 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosVerificationFlow? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosVerificationFlow>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosVerificationFlow? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public bool IsGone => 410 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 410 Gone
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Gone()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsGone
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 410 Gone and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryGone([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Gone();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)410);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsSeeOther && !IsBadRequest && !IsGone;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
