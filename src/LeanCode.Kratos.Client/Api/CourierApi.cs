// <auto-generated>
/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more. 
 *
 * Contact: office@ory.sh
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using LeanCode.Kratos.Client.Client;
using LeanCode.Kratos.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace LeanCode.Kratos.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICourierApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        CourierApiEvents Events { get; }

        /// <summary>
        /// Get a Message
        /// </summary>
        /// <remarks>
        /// Gets a specific messages by the given ID.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">MessageID is the ID of the message.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourierMessageApiResponse"/>&gt;</returns>
        Task<IGetCourierMessageApiResponse> GetCourierMessageAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a Message
        /// </summary>
        /// <remarks>
        /// Gets a specific messages by the given ID.
        /// </remarks>
        /// <param name="id">MessageID is the ID of the message.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourierMessageApiResponse"/>?&gt;</returns>
        Task<IGetCourierMessageApiResponse?> GetCourierMessageOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Lists all messages by given status and recipient.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status filters out messages based on status. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="recipient">Recipient filters out messages based on recipient. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCourierMessagesApiResponse"/>&gt;</returns>
        Task<IListCourierMessagesApiResponse> ListCourierMessagesAsync(Option<KratosCourierMessageStatus> status = default, Option<string> pageToken = default, Option<string> recipient = default, Option<long> pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Messages
        /// </summary>
        /// <remarks>
        /// Lists all messages by given status and recipient.
        /// </remarks>
        /// <param name="status">Status filters out messages based on status. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="recipient">Recipient filters out messages based on recipient. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCourierMessagesApiResponse"/>?&gt;</returns>
        Task<IListCourierMessagesApiResponse?> ListCourierMessagesOrDefaultAsync(Option<KratosCourierMessageStatus> status = default, Option<string> pageToken = default, Option<string> recipient = default, Option<long> pageSize = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetCourierMessageApiResponse"/>
    /// </summary>
    public interface IGetCourierMessageApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<LeanCode.Kratos.Client.Model.KratosMessage?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// The <see cref="IListCourierMessagesApiResponse"/>
    /// </summary>
    public interface IListCourierMessagesApiResponse : LeanCode.Kratos.Client.Client.IApiResponse, IOk<List<KratosMessage>?>, IBadRequest<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>, IDefault<LeanCode.Kratos.Client.Model.KratosErrorGeneric?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is the default response type
        /// </summary>
        /// <returns></returns>
        bool IsDefault { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CourierApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetCourierMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetCourierMessage;

        internal void ExecuteOnGetCourierMessage(CourierApi.GetCourierMessageApiResponse apiResponse)
        {
            OnGetCourierMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetCourierMessage(Exception exception)
        {
            OnErrorGetCourierMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnListCourierMessages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorListCourierMessages;

        internal void ExecuteOnListCourierMessages(CourierApi.ListCourierMessagesApiResponse apiResponse)
        {
            OnListCourierMessages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListCourierMessages(Exception exception)
        {
            OnErrorListCourierMessages?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class CourierApi : ICourierApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CourierApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public CourierApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CourierApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CourierApi(ILogger<CourierApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, CourierApiEvents courierApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<CourierApi>();
            HttpClient = httpClient;
            Events = courierApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetCourierMessage(ref string id);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        private void ValidateGetCourierMessage(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterGetCourierMessageDefaultImplementation(IGetCourierMessageApiResponse apiResponseLocalVar, string id)
        {
            bool suppressDefaultLog = false;
            AfterGetCourierMessage(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterGetCourierMessage(ref bool suppressDefaultLog, IGetCourierMessageApiResponse apiResponseLocalVar, string id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        private void OnErrorGetCourierMessageDefaultImplementation(Exception exception, string pathFormat, string path, string id)
        {
            bool suppressDefaultLog = false;
            OnErrorGetCourierMessage(ref suppressDefaultLog, exception, pathFormat, path, id);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        partial void OnErrorGetCourierMessage(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string id);

        /// <summary>
        /// Get a Message Gets a specific messages by the given ID.
        /// </summary>
        /// <param name="id">MessageID is the ID of the message.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourierMessageApiResponse"/>&gt;</returns>
        public async Task<IGetCourierMessageApiResponse?> GetCourierMessageOrDefaultAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetCourierMessageAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a Message Gets a specific messages by the given ID.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">MessageID is the ID of the message.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetCourierMessageApiResponse"/>&gt;</returns>
        public async Task<IGetCourierMessageApiResponse> GetCourierMessageAsync(string id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCourierMessage(id);

                FormatGetCourierMessage(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/admin/courier/messages/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetCourierMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetCourierMessageApiResponse>();

                        GetCourierMessageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/admin/courier/messages/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetCourierMessageDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnGetCourierMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCourierMessageDefaultImplementation(e, "/admin/courier/messages/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorGetCourierMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetCourierMessageApiResponse"/>
        /// </summary>
        public partial class GetCourierMessageApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IGetCourierMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetCourierMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetCourierMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetCourierMessageApiResponse(ILogger<GetCourierMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosMessage? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosMessage>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosMessage? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListCourierMessages(ref Option<KratosCourierMessageStatus> status, ref Option<string> pageToken, ref Option<string> recipient, ref Option<long> pageSize);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pageToken"></param>
        /// <param name="recipient"></param>
        /// <returns></returns>
        private void ValidateListCourierMessages(Option<string> pageToken, Option<string> recipient)
        {
            if (pageToken.IsSet && pageToken.Value == null)
                throw new ArgumentNullException(nameof(pageToken));

            if (recipient.IsSet && recipient.Value == null)
                throw new ArgumentNullException(nameof(recipient));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="status"></param>
        /// <param name="pageToken"></param>
        /// <param name="recipient"></param>
        /// <param name="pageSize"></param>
        private void AfterListCourierMessagesDefaultImplementation(IListCourierMessagesApiResponse apiResponseLocalVar, Option<KratosCourierMessageStatus> status, Option<string> pageToken, Option<string> recipient, Option<long> pageSize)
        {
            bool suppressDefaultLog = false;
            AfterListCourierMessages(ref suppressDefaultLog, apiResponseLocalVar, status, pageToken, recipient, pageSize);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="status"></param>
        /// <param name="pageToken"></param>
        /// <param name="recipient"></param>
        /// <param name="pageSize"></param>
        partial void AfterListCourierMessages(ref bool suppressDefaultLog, IListCourierMessagesApiResponse apiResponseLocalVar, Option<KratosCourierMessageStatus> status, Option<string> pageToken, Option<string> recipient, Option<long> pageSize);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="status"></param>
        /// <param name="pageToken"></param>
        /// <param name="recipient"></param>
        /// <param name="pageSize"></param>
        private void OnErrorListCourierMessagesDefaultImplementation(Exception exception, string pathFormat, string path, Option<KratosCourierMessageStatus> status, Option<string> pageToken, Option<string> recipient, Option<long> pageSize)
        {
            bool suppressDefaultLog = false;
            OnErrorListCourierMessages(ref suppressDefaultLog, exception, pathFormat, path, status, pageToken, recipient, pageSize);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="status"></param>
        /// <param name="pageToken"></param>
        /// <param name="recipient"></param>
        /// <param name="pageSize"></param>
        partial void OnErrorListCourierMessages(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<KratosCourierMessageStatus> status, Option<string> pageToken, Option<string> recipient, Option<long> pageSize);

        /// <summary>
        /// List Messages Lists all messages by given status and recipient.
        /// </summary>
        /// <param name="status">Status filters out messages based on status. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="recipient">Recipient filters out messages based on recipient. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCourierMessagesApiResponse"/>&gt;</returns>
        public async Task<IListCourierMessagesApiResponse?> ListCourierMessagesOrDefaultAsync(Option<KratosCourierMessageStatus> status = default, Option<string> pageToken = default, Option<string> recipient = default, Option<long> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListCourierMessagesAsync(status, pageToken, recipient, pageSize, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Messages Lists all messages by given status and recipient.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Status filters out messages based on status. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageToken">Next Page Token  The next page token. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional)</param>
        /// <param name="recipient">Recipient filters out messages based on recipient. If no value is provided, it doesn&#39;t take effect on filter. (optional)</param>
        /// <param name="pageSize">Items per Page  This is the number of items per page to return. For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination). (optional, default to 250)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListCourierMessagesApiResponse"/>&gt;</returns>
        public async Task<IListCourierMessagesApiResponse> ListCourierMessagesAsync(Option<KratosCourierMessageStatus> status = default, Option<string> pageToken = default, Option<string> recipient = default, Option<long> pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListCourierMessages(pageToken, recipient);

                FormatListCourierMessages(ref status, ref pageToken, ref recipient, ref pageSize);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/admin/courier/messages";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (status.IsSet)
                        // here too
                        parseQueryStringLocalVar["status"] = ClientUtils.ParameterToString(status.Value);

                    if (pageToken.IsSet)
                        // here too
                        parseQueryStringLocalVar["page_token"] = ClientUtils.ParameterToString(pageToken.Value);

                    if (recipient.IsSet)
                        // here too
                        parseQueryStringLocalVar["recipient"] = ClientUtils.ParameterToString(recipient.Value);

                    if (pageSize.IsSet)
                        // here too
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListCourierMessagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListCourierMessagesApiResponse>();

                        ListCourierMessagesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/admin/courier/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListCourierMessagesDefaultImplementation(apiResponseLocalVar, status, pageToken, recipient, pageSize);

                        Events.ExecuteOnListCourierMessages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListCourierMessagesDefaultImplementation(e, "/admin/courier/messages", uriBuilderLocalVar.Path, status, pageToken, recipient, pageSize);
                Events.ExecuteOnErrorListCourierMessages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListCourierMessagesApiResponse"/>
        /// </summary>
        public partial class ListCourierMessagesApiResponse : LeanCode.Kratos.Client.Client.ApiResponse, IListCourierMessagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListCourierMessagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListCourierMessagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListCourierMessagesApiResponse(ILogger<ListCourierMessagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<KratosMessage>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<KratosMessage>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<KratosMessage>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is the default response type
            /// </summary>
            /// <returns></returns>
            public bool IsDefault => !IsOk && !IsBadRequest;

            /// <summary>
            /// Deserializes the response if the response is 0 Default
            /// </summary>
            /// <returns></returns>
            public LeanCode.Kratos.Client.Model.KratosErrorGeneric? Default()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsDefault
                    ? System.Text.Json.JsonSerializer.Deserialize<LeanCode.Kratos.Client.Model.KratosErrorGeneric>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 0 Default and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryDefault([NotNullWhen(true)]out LeanCode.Kratos.Client.Model.KratosErrorGeneric? result)
            {
                result = null;

                try
                {
                    result = Default();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)0);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
